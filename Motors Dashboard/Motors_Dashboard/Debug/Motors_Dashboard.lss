
Motors_Dashboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000053ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000274  00800060  000053ee  00005482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  008002d4  008002d4  000056f6  2**0
                  ALLOC
  3 .stab         00005880  00000000  00000000  000056f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004641  00000000  00000000  0000af78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000f5b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000f779  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000f98d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00011f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0001346d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00014778  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00014958  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00014c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015679  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__vector_1>
       8:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__vector_2>
       c:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__vector_10>
      2c:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 31       	cpi	r26, 0x1D	; 29
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d7 20 	call	0x41ae	; 0x41ae <main>
      8a:	0c 94 f5 29 	jmp	0x53ea	; 0x53ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ae 29 	jmp	0x535c	; 0x535c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e3       	ldi	r26, 0x3C	; 60
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ca 29 	jmp	0x5394	; 0x5394 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ba 29 	jmp	0x5374	; 0x5374 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d6 29 	jmp	0x53ac	; 0x53ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ba 29 	jmp	0x5374	; 0x5374 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d6 29 	jmp	0x53ac	; 0x53ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ae 29 	jmp	0x535c	; 0x535c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e3       	ldi	r24, 0x3C	; 60
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ca 29 	jmp	0x5394	; 0x5394 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e3       	ldi	r22, 0x3C	; 60
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ba 29 	jmp	0x5374	; 0x5374 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d6 29 	jmp	0x53ac	; 0x53ac <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ba 29 	jmp	0x5374	; 0x5374 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d6 29 	jmp	0x53ac	; 0x53ac <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ba 29 	jmp	0x5374	; 0x5374 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d6 29 	jmp	0x53ac	; 0x53ac <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b7 29 	jmp	0x536e	; 0x536e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 d3 29 	jmp	0x53a6	; 0x53a6 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 be 29 	jmp	0x537c	; 0x537c <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 da 29 	jmp	0x53b4	; 0x53b4 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ec 5b       	subi	r30, 0xBC	; 188
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TIMER0_Init>:
volatile u8 Global_Delay_Status=0;



ES_t TIMER0_Init(TIMER0_Config_t *TIME0_Cfg)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2a 97       	sbiw	r28, 0x0a	; 10
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	9b 83       	std	Y+3, r25	; 0x03
     f00:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	89 83       	std	Y+1, r24	; 0x01
	if(TIME0_Cfg == NULLPTR){
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	19 f4       	brne	.+6      	; 0xf14 <TIMER0_Init+0x2a>
		RetValue = ES_NOT_OK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	bb c0       	rjmp	.+374    	; 0x108a <TIMER0_Init+0x1a0>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer0_Cfg = *TIME0_Cfg;
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	9b 81       	ldd	r25, Y+3	; 0x03
     f18:	2d e0       	ldi	r18, 0x0D	; 13
     f1a:	33 e0       	ldi	r19, 0x03	; 3
     f1c:	3f 83       	std	Y+7, r19	; 0x07
     f1e:	2e 83       	std	Y+6, r18	; 0x06
     f20:	99 87       	std	Y+9, r25	; 0x09
     f22:	88 87       	std	Y+8, r24	; 0x08
     f24:	35 e0       	ldi	r19, 0x05	; 5
     f26:	3a 87       	std	Y+10, r19	; 0x0a
     f28:	e8 85       	ldd	r30, Y+8	; 0x08
     f2a:	f9 85       	ldd	r31, Y+9	; 0x09
     f2c:	00 80       	ld	r0, Z
     f2e:	28 85       	ldd	r18, Y+8	; 0x08
     f30:	39 85       	ldd	r19, Y+9	; 0x09
     f32:	2f 5f       	subi	r18, 0xFF	; 255
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	39 87       	std	Y+9, r19	; 0x09
     f38:	28 87       	std	Y+8, r18	; 0x08
     f3a:	ee 81       	ldd	r30, Y+6	; 0x06
     f3c:	ff 81       	ldd	r31, Y+7	; 0x07
     f3e:	00 82       	st	Z, r0
     f40:	2e 81       	ldd	r18, Y+6	; 0x06
     f42:	3f 81       	ldd	r19, Y+7	; 0x07
     f44:	2f 5f       	subi	r18, 0xFF	; 255
     f46:	3f 4f       	sbci	r19, 0xFF	; 255
     f48:	3f 83       	std	Y+7, r19	; 0x07
     f4a:	2e 83       	std	Y+6, r18	; 0x06
     f4c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f4e:	31 50       	subi	r19, 0x01	; 1
     f50:	3a 87       	std	Y+10, r19	; 0x0a
     f52:	8a 85       	ldd	r24, Y+10	; 0x0a
     f54:	88 23       	and	r24, r24
     f56:	41 f7       	brne	.-48     	; 0xf28 <TIMER0_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME0_Cfg->mode >= TIMER0_NORMAL_MODE) && (TIME0_Cfg->mode <= TIMER0_FAST_PWM_MODE))
     f58:	ea 81       	ldd	r30, Y+2	; 0x02
     f5a:	fb 81       	ldd	r31, Y+3	; 0x03
     f5c:	80 81       	ld	r24, Z
     f5e:	84 30       	cpi	r24, 0x04	; 4
     f60:	08 f0       	brcs	.+2      	; 0xf64 <TIMER0_Init+0x7a>
     f62:	5e c0       	rjmp	.+188    	; 0x1020 <TIMER0_Init+0x136>
		{
			RetValue = ES_OK;
     f64:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME0_Cfg->mode)
     f66:	ea 81       	ldd	r30, Y+2	; 0x02
     f68:	fb 81       	ldd	r31, Y+3	; 0x03
     f6a:	80 81       	ld	r24, Z
     f6c:	e8 2f       	mov	r30, r24
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	fd 83       	std	Y+5, r31	; 0x05
     f72:	ec 83       	std	Y+4, r30	; 0x04
     f74:	2c 81       	ldd	r18, Y+4	; 0x04
     f76:	3d 81       	ldd	r19, Y+5	; 0x05
     f78:	21 30       	cpi	r18, 0x01	; 1
     f7a:	31 05       	cpc	r19, r1
     f7c:	21 f1       	breq	.+72     	; 0xfc6 <TIMER0_Init+0xdc>
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	91 05       	cpc	r25, r1
     f86:	2c f4       	brge	.+10     	; 0xf92 <TIMER0_Init+0xa8>
     f88:	ec 81       	ldd	r30, Y+4	; 0x04
     f8a:	fd 81       	ldd	r31, Y+5	; 0x05
     f8c:	30 97       	sbiw	r30, 0x00	; 0
     f8e:	61 f0       	breq	.+24     	; 0xfa8 <TIMER0_Init+0xbe>
     f90:	49 c0       	rjmp	.+146    	; 0x1024 <TIMER0_Init+0x13a>
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	31 05       	cpc	r19, r1
     f9a:	21 f1       	breq	.+72     	; 0xfe4 <TIMER0_Init+0xfa>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	71 f1       	breq	.+92     	; 0x1002 <TIMER0_Init+0x118>
     fa6:	3e c0       	rjmp	.+124    	; 0x1024 <TIMER0_Init+0x13a>
			{
			case TIMER0_NORMAL_MODE:
				CLR_BIT(TCCR0,WGM00);
     fa8:	a3 e5       	ldi	r26, 0x53	; 83
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e3 e5       	ldi	r30, 0x53	; 83
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 7b       	andi	r24, 0xBF	; 191
     fb4:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
     fb6:	a3 e5       	ldi	r26, 0x53	; 83
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e3 e5       	ldi	r30, 0x53	; 83
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	87 7f       	andi	r24, 0xF7	; 247
     fc2:	8c 93       	st	X, r24
     fc4:	2f c0       	rjmp	.+94     	; 0x1024 <TIMER0_Init+0x13a>
				break;
			case TIMER0_PHASE_CORRECT_MODE:
				SET_BIT(TCCR0,WGM00);
     fc6:	a3 e5       	ldi	r26, 0x53	; 83
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e3 e5       	ldi	r30, 0x53	; 83
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 64       	ori	r24, 0x40	; 64
     fd2:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
     fd4:	a3 e5       	ldi	r26, 0x53	; 83
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e3 e5       	ldi	r30, 0x53	; 83
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	87 7f       	andi	r24, 0xF7	; 247
     fe0:	8c 93       	st	X, r24
     fe2:	20 c0       	rjmp	.+64     	; 0x1024 <TIMER0_Init+0x13a>
				break;
			case TIMER0_CTC_MODE:
				CLR_BIT(TCCR0,WGM00);
     fe4:	a3 e5       	ldi	r26, 0x53	; 83
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e3 e5       	ldi	r30, 0x53	; 83
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8f 7b       	andi	r24, 0xBF	; 191
     ff0:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
     ff2:	a3 e5       	ldi	r26, 0x53	; 83
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e3 e5       	ldi	r30, 0x53	; 83
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	88 60       	ori	r24, 0x08	; 8
     ffe:	8c 93       	st	X, r24
    1000:	11 c0       	rjmp	.+34     	; 0x1024 <TIMER0_Init+0x13a>
				break;
			case TIMER0_FAST_PWM_MODE:
				SET_BIT(TCCR0,WGM00);
    1002:	a3 e5       	ldi	r26, 0x53	; 83
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e3 e5       	ldi	r30, 0x53	; 83
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	80 64       	ori	r24, 0x40	; 64
    100e:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    1010:	a3 e5       	ldi	r26, 0x53	; 83
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e3 e5       	ldi	r30, 0x53	; 83
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 60       	ori	r24, 0x08	; 8
    101c:	8c 93       	st	X, r24
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <TIMER0_Init+0x13a>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME0_Cfg->prescalar >= TIMER0_STOP) && (TIME0_Cfg->prescalar <= EXTERNAL_RISING))
    1024:	ea 81       	ldd	r30, Y+2	; 0x02
    1026:	fb 81       	ldd	r31, Y+3	; 0x03
    1028:	81 81       	ldd	r24, Z+1	; 0x01
    102a:	88 30       	cpi	r24, 0x08	; 8
    102c:	58 f4       	brcc	.+22     	; 0x1044 <TIMER0_Init+0x15a>
		{
			TCCR0 |= TIME0_Cfg->prescalar;
    102e:	a3 e5       	ldi	r26, 0x53	; 83
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e3 e5       	ldi	r30, 0x53	; 83
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	90 81       	ld	r25, Z
    1038:	ea 81       	ldd	r30, Y+2	; 0x02
    103a:	fb 81       	ldd	r31, Y+3	; 0x03
    103c:	81 81       	ldd	r24, Z+1	; 0x01
    103e:	89 2b       	or	r24, r25
    1040:	8c 93       	st	X, r24
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <TIMER0_Init+0x15e>
		}else{
			RetValue = ES_NOT_OK;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_0 OC0 Pin
		TCCR0 |= (TIME0_Cfg->oc0_mode << COM00);
    1048:	a3 e5       	ldi	r26, 0x53	; 83
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e3 e5       	ldi	r30, 0x53	; 83
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	28 2f       	mov	r18, r24
    1054:	ea 81       	ldd	r30, Y+2	; 0x02
    1056:	fb 81       	ldd	r31, Y+3	; 0x03
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	82 95       	swap	r24
    1060:	92 95       	swap	r25
    1062:	90 7f       	andi	r25, 0xF0	; 240
    1064:	98 27       	eor	r25, r24
    1066:	80 7f       	andi	r24, 0xF0	; 240
    1068:	98 27       	eor	r25, r24
    106a:	82 2b       	or	r24, r18
    106c:	8c 93       	st	X, r24


		// Timer_0 Interrupts
		TIMSK |= (TIME0_Cfg->OVF_Interrupt) | (TIME0_Cfg->OCM_Interrupt);
    106e:	a9 e5       	ldi	r26, 0x59	; 89
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e9 e5       	ldi	r30, 0x59	; 89
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	20 81       	ld	r18, Z
    1078:	ea 81       	ldd	r30, Y+2	; 0x02
    107a:	fb 81       	ldd	r31, Y+3	; 0x03
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	ea 81       	ldd	r30, Y+2	; 0x02
    1080:	fb 81       	ldd	r31, Y+3	; 0x03
    1082:	84 81       	ldd	r24, Z+4	; 0x04
    1084:	89 2b       	or	r24, r25
    1086:	82 2b       	or	r24, r18
    1088:	8c 93       	st	X, r24



	}

	return RetValue;
    108a:	89 81       	ldd	r24, Y+1	; 0x01

}
    108c:	2a 96       	adiw	r28, 0x0a	; 10
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <TIMER0_Stop>:
ES_t TIMER0_Stop(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR0,CS00);
    10a6:	a3 e5       	ldi	r26, 0x53	; 83
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e3 e5       	ldi	r30, 0x53	; 83
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8e 7f       	andi	r24, 0xFE	; 254
    10b2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
    10b4:	a3 e5       	ldi	r26, 0x53	; 83
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e3 e5       	ldi	r30, 0x53	; 83
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8d 7f       	andi	r24, 0xFD	; 253
    10c0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    10c2:	a3 e5       	ldi	r26, 0x53	; 83
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e3 e5       	ldi	r30, 0x53	; 83
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8b 7f       	andi	r24, 0xFB	; 251
    10ce:	8c 93       	st	X, r24
	return ES_OK;
    10d0:	80 e0       	ldi	r24, 0x00	; 0
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <TIMER0_GetCompareValue>:

ES_t TIMER0_GetCompareValue(u8 *CM_Value)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <TIMER0_GetCompareValue+0x6>
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
	*CM_Value = OCR0;
    10e6:	ec e5       	ldi	r30, 0x5C	; 92
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	e9 81       	ldd	r30, Y+1	; 0x01
    10ee:	fa 81       	ldd	r31, Y+2	; 0x02
    10f0:	80 83       	st	Z, r24

	return ES_OK;
    10f2:	80 e0       	ldi	r24, 0x00	; 0

}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <TIMER0_SetCompareValue>:
ES_t TIMER0_SetCompareValue(u8 CM_Value)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	0f 92       	push	r0
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = CM_Value;
    110a:	ec e5       	ldi	r30, 0x5C	; 92
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	80 83       	st	Z, r24

	return ES_OK;
    1112:	80 e0       	ldi	r24, 0x00	; 0

}
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <TIMER0_GetCounterValue>:

ES_t TIMER0_GetCounterValue(u8 *TCNT_Value)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <TIMER0_GetCounterValue+0x6>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01

	*TCNT_Value = TCNT0;
    112a:	e2 e5       	ldi	r30, 0x52	; 82
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	e9 81       	ldd	r30, Y+1	; 0x01
    1132:	fa 81       	ldd	r31, Y+2	; 0x02
    1134:	80 83       	st	Z, r24


	return ES_OK;
    1136:	80 e0       	ldi	r24, 0x00	; 0
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <TIMER0_SetCounterValue>:


ES_t TIMER0_SetCounterValue(u8 TCNT_Value)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	0f 92       	push	r0
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = TCNT_Value;
    114e:	e2 e5       	ldi	r30, 0x52	; 82
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	80 83       	st	Z, r24

	return ES_OK;
    1156:	80 e0       	ldi	r24, 0x00	; 0

}
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <TIMER0_GetOVF_Flag>:

// In case of larger than 255
ES_t TIMER0_GetOVF_Flag(u8 *OVF_Value)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <TIMER0_GetOVF_Flag+0x6>
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	9a 83       	std	Y+2, r25	; 0x02
    116c:	89 83       	std	Y+1, r24	; 0x01

	*OVF_Value = OVF_Number;
    116e:	80 91 d9 02 	lds	r24, 0x02D9
    1172:	90 91 da 02 	lds	r25, 0x02DA
    1176:	a0 91 db 02 	lds	r26, 0x02DB
    117a:	b0 91 dc 02 	lds	r27, 0x02DC
    117e:	e9 81       	ldd	r30, Y+1	; 0x01
    1180:	fa 81       	ldd	r31, Y+2	; 0x02
    1182:	80 83       	st	Z, r24
	return ES_OK;
    1184:	80 e0       	ldi	r24, 0x00	; 0

}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <PWM_Set_DutyCycle>:



ES_t PWM_Set_DutyCycle(float dutyCycle)
{
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <PWM_Set_DutyCycle+0xa>
    119a:	00 d0       	rcall	.+0      	; 0x119c <PWM_Set_DutyCycle+0xc>
    119c:	0f 92       	push	r0
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	6a 83       	std	Y+2, r22	; 0x02
    11a4:	7b 83       	std	Y+3, r23	; 0x03
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	9d 83       	std	Y+5, r25	; 0x05

	ES_t RetValue;

	if((Global_Timer0_Cfg.mode == TIMER0_FAST_PWM_MODE) || (Global_Timer0_Cfg.mode == TIMER0_PHASE_CORRECT_MODE))
    11aa:	80 91 0d 03 	lds	r24, 0x030D
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	29 f0       	breq	.+10     	; 0x11bc <PWM_Set_DutyCycle+0x2c>
    11b2:	80 91 0d 03 	lds	r24, 0x030D
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	09 f0       	breq	.+2      	; 0x11bc <PWM_Set_DutyCycle+0x2c>
    11ba:	57 c0       	rjmp	.+174    	; 0x126a <PWM_Set_DutyCycle+0xda>
	{
		if(Global_Timer0_Cfg.oc0_mode == OC0_NON_INVERTING)
    11bc:	80 91 0f 03 	lds	r24, 0x030F
    11c0:	82 30       	cpi	r24, 0x02	; 2
    11c2:	11 f5       	brne	.+68     	; 0x1208 <PWM_Set_DutyCycle+0x78>
		{
			OCR0 = (u8)((dutyCycle/100.0)*256) - 1;
    11c4:	0c e5       	ldi	r16, 0x5C	; 92
    11c6:	10 e0       	ldi	r17, 0x00	; 0
    11c8:	6a 81       	ldd	r22, Y+2	; 0x02
    11ca:	7b 81       	ldd	r23, Y+3	; 0x03
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	48 ec       	ldi	r20, 0xC8	; 200
    11d6:	52 e4       	ldi	r21, 0x42	; 66
    11d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	53 e4       	ldi	r21, 0x43	; 67
    11ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	81 50       	subi	r24, 0x01	; 1
    1202:	f8 01       	movw	r30, r16
    1204:	80 83       	st	Z, r24
    1206:	2f c0       	rjmp	.+94     	; 0x1266 <PWM_Set_DutyCycle+0xd6>

		}else if(Global_Timer0_Cfg.oc0_mode == OC0_INVERTING)
    1208:	80 91 0f 03 	lds	r24, 0x030F
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	59 f5       	brne	.+86     	; 0x1266 <PWM_Set_DutyCycle+0xd6>
		{
			OCR0 = (u8)(256-((256*dutyCycle)/100.0)) - 1;
    1210:	0c e5       	ldi	r16, 0x5C	; 92
    1212:	10 e0       	ldi	r17, 0x00	; 0
    1214:	6a 81       	ldd	r22, Y+2	; 0x02
    1216:	7b 81       	ldd	r23, Y+3	; 0x03
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	53 e4       	ldi	r21, 0x43	; 67
    1224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	48 ec       	ldi	r20, 0xC8	; 200
    1236:	52 ec       	ldi	r21, 0xC2	; 194
    1238:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	53 e4       	ldi	r21, 0x43	; 67
    124c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	81 50       	subi	r24, 0x01	; 1
    1262:	f8 01       	movw	r30, r16
    1264:	80 83       	st	Z, r24
		}
		RetValue = ES_OK;
    1266:	19 82       	std	Y+1, r1	; 0x01
    1268:	02 c0       	rjmp	.+4      	; 0x126e <PWM_Set_DutyCycle+0xde>
	}else{
		RetValue = ES_NOT_OK;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
	}
	return RetValue;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	08 95       	ret

00001284 <Timer0_Set_Delay_ms>:




void Timer0_Set_Delay_ms(u32 delay_ms)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	67 97       	sbiw	r28, 0x17	; 23
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	6d 87       	std	Y+13, r22	; 0x0d
    129a:	7e 87       	std	Y+14, r23	; 0x0e
    129c:	8f 87       	std	Y+15, r24	; 0x0f
    129e:	98 8b       	std	Y+16, r25	; 0x10
	TIMER0_Config_t Timer0Cfg = {TIMER0_NORMAL_MODE, TIMER0_PRESCALAR_1024, OC0_DISCONNECTED, TOIE0_ENABLE, OCIE0_DISABLE};
    12a0:	9e 01       	movw	r18, r28
    12a2:	28 5f       	subi	r18, 0xF8	; 248
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	3c 8b       	std	Y+20, r19	; 0x14
    12a8:	2b 8b       	std	Y+19, r18	; 0x13
    12aa:	81 eb       	ldi	r24, 0xB1	; 177
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	9e 8b       	std	Y+22, r25	; 0x16
    12b0:	8d 8b       	std	Y+21, r24	; 0x15
    12b2:	95 e0       	ldi	r25, 0x05	; 5
    12b4:	9f 8b       	std	Y+23, r25	; 0x17
    12b6:	ed 89       	ldd	r30, Y+21	; 0x15
    12b8:	fe 89       	ldd	r31, Y+22	; 0x16
    12ba:	00 80       	ld	r0, Z
    12bc:	2d 89       	ldd	r18, Y+21	; 0x15
    12be:	3e 89       	ldd	r19, Y+22	; 0x16
    12c0:	2f 5f       	subi	r18, 0xFF	; 255
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	3e 8b       	std	Y+22, r19	; 0x16
    12c6:	2d 8b       	std	Y+21, r18	; 0x15
    12c8:	eb 89       	ldd	r30, Y+19	; 0x13
    12ca:	fc 89       	ldd	r31, Y+20	; 0x14
    12cc:	00 82       	st	Z, r0
    12ce:	2b 89       	ldd	r18, Y+19	; 0x13
    12d0:	3c 89       	ldd	r19, Y+20	; 0x14
    12d2:	2f 5f       	subi	r18, 0xFF	; 255
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	3c 8b       	std	Y+20, r19	; 0x14
    12d8:	2b 8b       	std	Y+19, r18	; 0x13
    12da:	3f 89       	ldd	r19, Y+23	; 0x17
    12dc:	31 50       	subi	r19, 0x01	; 1
    12de:	3f 8b       	std	Y+23, r19	; 0x17
    12e0:	8f 89       	ldd	r24, Y+23	; 0x17
    12e2:	88 23       	and	r24, r24
    12e4:	41 f7       	brne	.-48     	; 0x12b6 <Timer0_Set_Delay_ms+0x32>
	TIMER0_Init(&Timer0Cfg);
    12e6:	ce 01       	movw	r24, r28
    12e8:	08 96       	adiw	r24, 0x08	; 8
    12ea:	0e 94 75 07 	call	0xeea	; 0xeea <TIMER0_Init>

	u16 prescalar = 0;
    12ee:	1f 82       	std	Y+7, r1	; 0x07
    12f0:	1e 82       	std	Y+6, r1	; 0x06
	switch(Timer0Cfg.prescalar){
    12f2:	89 85       	ldd	r24, Y+9	; 0x09
    12f4:	e8 2f       	mov	r30, r24
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	fa 8b       	std	Y+18, r31	; 0x12
    12fa:	e9 8b       	std	Y+17, r30	; 0x11
    12fc:	29 89       	ldd	r18, Y+17	; 0x11
    12fe:	3a 89       	ldd	r19, Y+18	; 0x12
    1300:	23 30       	cpi	r18, 0x03	; 3
    1302:	31 05       	cpc	r19, r1
    1304:	49 f1       	breq	.+82     	; 0x1358 <Timer0_Set_Delay_ms+0xd4>
    1306:	89 89       	ldd	r24, Y+17	; 0x11
    1308:	9a 89       	ldd	r25, Y+18	; 0x12
    130a:	84 30       	cpi	r24, 0x04	; 4
    130c:	91 05       	cpc	r25, r1
    130e:	7c f4       	brge	.+30     	; 0x132e <Timer0_Set_Delay_ms+0xaa>
    1310:	e9 89       	ldd	r30, Y+17	; 0x11
    1312:	fa 89       	ldd	r31, Y+18	; 0x12
    1314:	e1 30       	cpi	r30, 0x01	; 1
    1316:	f1 05       	cpc	r31, r1
    1318:	49 f1       	breq	.+82     	; 0x136c <Timer0_Set_Delay_ms+0xe8>
    131a:	29 89       	ldd	r18, Y+17	; 0x11
    131c:	3a 89       	ldd	r19, Y+18	; 0x12
    131e:	22 30       	cpi	r18, 0x02	; 2
    1320:	31 05       	cpc	r19, r1
    1322:	fc f4       	brge	.+62     	; 0x1362 <Timer0_Set_Delay_ms+0xde>
    1324:	89 89       	ldd	r24, Y+17	; 0x11
    1326:	9a 89       	ldd	r25, Y+18	; 0x12
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	29 f1       	breq	.+74     	; 0x1376 <Timer0_Set_Delay_ms+0xf2>
    132c:	26 c0       	rjmp	.+76     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
    132e:	e9 89       	ldd	r30, Y+17	; 0x11
    1330:	fa 89       	ldd	r31, Y+18	; 0x12
    1332:	e5 30       	cpi	r30, 0x05	; 5
    1334:	f1 05       	cpc	r31, r1
    1336:	31 f0       	breq	.+12     	; 0x1344 <Timer0_Set_Delay_ms+0xc0>
    1338:	29 89       	ldd	r18, Y+17	; 0x11
    133a:	3a 89       	ldd	r19, Y+18	; 0x12
    133c:	25 30       	cpi	r18, 0x05	; 5
    133e:	31 05       	cpc	r19, r1
    1340:	34 f0       	brlt	.+12     	; 0x134e <Timer0_Set_Delay_ms+0xca>
    1342:	1b c0       	rjmp	.+54     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
	case TIMER0_PRESCALAR_1024:
		prescalar = 1024;
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	94 e0       	ldi	r25, 0x04	; 4
    1348:	9f 83       	std	Y+7, r25	; 0x07
    134a:	8e 83       	std	Y+6, r24	; 0x06
    134c:	16 c0       	rjmp	.+44     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_256:
		prescalar = 256;
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	9f 83       	std	Y+7, r25	; 0x07
    1354:	8e 83       	std	Y+6, r24	; 0x06
    1356:	11 c0       	rjmp	.+34     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_64:
		prescalar = 64;
    1358:	80 e4       	ldi	r24, 0x40	; 64
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9f 83       	std	Y+7, r25	; 0x07
    135e:	8e 83       	std	Y+6, r24	; 0x06
    1360:	0c c0       	rjmp	.+24     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_8:
		prescalar = 8;
    1362:	88 e0       	ldi	r24, 0x08	; 8
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9f 83       	std	Y+7, r25	; 0x07
    1368:	8e 83       	std	Y+6, r24	; 0x06
    136a:	07 c0       	rjmp	.+14     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_1:
		prescalar = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9f 83       	std	Y+7, r25	; 0x07
    1372:	8e 83       	std	Y+6, r24	; 0x06
    1374:	02 c0       	rjmp	.+4      	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case EXTERNAL_FALLING:
	case EXTERNAL_RISING:
		break;
	case TIMER0_STOP:
		prescalar = 0;
    1376:	1f 82       	std	Y+7, r1	; 0x07
    1378:	1e 82       	std	Y+6, r1	; 0x06
		break;
	}

	u32 CountsNum = (u32)((F_CPU / (prescalar * 1000UL)) * (delay_ms));
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	9f 81       	ldd	r25, Y+7	; 0x07
    137e:	cc 01       	movw	r24, r24
    1380:	a0 e0       	ldi	r26, 0x00	; 0
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	28 ee       	ldi	r18, 0xE8	; 232
    1386:	33 e0       	ldi	r19, 0x03	; 3
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 59 29 	call	0x52b2	; 0x52b2 <__mulsi3>
    1394:	9b 01       	movw	r18, r22
    1396:	ac 01       	movw	r20, r24
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	94 e2       	ldi	r25, 0x24	; 36
    139c:	a4 ef       	ldi	r26, 0xF4	; 244
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	0e 94 8c 29 	call	0x5318	; 0x5318 <__udivmodsi4>
    13a8:	da 01       	movw	r26, r20
    13aa:	c9 01       	movw	r24, r18
    13ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    13ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    13b0:	4f 85       	ldd	r20, Y+15	; 0x0f
    13b2:	58 89       	ldd	r21, Y+16	; 0x10
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 59 29 	call	0x52b2	; 0x52b2 <__mulsi3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	9b 83       	std	Y+3, r25	; 0x03
    13c4:	ac 83       	std	Y+4, r26	; 0x04
    13c6:	bd 83       	std	Y+5, r27	; 0x05
	OVF_Number = (u32)(CountsNum / 256);
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	9b 81       	ldd	r25, Y+3	; 0x03
    13cc:	ac 81       	ldd	r26, Y+4	; 0x04
    13ce:	bd 81       	ldd	r27, Y+5	; 0x05
    13d0:	89 2f       	mov	r24, r25
    13d2:	9a 2f       	mov	r25, r26
    13d4:	ab 2f       	mov	r26, r27
    13d6:	bb 27       	eor	r27, r27
    13d8:	80 93 d9 02 	sts	0x02D9, r24
    13dc:	90 93 da 02 	sts	0x02DA, r25
    13e0:	a0 93 db 02 	sts	0x02DB, r26
    13e4:	b0 93 dc 02 	sts	0x02DC, r27
	u8 RestCounts = CountsNum % 256;
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	89 83       	std	Y+1, r24	; 0x01



	TIMER0_SetCounterValue(0);
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	0e 94 a1 08 	call	0x1142	; 0x1142 <TIMER0_SetCounterValue>

	while(OVF_Number > 0);
    13f2:	80 91 d9 02 	lds	r24, 0x02D9
    13f6:	90 91 da 02 	lds	r25, 0x02DA
    13fa:	a0 91 db 02 	lds	r26, 0x02DB
    13fe:	b0 91 dc 02 	lds	r27, 0x02DC
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	a1 05       	cpc	r26, r1
    1406:	b1 05       	cpc	r27, r1
    1408:	a1 f7       	brne	.-24     	; 0x13f2 <Timer0_Set_Delay_ms+0x16e>

	while(TCNT0 < RestCounts);
    140a:	e2 e5       	ldi	r30, 0x52	; 82
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	90 81       	ld	r25, Z
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	98 17       	cp	r25, r24
    1414:	d0 f3       	brcs	.-12     	; 0x140a <Timer0_Set_Delay_ms+0x186>

	TIMER0_Stop();
    1416:	0e 94 4f 08 	call	0x109e	; 0x109e <TIMER0_Stop>

	// Disable Timer0 overflow interrupt
	TIMSK &= ~(1 << TOIE0);
    141a:	a9 e5       	ldi	r26, 0x59	; 89
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 e5       	ldi	r30, 0x59	; 89
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8e 7f       	andi	r24, 0xFE	; 254
    1426:	8c 93       	st	X, r24
}
    1428:	67 96       	adiw	r28, 0x17	; 23
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <Timer0_OVF_SetCallBack>:


void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <Timer0_OVF_SetCallBack+0x6>
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	9a 83       	std	Y+2, r25	; 0x02
    1446:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = Local_ptr_toFunc;
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	90 93 d5 02 	sts	0x02D5, r25
    1450:	80 93 d4 02 	sts	0x02D4, r24


}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <Timer0_OCM_SetCallBack>:
void Timer0_OCM_SetCallBack(void (*Local_ptr_toFunc))
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <Timer0_OCM_SetCallBack+0x6>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	9a 83       	std	Y+2, r25	; 0x02
    146a:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OCM_Fptr = Local_ptr_toFunc;
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	9a 81       	ldd	r25, Y+2	; 0x02
    1470:	90 93 d7 02 	sts	0x02D7, r25
    1474:	80 93 d6 02 	sts	0x02D6, r24
}
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <TIMER1_Init>:

// ===========================================================


ES_t TIMER1_Init(TIMER1_Config_t *TIME1_Cfg)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	2a 97       	sbiw	r28, 0x0a	; 10
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	9b 83       	std	Y+3, r25	; 0x03
    1498:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
	if(TIME1_Cfg == NULLPTR){
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	9b 81       	ldd	r25, Y+3	; 0x03
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	19 f4       	brne	.+6      	; 0x14ac <TIMER1_Init+0x2a>
		RetValue = ES_NOT_OK;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	ea c0       	rjmp	.+468    	; 0x1680 <TIMER1_Init+0x1fe>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer1_Cfg = *TIME1_Cfg;
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	22 e1       	ldi	r18, 0x12	; 18
    14b2:	33 e0       	ldi	r19, 0x03	; 3
    14b4:	3f 83       	std	Y+7, r19	; 0x07
    14b6:	2e 83       	std	Y+6, r18	; 0x06
    14b8:	99 87       	std	Y+9, r25	; 0x09
    14ba:	88 87       	std	Y+8, r24	; 0x08
    14bc:	38 e0       	ldi	r19, 0x08	; 8
    14be:	3a 87       	std	Y+10, r19	; 0x0a
    14c0:	e8 85       	ldd	r30, Y+8	; 0x08
    14c2:	f9 85       	ldd	r31, Y+9	; 0x09
    14c4:	00 80       	ld	r0, Z
    14c6:	28 85       	ldd	r18, Y+8	; 0x08
    14c8:	39 85       	ldd	r19, Y+9	; 0x09
    14ca:	2f 5f       	subi	r18, 0xFF	; 255
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	39 87       	std	Y+9, r19	; 0x09
    14d0:	28 87       	std	Y+8, r18	; 0x08
    14d2:	ee 81       	ldd	r30, Y+6	; 0x06
    14d4:	ff 81       	ldd	r31, Y+7	; 0x07
    14d6:	00 82       	st	Z, r0
    14d8:	2e 81       	ldd	r18, Y+6	; 0x06
    14da:	3f 81       	ldd	r19, Y+7	; 0x07
    14dc:	2f 5f       	subi	r18, 0xFF	; 255
    14de:	3f 4f       	sbci	r19, 0xFF	; 255
    14e0:	3f 83       	std	Y+7, r19	; 0x07
    14e2:	2e 83       	std	Y+6, r18	; 0x06
    14e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    14e6:	31 50       	subi	r19, 0x01	; 1
    14e8:	3a 87       	std	Y+10, r19	; 0x0a
    14ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ec:	88 23       	and	r24, r24
    14ee:	41 f7       	brne	.-48     	; 0x14c0 <TIMER1_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME1_Cfg->mode >= TIMER1_NORMAL_MODE) && (TIME1_Cfg->mode <= TIMER1_FAST_PWM_OCR1A_TOP))
    14f0:	ea 81       	ldd	r30, Y+2	; 0x02
    14f2:	fb 81       	ldd	r31, Y+3	; 0x03
    14f4:	80 81       	ld	r24, Z
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <TIMER1_Init+0x7a>
    14fa:	6f c0       	rjmp	.+222    	; 0x15da <TIMER1_Init+0x158>
		{
			RetValue = ES_OK;
    14fc:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME1_Cfg->mode)
    14fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1500:	fb 81       	ldd	r31, Y+3	; 0x03
    1502:	80 81       	ld	r24, Z
    1504:	e8 2f       	mov	r30, r24
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	fd 83       	std	Y+5, r31	; 0x05
    150a:	ec 83       	std	Y+4, r30	; 0x04
    150c:	2c 81       	ldd	r18, Y+4	; 0x04
    150e:	3d 81       	ldd	r19, Y+5	; 0x05
    1510:	21 30       	cpi	r18, 0x01	; 1
    1512:	31 05       	cpc	r19, r1
    1514:	41 f1       	breq	.+80     	; 0x1566 <TIMER1_Init+0xe4>
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	82 30       	cpi	r24, 0x02	; 2
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <TIMER1_Init+0xa0>
    1520:	3f c0       	rjmp	.+126    	; 0x15a0 <TIMER1_Init+0x11e>
    1522:	ec 81       	ldd	r30, Y+4	; 0x04
    1524:	fd 81       	ldd	r31, Y+5	; 0x05
    1526:	30 97       	sbiw	r30, 0x00	; 0
    1528:	09 f0       	breq	.+2      	; 0x152c <TIMER1_Init+0xaa>
    152a:	59 c0       	rjmp	.+178    	; 0x15de <TIMER1_Init+0x15c>
			{
			case TIMER1_NORMAL_MODE:
				CLR_BIT(TCCR1A,WGM10);
    152c:	af e4       	ldi	r26, 0x4F	; 79
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	ef e4       	ldi	r30, 0x4F	; 79
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8e 7f       	andi	r24, 0xFE	; 254
    1538:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A,WGM11);
    153a:	af e4       	ldi	r26, 0x4F	; 79
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	ef e4       	ldi	r30, 0x4F	; 79
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8d 7f       	andi	r24, 0xFD	; 253
    1546:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM12);
    1548:	ae e4       	ldi	r26, 0x4E	; 78
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	ee e4       	ldi	r30, 0x4E	; 78
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	87 7f       	andi	r24, 0xF7	; 247
    1554:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM13);
    1556:	ae e4       	ldi	r26, 0x4E	; 78
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ee e4       	ldi	r30, 0x4E	; 78
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8f 7e       	andi	r24, 0xEF	; 239
    1562:	8c 93       	st	X, r24
    1564:	3c c0       	rjmp	.+120    	; 0x15de <TIMER1_Init+0x15c>
				break;
			case TIMER1_FAST_PWM_ICR1_TOP:
				CLR_BIT(TCCR1A,WGM10);
    1566:	af e4       	ldi	r26, 0x4F	; 79
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	ef e4       	ldi	r30, 0x4F	; 79
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	8e 7f       	andi	r24, 0xFE	; 254
    1572:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    1574:	af e4       	ldi	r26, 0x4F	; 79
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	ef e4       	ldi	r30, 0x4F	; 79
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	82 60       	ori	r24, 0x02	; 2
    1580:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    1582:	ae e4       	ldi	r26, 0x4E	; 78
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ee e4       	ldi	r30, 0x4E	; 78
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	88 60       	ori	r24, 0x08	; 8
    158e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    1590:	ae e4       	ldi	r26, 0x4E	; 78
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	ee e4       	ldi	r30, 0x4E	; 78
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	80 61       	ori	r24, 0x10	; 16
    159c:	8c 93       	st	X, r24
    159e:	1f c0       	rjmp	.+62     	; 0x15de <TIMER1_Init+0x15c>
				break;
			case TIMER1_FAST_PWM_OCR1A_TOP:
				SET_BIT(TCCR1A,WGM10);
    15a0:	af e4       	ldi	r26, 0x4F	; 79
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	ef e4       	ldi	r30, 0x4F	; 79
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	81 60       	ori	r24, 0x01	; 1
    15ac:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    15ae:	af e4       	ldi	r26, 0x4F	; 79
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ef e4       	ldi	r30, 0x4F	; 79
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	82 60       	ori	r24, 0x02	; 2
    15ba:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    15bc:	ae e4       	ldi	r26, 0x4E	; 78
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ee e4       	ldi	r30, 0x4E	; 78
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 60       	ori	r24, 0x08	; 8
    15c8:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    15ca:	ae e4       	ldi	r26, 0x4E	; 78
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ee e4       	ldi	r30, 0x4E	; 78
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 61       	ori	r24, 0x10	; 16
    15d6:	8c 93       	st	X, r24
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <TIMER1_Init+0x15c>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME1_Cfg->prescalar >= TIMER1_STOP) && (TIME1_Cfg->prescalar <= EXTERNAL1_RISING))
    15de:	ea 81       	ldd	r30, Y+2	; 0x02
    15e0:	fb 81       	ldd	r31, Y+3	; 0x03
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	88 30       	cpi	r24, 0x08	; 8
    15e6:	58 f4       	brcc	.+22     	; 0x15fe <TIMER1_Init+0x17c>
		{
			TCCR1B |= TIME1_Cfg->prescalar;
    15e8:	ae e4       	ldi	r26, 0x4E	; 78
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	ee e4       	ldi	r30, 0x4E	; 78
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	90 81       	ld	r25, Z
    15f2:	ea 81       	ldd	r30, Y+2	; 0x02
    15f4:	fb 81       	ldd	r31, Y+3	; 0x03
    15f6:	81 81       	ldd	r24, Z+1	; 0x01
    15f8:	89 2b       	or	r24, r25
    15fa:	8c 93       	st	X, r24
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <TIMER1_Init+0x180>
		}else{
			RetValue = ES_NOT_OK;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1A_mode << COM1A0);
    1602:	af e4       	ldi	r26, 0x4F	; 79
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ef e4       	ldi	r30, 0x4F	; 79
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	28 2f       	mov	r18, r24
    160e:	ea 81       	ldd	r30, Y+2	; 0x02
    1610:	fb 81       	ldd	r31, Y+3	; 0x03
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	00 24       	eor	r0, r0
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	07 94       	ror	r0
    1620:	96 95       	lsr	r25
    1622:	87 95       	ror	r24
    1624:	07 94       	ror	r0
    1626:	98 2f       	mov	r25, r24
    1628:	80 2d       	mov	r24, r0
    162a:	82 2b       	or	r24, r18
    162c:	8c 93       	st	X, r24

		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1B_mode << COM1B0);
    162e:	af e4       	ldi	r26, 0x4F	; 79
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ef e4       	ldi	r30, 0x4F	; 79
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	28 2f       	mov	r18, r24
    163a:	ea 81       	ldd	r30, Y+2	; 0x02
    163c:	fb 81       	ldd	r31, Y+3	; 0x03
    163e:	83 81       	ldd	r24, Z+3	; 0x03
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	82 95       	swap	r24
    1646:	92 95       	swap	r25
    1648:	90 7f       	andi	r25, 0xF0	; 240
    164a:	98 27       	eor	r25, r24
    164c:	80 7f       	andi	r24, 0xF0	; 240
    164e:	98 27       	eor	r25, r24
    1650:	82 2b       	or	r24, r18
    1652:	8c 93       	st	X, r24


		// Timer_1 Interrupts
		TIMSK |= (TIME1_Cfg->OVF_Interrupt) | (TIME1_Cfg->ICU_Interrupt) | (TIME1_Cfg->OCA_Interrupt) | (TIME1_Cfg->OCB_Interrupt);
    1654:	a9 e5       	ldi	r26, 0x59	; 89
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e9 e5       	ldi	r30, 0x59	; 89
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	20 81       	ld	r18, Z
    165e:	ea 81       	ldd	r30, Y+2	; 0x02
    1660:	fb 81       	ldd	r31, Y+3	; 0x03
    1662:	94 81       	ldd	r25, Z+4	; 0x04
    1664:	ea 81       	ldd	r30, Y+2	; 0x02
    1666:	fb 81       	ldd	r31, Y+3	; 0x03
    1668:	85 81       	ldd	r24, Z+5	; 0x05
    166a:	98 2b       	or	r25, r24
    166c:	ea 81       	ldd	r30, Y+2	; 0x02
    166e:	fb 81       	ldd	r31, Y+3	; 0x03
    1670:	86 81       	ldd	r24, Z+6	; 0x06
    1672:	98 2b       	or	r25, r24
    1674:	ea 81       	ldd	r30, Y+2	; 0x02
    1676:	fb 81       	ldd	r31, Y+3	; 0x03
    1678:	87 81       	ldd	r24, Z+7	; 0x07
    167a:	89 2b       	or	r24, r25
    167c:	82 2b       	or	r24, r18
    167e:	8c 93       	st	X, r24



	}

	return RetValue;
    1680:	89 81       	ldd	r24, Y+1	; 0x01
}
    1682:	2a 96       	adiw	r28, 0x0a	; 10
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <TIMER1_Stop>:


ES_t TIMER1_Stop(void)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR1B,CS10);
    169c:	ae e4       	ldi	r26, 0x4E	; 78
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	ee e4       	ldi	r30, 0x4E	; 78
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8e 7f       	andi	r24, 0xFE	; 254
    16a8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    16aa:	ae e4       	ldi	r26, 0x4E	; 78
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	ee e4       	ldi	r30, 0x4E	; 78
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8d 7f       	andi	r24, 0xFD	; 253
    16b6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    16b8:	ae e4       	ldi	r26, 0x4E	; 78
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	ee e4       	ldi	r30, 0x4E	; 78
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8b 7f       	andi	r24, 0xFB	; 251
    16c4:	8c 93       	st	X, r24
	return ES_OK;
    16c6:	80 e0       	ldi	r24, 0x00	; 0
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    16ce:	1f 92       	push	r1
    16d0:	0f 92       	push	r0
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	0f 92       	push	r0
    16d6:	11 24       	eor	r1, r1
    16d8:	8f 93       	push	r24
    16da:	9f 93       	push	r25
    16dc:	af 93       	push	r26
    16de:	bf 93       	push	r27
    16e0:	ef 93       	push	r30
    16e2:	ff 93       	push	r31
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
	if(OVF_Number > 0){
    16ec:	80 91 d9 02 	lds	r24, 0x02D9
    16f0:	90 91 da 02 	lds	r25, 0x02DA
    16f4:	a0 91 db 02 	lds	r26, 0x02DB
    16f8:	b0 91 dc 02 	lds	r27, 0x02DC
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	a1 05       	cpc	r26, r1
    1700:	b1 05       	cpc	r27, r1
    1702:	a1 f0       	breq	.+40     	; 0x172c <__vector_11+0x5e>
//		Lcd_ES_tdisplayNum(OVF_Number);
//		Lcd_ES_tsendString("  ");
		OVF_Number--;
    1704:	80 91 d9 02 	lds	r24, 0x02D9
    1708:	90 91 da 02 	lds	r25, 0x02DA
    170c:	a0 91 db 02 	lds	r26, 0x02DB
    1710:	b0 91 dc 02 	lds	r27, 0x02DC
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	a1 09       	sbc	r26, r1
    1718:	b1 09       	sbc	r27, r1
    171a:	80 93 d9 02 	sts	0x02D9, r24
    171e:	90 93 da 02 	sts	0x02DA, r25
    1722:	a0 93 db 02 	sts	0x02DB, r26
    1726:	b0 93 dc 02 	sts	0x02DC, r27
    172a:	07 c0       	rjmp	.+14     	; 0x173a <__vector_11+0x6c>
	}else {
		// If all overflows are done, disable the interrupt
		TIMSK &= ~(1 << TOIE0);
    172c:	a9 e5       	ldi	r26, 0x59	; 89
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e9 e5       	ldi	r30, 0x59	; 89
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8e 7f       	andi	r24, 0xFE	; 254
    1738:	8c 93       	st	X, r24
	}

}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	ff 91       	pop	r31
    1740:	ef 91       	pop	r30
    1742:	bf 91       	pop	r27
    1744:	af 91       	pop	r26
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	0f 90       	pop	r0
    1750:	1f 90       	pop	r1
    1752:	18 95       	reti

00001754 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    1754:	1f 92       	push	r1
    1756:	0f 92       	push	r0
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	0f 92       	push	r0
    175c:	11 24       	eor	r1, r1
    175e:	2f 93       	push	r18
    1760:	3f 93       	push	r19
    1762:	4f 93       	push	r20
    1764:	5f 93       	push	r21
    1766:	6f 93       	push	r22
    1768:	7f 93       	push	r23
    176a:	8f 93       	push	r24
    176c:	9f 93       	push	r25
    176e:	af 93       	push	r26
    1770:	bf 93       	push	r27
    1772:	ef 93       	push	r30
    1774:	ff 93       	push	r31
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OCM_Fptr != NULLPTR)
    177e:	80 91 d6 02 	lds	r24, 0x02D6
    1782:	90 91 d7 02 	lds	r25, 0x02D7
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	29 f0       	breq	.+10     	; 0x1794 <__vector_10+0x40>
	{
		Timer0_OCM_Fptr();
    178a:	e0 91 d6 02 	lds	r30, 0x02D6
    178e:	f0 91 d7 02 	lds	r31, 0x02D7
    1792:	09 95       	icall
	}
}
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <EXI_Set_CallBack+0x6>
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <EXI_Set_CallBack+0x8>
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	7b 83       	std	Y+3, r23	; 0x03
    17cc:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	3d 83       	std	Y+5, r19	; 0x05
    17d6:	2c 83       	std	Y+4, r18	; 0x04
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	91 05       	cpc	r25, r1
    17e0:	81 f0       	breq	.+32     	; 0x1802 <EXI_Set_CallBack+0x48>
    17e2:	2c 81       	ldd	r18, Y+4	; 0x04
    17e4:	3d 81       	ldd	r19, Y+5	; 0x05
    17e6:	22 30       	cpi	r18, 0x02	; 2
    17e8:	31 05       	cpc	r19, r1
    17ea:	91 f0       	breq	.+36     	; 0x1810 <EXI_Set_CallBack+0x56>
    17ec:	8c 81       	ldd	r24, Y+4	; 0x04
    17ee:	9d 81       	ldd	r25, Y+5	; 0x05
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	a1 f4       	brne	.+40     	; 0x181c <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	90 93 df 02 	sts	0x02DF, r25
    17fc:	80 93 de 02 	sts	0x02DE, r24
    1800:	0d c0       	rjmp	.+26     	; 0x181c <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	9b 81       	ldd	r25, Y+3	; 0x03
    1806:	90 93 e1 02 	sts	0x02E1, r25
    180a:	80 93 e0 02 	sts	0x02E0, r24
    180e:	06 c0       	rjmp	.+12     	; 0x181c <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	9b 81       	ldd	r25, Y+3	; 0x03
    1814:	90 93 e3 02 	sts	0x02E3, r25
    1818:	80 93 e2 02 	sts	0x02E2, r24
		break;
	}
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <EXI_ENABLE+0x6>
    1832:	0f 92       	push	r0
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	3b 83       	std	Y+3, r19	; 0x03
    1842:	2a 83       	std	Y+2, r18	; 0x02
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	9b 81       	ldd	r25, Y+3	; 0x03
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	89 f0       	breq	.+34     	; 0x1870 <EXI_ENABLE+0x44>
    184e:	2a 81       	ldd	r18, Y+2	; 0x02
    1850:	3b 81       	ldd	r19, Y+3	; 0x03
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	a1 f0       	breq	.+40     	; 0x1880 <EXI_ENABLE+0x54>
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	9b 81       	ldd	r25, Y+3	; 0x03
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	b9 f4       	brne	.+46     	; 0x188e <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
    1860:	ab e5       	ldi	r26, 0x5B	; 91
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	eb e5       	ldi	r30, 0x5B	; 91
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	80 64       	ori	r24, 0x40	; 64
    186c:	8c 93       	st	X, r24
    186e:	0f c0       	rjmp	.+30     	; 0x188e <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
    1870:	ab e5       	ldi	r26, 0x5B	; 91
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	eb e5       	ldi	r30, 0x5B	; 91
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 68       	ori	r24, 0x80	; 128
    187c:	8c 93       	st	X, r24
    187e:	07 c0       	rjmp	.+14     	; 0x188e <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
    1880:	ab e5       	ldi	r26, 0x5B	; 91
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	eb e5       	ldi	r30, 0x5B	; 91
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	80 62       	ori	r24, 0x20	; 32
    188c:	8c 93       	st	X, r24
		break;
	}
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <EXI_DISABLE+0x6>
    18a0:	0f 92       	push	r0
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	3b 83       	std	Y+3, r19	; 0x03
    18b0:	2a 83       	std	Y+2, r18	; 0x02
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	9b 81       	ldd	r25, Y+3	; 0x03
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	91 05       	cpc	r25, r1
    18ba:	89 f0       	breq	.+34     	; 0x18de <EXI_DISABLE+0x44>
    18bc:	2a 81       	ldd	r18, Y+2	; 0x02
    18be:	3b 81       	ldd	r19, Y+3	; 0x03
    18c0:	22 30       	cpi	r18, 0x02	; 2
    18c2:	31 05       	cpc	r19, r1
    18c4:	a1 f0       	breq	.+40     	; 0x18ee <EXI_DISABLE+0x54>
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	b9 f4       	brne	.+46     	; 0x18fc <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
    18ce:	ab e5       	ldi	r26, 0x5B	; 91
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	eb e5       	ldi	r30, 0x5B	; 91
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	8f 7b       	andi	r24, 0xBF	; 191
    18da:	8c 93       	st	X, r24
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
    18de:	ab e5       	ldi	r26, 0x5B	; 91
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	eb e5       	ldi	r30, 0x5B	; 91
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 77       	andi	r24, 0x7F	; 127
    18ea:	8c 93       	st	X, r24
    18ec:	07 c0       	rjmp	.+14     	; 0x18fc <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
    18ee:	ab e5       	ldi	r26, 0x5B	; 91
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	eb e5       	ldi	r30, 0x5B	; 91
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	8f 7d       	andi	r24, 0xDF	; 223
    18fa:	8c 93       	st	X, r24
		break;
	}
}
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	2a 97       	sbiw	r28, 0x0a	; 10
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	3a 87       	std	Y+10, r19	; 0x0a
    1928:	29 87       	std	Y+9, r18	; 0x09
    192a:	89 85       	ldd	r24, Y+9	; 0x09
    192c:	9a 85       	ldd	r25, Y+10	; 0x0a
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	91 05       	cpc	r25, r1
    1932:	09 f4       	brne	.+2      	; 0x1936 <EXI_TriggerEdge+0x2e>
    1934:	66 c0       	rjmp	.+204    	; 0x1a02 <EXI_TriggerEdge+0xfa>
    1936:	29 85       	ldd	r18, Y+9	; 0x09
    1938:	3a 85       	ldd	r19, Y+10	; 0x0a
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	31 05       	cpc	r19, r1
    193e:	09 f4       	brne	.+2      	; 0x1942 <EXI_TriggerEdge+0x3a>
    1940:	bb c0       	rjmp	.+374    	; 0x1ab8 <EXI_TriggerEdge+0x1b0>
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	09 f0       	breq	.+2      	; 0x194c <EXI_TriggerEdge+0x44>
    194a:	dd c0       	rjmp	.+442    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	38 87       	std	Y+8, r19	; 0x08
    1954:	2f 83       	std	Y+7, r18	; 0x07
    1956:	8f 81       	ldd	r24, Y+7	; 0x07
    1958:	98 85       	ldd	r25, Y+8	; 0x08
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	91 05       	cpc	r25, r1
    195e:	21 f1       	breq	.+72     	; 0x19a8 <EXI_TriggerEdge+0xa0>
    1960:	2f 81       	ldd	r18, Y+7	; 0x07
    1962:	38 85       	ldd	r19, Y+8	; 0x08
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	2c f4       	brge	.+10     	; 0x1974 <EXI_TriggerEdge+0x6c>
    196a:	8f 81       	ldd	r24, Y+7	; 0x07
    196c:	98 85       	ldd	r25, Y+8	; 0x08
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	61 f0       	breq	.+24     	; 0x198a <EXI_TriggerEdge+0x82>
    1972:	c9 c0       	rjmp	.+402    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
    1974:	2f 81       	ldd	r18, Y+7	; 0x07
    1976:	38 85       	ldd	r19, Y+8	; 0x08
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	21 f1       	breq	.+72     	; 0x19c6 <EXI_TriggerEdge+0xbe>
    197e:	8f 81       	ldd	r24, Y+7	; 0x07
    1980:	98 85       	ldd	r25, Y+8	; 0x08
    1982:	83 30       	cpi	r24, 0x03	; 3
    1984:	91 05       	cpc	r25, r1
    1986:	71 f1       	breq	.+92     	; 0x19e4 <EXI_TriggerEdge+0xdc>
    1988:	be c0       	rjmp	.+380    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    198a:	a5 e5       	ldi	r26, 0x55	; 85
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e5 e5       	ldi	r30, 0x55	; 85
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8e 7f       	andi	r24, 0xFE	; 254
    1996:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    1998:	a5 e5       	ldi	r26, 0x55	; 85
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e5 e5       	ldi	r30, 0x55	; 85
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	8d 7f       	andi	r24, 0xFD	; 253
    19a4:	8c 93       	st	X, r24
    19a6:	af c0       	rjmp	.+350    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    19a8:	a5 e5       	ldi	r26, 0x55	; 85
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e5 e5       	ldi	r30, 0x55	; 85
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	81 60       	ori	r24, 0x01	; 1
    19b4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    19b6:	a5 e5       	ldi	r26, 0x55	; 85
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e5 e5       	ldi	r30, 0x55	; 85
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8d 7f       	andi	r24, 0xFD	; 253
    19c2:	8c 93       	st	X, r24
    19c4:	a0 c0       	rjmp	.+320    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    19c6:	a5 e5       	ldi	r26, 0x55	; 85
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e5       	ldi	r30, 0x55	; 85
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8e 7f       	andi	r24, 0xFE	; 254
    19d2:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    19d4:	a5 e5       	ldi	r26, 0x55	; 85
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e5 e5       	ldi	r30, 0x55	; 85
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	82 60       	ori	r24, 0x02	; 2
    19e0:	8c 93       	st	X, r24
    19e2:	91 c0       	rjmp	.+290    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    19e4:	a5 e5       	ldi	r26, 0x55	; 85
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e5       	ldi	r30, 0x55	; 85
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	81 60       	ori	r24, 0x01	; 1
    19f0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    19f2:	a5 e5       	ldi	r26, 0x55	; 85
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e5 e5       	ldi	r30, 0x55	; 85
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	82 60       	ori	r24, 0x02	; 2
    19fe:	8c 93       	st	X, r24
    1a00:	82 c0       	rjmp	.+260    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	3e 83       	std	Y+6, r19	; 0x06
    1a0a:	2d 83       	std	Y+5, r18	; 0x05
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	91 05       	cpc	r25, r1
    1a14:	21 f1       	breq	.+72     	; 0x1a5e <EXI_TriggerEdge+0x156>
    1a16:	2d 81       	ldd	r18, Y+5	; 0x05
    1a18:	3e 81       	ldd	r19, Y+6	; 0x06
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <EXI_TriggerEdge+0x122>
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	61 f0       	breq	.+24     	; 0x1a40 <EXI_TriggerEdge+0x138>
    1a28:	6e c0       	rjmp	.+220    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
    1a2a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a2c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a2e:	22 30       	cpi	r18, 0x02	; 2
    1a30:	31 05       	cpc	r19, r1
    1a32:	21 f1       	breq	.+72     	; 0x1a7c <EXI_TriggerEdge+0x174>
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	71 f1       	breq	.+92     	; 0x1a9a <EXI_TriggerEdge+0x192>
    1a3e:	63 c0       	rjmp	.+198    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    1a40:	a5 e5       	ldi	r26, 0x55	; 85
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e5 e5       	ldi	r30, 0x55	; 85
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	8b 7f       	andi	r24, 0xFB	; 251
    1a4c:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1a4e:	a5 e5       	ldi	r26, 0x55	; 85
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e5 e5       	ldi	r30, 0x55	; 85
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	87 7f       	andi	r24, 0xF7	; 247
    1a5a:	8c 93       	st	X, r24
    1a5c:	54 c0       	rjmp	.+168    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    1a5e:	a5 e5       	ldi	r26, 0x55	; 85
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e5 e5       	ldi	r30, 0x55	; 85
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	84 60       	ori	r24, 0x04	; 4
    1a6a:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1a6c:	a5 e5       	ldi	r26, 0x55	; 85
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e5 e5       	ldi	r30, 0x55	; 85
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	87 7f       	andi	r24, 0xF7	; 247
    1a78:	8c 93       	st	X, r24
    1a7a:	45 c0       	rjmp	.+138    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    1a7c:	a5 e5       	ldi	r26, 0x55	; 85
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e5 e5       	ldi	r30, 0x55	; 85
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8b 7f       	andi	r24, 0xFB	; 251
    1a88:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1a8a:	a5 e5       	ldi	r26, 0x55	; 85
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e5       	ldi	r30, 0x55	; 85
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	88 60       	ori	r24, 0x08	; 8
    1a96:	8c 93       	st	X, r24
    1a98:	36 c0       	rjmp	.+108    	; 0x1b06 <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    1a9a:	a5 e5       	ldi	r26, 0x55	; 85
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e5 e5       	ldi	r30, 0x55	; 85
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	84 60       	ori	r24, 0x04	; 4
    1aa6:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1aa8:	a5 e5       	ldi	r26, 0x55	; 85
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e5 e5       	ldi	r30, 0x55	; 85
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	88 60       	ori	r24, 0x08	; 8
    1ab4:	8c 93       	st	X, r24
    1ab6:	27 c0       	rjmp	.+78     	; 0x1b06 <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	3c 83       	std	Y+4, r19	; 0x04
    1ac0:	2b 83       	std	Y+3, r18	; 0x03
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	82 30       	cpi	r24, 0x02	; 2
    1ac8:	91 05       	cpc	r25, r1
    1aca:	31 f0       	breq	.+12     	; 0x1ad8 <EXI_TriggerEdge+0x1d0>
    1acc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ace:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad0:	23 30       	cpi	r18, 0x03	; 3
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	49 f0       	breq	.+18     	; 0x1ae8 <EXI_TriggerEdge+0x1e0>
    1ad6:	10 c0       	rjmp	.+32     	; 0x1af8 <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    1ad8:	a4 e5       	ldi	r26, 0x54	; 84
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e4 e5       	ldi	r30, 0x54	; 84
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	8f 7b       	andi	r24, 0xBF	; 191
    1ae4:	8c 93       	st	X, r24
    1ae6:	0f c0       	rjmp	.+30     	; 0x1b06 <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    1ae8:	a4 e5       	ldi	r26, 0x54	; 84
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e4 e5       	ldi	r30, 0x54	; 84
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 64       	ori	r24, 0x40	; 64
    1af4:	8c 93       	st	X, r24
    1af6:	07 c0       	rjmp	.+14     	; 0x1b06 <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    1af8:	a4 e5       	ldi	r26, 0x54	; 84
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e4 e5       	ldi	r30, 0x54	; 84
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	8f 7b       	andi	r24, 0xBF	; 191
    1b04:	8c 93       	st	X, r24
				}
				break;
	}
}
    1b06:	2a 96       	adiw	r28, 0x0a	; 10
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    1b18:	1f 92       	push	r1
    1b1a:	0f 92       	push	r0
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	0f 92       	push	r0
    1b20:	11 24       	eor	r1, r1
    1b22:	2f 93       	push	r18
    1b24:	3f 93       	push	r19
    1b26:	4f 93       	push	r20
    1b28:	5f 93       	push	r21
    1b2a:	6f 93       	push	r22
    1b2c:	7f 93       	push	r23
    1b2e:	8f 93       	push	r24
    1b30:	9f 93       	push	r25
    1b32:	af 93       	push	r26
    1b34:	bf 93       	push	r27
    1b36:	ef 93       	push	r30
    1b38:	ff 93       	push	r31
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    1b42:	80 91 de 02 	lds	r24, 0x02DE
    1b46:	90 91 df 02 	lds	r25, 0x02DF
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	29 f0       	breq	.+10     	; 0x1b58 <__vector_1+0x40>
		INT0_Fptr();
    1b4e:	e0 91 de 02 	lds	r30, 0x02DE
    1b52:	f0 91 df 02 	lds	r31, 0x02DF
    1b56:	09 95       	icall
	}
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	ff 91       	pop	r31
    1b5e:	ef 91       	pop	r30
    1b60:	bf 91       	pop	r27
    1b62:	af 91       	pop	r26
    1b64:	9f 91       	pop	r25
    1b66:	8f 91       	pop	r24
    1b68:	7f 91       	pop	r23
    1b6a:	6f 91       	pop	r22
    1b6c:	5f 91       	pop	r21
    1b6e:	4f 91       	pop	r20
    1b70:	3f 91       	pop	r19
    1b72:	2f 91       	pop	r18
    1b74:	0f 90       	pop	r0
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	0f 90       	pop	r0
    1b7a:	1f 90       	pop	r1
    1b7c:	18 95       	reti

00001b7e <__vector_2>:

ISR(INT1_vect){
    1b7e:	1f 92       	push	r1
    1b80:	0f 92       	push	r0
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	0f 92       	push	r0
    1b86:	11 24       	eor	r1, r1
    1b88:	2f 93       	push	r18
    1b8a:	3f 93       	push	r19
    1b8c:	4f 93       	push	r20
    1b8e:	5f 93       	push	r21
    1b90:	6f 93       	push	r22
    1b92:	7f 93       	push	r23
    1b94:	8f 93       	push	r24
    1b96:	9f 93       	push	r25
    1b98:	af 93       	push	r26
    1b9a:	bf 93       	push	r27
    1b9c:	ef 93       	push	r30
    1b9e:	ff 93       	push	r31
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    1ba8:	80 91 e0 02 	lds	r24, 0x02E0
    1bac:	90 91 e1 02 	lds	r25, 0x02E1
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	29 f0       	breq	.+10     	; 0x1bbe <__vector_2+0x40>
		INT1_Fptr();
    1bb4:	e0 91 e0 02 	lds	r30, 0x02E0
    1bb8:	f0 91 e1 02 	lds	r31, 0x02E1
    1bbc:	09 95       	icall
	}
}
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	ff 91       	pop	r31
    1bc4:	ef 91       	pop	r30
    1bc6:	bf 91       	pop	r27
    1bc8:	af 91       	pop	r26
    1bca:	9f 91       	pop	r25
    1bcc:	8f 91       	pop	r24
    1bce:	7f 91       	pop	r23
    1bd0:	6f 91       	pop	r22
    1bd2:	5f 91       	pop	r21
    1bd4:	4f 91       	pop	r20
    1bd6:	3f 91       	pop	r19
    1bd8:	2f 91       	pop	r18
    1bda:	0f 90       	pop	r0
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	0f 90       	pop	r0
    1be0:	1f 90       	pop	r1
    1be2:	18 95       	reti

00001be4 <__vector_3>:

ISR(INT2_vect){
    1be4:	1f 92       	push	r1
    1be6:	0f 92       	push	r0
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	0f 92       	push	r0
    1bec:	11 24       	eor	r1, r1
    1bee:	2f 93       	push	r18
    1bf0:	3f 93       	push	r19
    1bf2:	4f 93       	push	r20
    1bf4:	5f 93       	push	r21
    1bf6:	6f 93       	push	r22
    1bf8:	7f 93       	push	r23
    1bfa:	8f 93       	push	r24
    1bfc:	9f 93       	push	r25
    1bfe:	af 93       	push	r26
    1c00:	bf 93       	push	r27
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    1c0e:	80 91 e2 02 	lds	r24, 0x02E2
    1c12:	90 91 e3 02 	lds	r25, 0x02E3
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	29 f0       	breq	.+10     	; 0x1c24 <__vector_3+0x40>
		INT2_Fptr();
    1c1a:	e0 91 e2 02 	lds	r30, 0x02E2
    1c1e:	f0 91 e3 02 	lds	r31, 0x02E3
    1c22:	09 95       	icall
	}
}
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	ff 91       	pop	r31
    1c2a:	ef 91       	pop	r30
    1c2c:	bf 91       	pop	r27
    1c2e:	af 91       	pop	r26
    1c30:	9f 91       	pop	r25
    1c32:	8f 91       	pop	r24
    1c34:	7f 91       	pop	r23
    1c36:	6f 91       	pop	r22
    1c38:	5f 91       	pop	r21
    1c3a:	4f 91       	pop	r20
    1c3c:	3f 91       	pop	r19
    1c3e:	2f 91       	pop	r18
    1c40:	0f 90       	pop	r0
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	0f 90       	pop	r0
    1c46:	1f 90       	pop	r1
    1c48:	18 95       	reti

00001c4a <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <DIO_ES_tSetPinDirection+0x6>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <DIO_ES_tSetPinDirection+0x8>
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	6a 83       	std	Y+2, r22	; 0x02
    1c5a:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	88 30       	cpi	r24, 0x08	; 8
    1c60:	18 f0       	brcs	.+6      	; 0x1c68 <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	8c 83       	std	Y+4, r24	; 0x04
    1c66:	d8 c0       	rjmp	.+432    	; 0x1e18 <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	88 23       	and	r24, r24
    1c6c:	91 f5       	brne	.+100    	; 0x1cd2 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	a1 f4       	brne	.+40     	; 0x1c9c <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    1c74:	aa e3       	ldi	r26, 0x3A	; 58
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ea e3       	ldi	r30, 0x3A	; 58
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <DIO_ES_tSetPinDirection+0x48>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <DIO_ES_tSetPinDirection+0x44>
    1c96:	84 2b       	or	r24, r20
    1c98:	8c 93       	st	X, r24
    1c9a:	bd c0       	rjmp	.+378    	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	88 23       	and	r24, r24
    1ca0:	a9 f4       	brne	.+42     	; 0x1ccc <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    1ca2:	aa e3       	ldi	r26, 0x3A	; 58
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	ea e3       	ldi	r30, 0x3A	; 58
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	48 2f       	mov	r20, r24
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	02 2e       	mov	r0, r18
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <DIO_ES_tSetPinDirection+0x76>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	0a 94       	dec	r0
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <DIO_ES_tSetPinDirection+0x72>
    1cc4:	80 95       	com	r24
    1cc6:	84 23       	and	r24, r20
    1cc8:	8c 93       	st	X, r24
    1cca:	a5 c0       	rjmp	.+330    	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	8c 83       	std	Y+4, r24	; 0x04
    1cd0:	a3 c0       	rjmp	.+326    	; 0x1e18 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	91 f5       	brne	.+100    	; 0x1d3c <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	a1 f4       	brne	.+40     	; 0x1d06 <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    1cde:	a7 e3       	ldi	r26, 0x37	; 55
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e7 e3       	ldi	r30, 0x37	; 55
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 2f       	mov	r20, r24
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 2e       	mov	r0, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <DIO_ES_tSetPinDirection+0xb2>
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	0a 94       	dec	r0
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <DIO_ES_tSetPinDirection+0xae>
    1d00:	84 2b       	or	r24, r20
    1d02:	8c 93       	st	X, r24
    1d04:	88 c0       	rjmp	.+272    	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	88 23       	and	r24, r24
    1d0a:	a9 f4       	brne	.+42     	; 0x1d36 <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    1d0c:	a7 e3       	ldi	r26, 0x37	; 55
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e7 e3       	ldi	r30, 0x37	; 55
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	48 2f       	mov	r20, r24
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <DIO_ES_tSetPinDirection+0xe0>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <DIO_ES_tSetPinDirection+0xdc>
    1d2e:	80 95       	com	r24
    1d30:	84 23       	and	r24, r20
    1d32:	8c 93       	st	X, r24
    1d34:	70 c0       	rjmp	.+224    	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	8c 83       	std	Y+4, r24	; 0x04
    1d3a:	6e c0       	rjmp	.+220    	; 0x1e18 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	91 f5       	brne	.+100    	; 0x1da6 <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	a1 f4       	brne	.+40     	; 0x1d70 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    1d48:	a4 e3       	ldi	r26, 0x34	; 52
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e4 e3       	ldi	r30, 0x34	; 52
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	48 2f       	mov	r20, r24
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 2e       	mov	r0, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <DIO_ES_tSetPinDirection+0x11c>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <DIO_ES_tSetPinDirection+0x118>
    1d6a:	84 2b       	or	r24, r20
    1d6c:	8c 93       	st	X, r24
    1d6e:	53 c0       	rjmp	.+166    	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	88 23       	and	r24, r24
    1d74:	a9 f4       	brne	.+42     	; 0x1da0 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    1d76:	a4 e3       	ldi	r26, 0x34	; 52
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e4 e3       	ldi	r30, 0x34	; 52
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_ES_tSetPinDirection+0x14a>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_ES_tSetPinDirection+0x146>
    1d98:	80 95       	com	r24
    1d9a:	84 23       	and	r24, r20
    1d9c:	8c 93       	st	X, r24
    1d9e:	3b c0       	rjmp	.+118    	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	8c 83       	std	Y+4, r24	; 0x04
    1da4:	39 c0       	rjmp	.+114    	; 0x1e18 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	83 30       	cpi	r24, 0x03	; 3
    1daa:	91 f5       	brne	.+100    	; 0x1e10 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	a1 f4       	brne	.+40     	; 0x1dda <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    1db2:	a1 e3       	ldi	r26, 0x31	; 49
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e1 e3       	ldi	r30, 0x31	; 49
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_ES_tSetPinDirection+0x186>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <DIO_ES_tSetPinDirection+0x182>
    1dd4:	84 2b       	or	r24, r20
    1dd6:	8c 93       	st	X, r24
    1dd8:	1e c0       	rjmp	.+60     	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	88 23       	and	r24, r24
    1dde:	a9 f4       	brne	.+42     	; 0x1e0a <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    1de0:	a1 e3       	ldi	r26, 0x31	; 49
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e1 e3       	ldi	r30, 0x31	; 49
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <DIO_ES_tSetPinDirection+0x1b4>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <DIO_ES_tSetPinDirection+0x1b0>
    1e02:	80 95       	com	r24
    1e04:	84 23       	and	r24, r20
    1e06:	8c 93       	st	X, r24
    1e08:	06 c0       	rjmp	.+12     	; 0x1e16 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	8c 83       	std	Y+4, r24	; 0x04
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	8c 83       	std	Y+4, r24	; 0x04
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    1e16:	1c 82       	std	Y+4, r1	; 0x04
    1e18:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <DIO_ES_tSetPinValue+0x6>
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <DIO_ES_tSetPinValue+0x8>
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	6a 83       	std	Y+2, r22	; 0x02
    1e38:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	88 30       	cpi	r24, 0x08	; 8
    1e3e:	18 f0       	brcs	.+6      	; 0x1e46 <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	8c 83       	std	Y+4, r24	; 0x04
    1e44:	d8 c0       	rjmp	.+432    	; 0x1ff6 <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	88 23       	and	r24, r24
    1e4a:	91 f5       	brne	.+100    	; 0x1eb0 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	a1 f4       	brne	.+40     	; 0x1e7a <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    1e52:	ab e3       	ldi	r26, 0x3B	; 59
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	eb e3       	ldi	r30, 0x3B	; 59
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 2e       	mov	r0, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <DIO_ES_tSetPinValue+0x48>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <DIO_ES_tSetPinValue+0x44>
    1e74:	84 2b       	or	r24, r20
    1e76:	8c 93       	st	X, r24
    1e78:	bd c0       	rjmp	.+378    	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	88 23       	and	r24, r24
    1e7e:	a9 f4       	brne	.+42     	; 0x1eaa <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    1e80:	ab e3       	ldi	r26, 0x3B	; 59
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	eb e3       	ldi	r30, 0x3B	; 59
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <DIO_ES_tSetPinValue+0x76>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <DIO_ES_tSetPinValue+0x72>
    1ea2:	80 95       	com	r24
    1ea4:	84 23       	and	r24, r20
    1ea6:	8c 93       	st	X, r24
    1ea8:	a5 c0       	rjmp	.+330    	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	8c 83       	std	Y+4, r24	; 0x04
    1eae:	a3 c0       	rjmp	.+326    	; 0x1ff6 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	81 30       	cpi	r24, 0x01	; 1
    1eb4:	91 f5       	brne	.+100    	; 0x1f1a <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	a1 f4       	brne	.+40     	; 0x1ee4 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    1ebc:	a8 e3       	ldi	r26, 0x38	; 56
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e8 e3       	ldi	r30, 0x38	; 56
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	48 2f       	mov	r20, r24
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 2e       	mov	r0, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <DIO_ES_tSetPinValue+0xb2>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <DIO_ES_tSetPinValue+0xae>
    1ede:	84 2b       	or	r24, r20
    1ee0:	8c 93       	st	X, r24
    1ee2:	88 c0       	rjmp	.+272    	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	88 23       	and	r24, r24
    1ee8:	a9 f4       	brne	.+42     	; 0x1f14 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    1eea:	a8 e3       	ldi	r26, 0x38	; 56
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e8 e3       	ldi	r30, 0x38	; 56
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	48 2f       	mov	r20, r24
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	02 2e       	mov	r0, r18
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <DIO_ES_tSetPinValue+0xe0>
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	0a 94       	dec	r0
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <DIO_ES_tSetPinValue+0xdc>
    1f0c:	80 95       	com	r24
    1f0e:	84 23       	and	r24, r20
    1f10:	8c 93       	st	X, r24
    1f12:	70 c0       	rjmp	.+224    	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	8c 83       	std	Y+4, r24	; 0x04
    1f18:	6e c0       	rjmp	.+220    	; 0x1ff6 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	82 30       	cpi	r24, 0x02	; 2
    1f1e:	91 f5       	brne	.+100    	; 0x1f84 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	81 30       	cpi	r24, 0x01	; 1
    1f24:	a1 f4       	brne	.+40     	; 0x1f4e <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    1f26:	a5 e3       	ldi	r26, 0x35	; 53
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e5 e3       	ldi	r30, 0x35	; 53
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	48 2f       	mov	r20, r24
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	02 2e       	mov	r0, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <DIO_ES_tSetPinValue+0x11c>
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	0a 94       	dec	r0
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <DIO_ES_tSetPinValue+0x118>
    1f48:	84 2b       	or	r24, r20
    1f4a:	8c 93       	st	X, r24
    1f4c:	53 c0       	rjmp	.+166    	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	88 23       	and	r24, r24
    1f52:	a9 f4       	brne	.+42     	; 0x1f7e <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    1f54:	a5 e3       	ldi	r26, 0x35	; 53
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e5 e3       	ldi	r30, 0x35	; 53
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	48 2f       	mov	r20, r24
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 2e       	mov	r0, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <DIO_ES_tSetPinValue+0x14a>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	0a 94       	dec	r0
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <DIO_ES_tSetPinValue+0x146>
    1f76:	80 95       	com	r24
    1f78:	84 23       	and	r24, r20
    1f7a:	8c 93       	st	X, r24
    1f7c:	3b c0       	rjmp	.+118    	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	8c 83       	std	Y+4, r24	; 0x04
    1f82:	39 c0       	rjmp	.+114    	; 0x1ff6 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	83 30       	cpi	r24, 0x03	; 3
    1f88:	91 f5       	brne	.+100    	; 0x1fee <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	81 30       	cpi	r24, 0x01	; 1
    1f8e:	a1 f4       	brne	.+40     	; 0x1fb8 <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    1f90:	a2 e3       	ldi	r26, 0x32	; 50
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e2 e3       	ldi	r30, 0x32	; 50
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	48 2f       	mov	r20, r24
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	02 2e       	mov	r0, r18
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <DIO_ES_tSetPinValue+0x186>
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	0a 94       	dec	r0
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <DIO_ES_tSetPinValue+0x182>
    1fb2:	84 2b       	or	r24, r20
    1fb4:	8c 93       	st	X, r24
    1fb6:	1e c0       	rjmp	.+60     	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	88 23       	and	r24, r24
    1fbc:	a9 f4       	brne	.+42     	; 0x1fe8 <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    1fbe:	a2 e3       	ldi	r26, 0x32	; 50
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e2 e3       	ldi	r30, 0x32	; 50
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	48 2f       	mov	r20, r24
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	02 2e       	mov	r0, r18
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <DIO_ES_tSetPinValue+0x1b4>
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	0a 94       	dec	r0
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <DIO_ES_tSetPinValue+0x1b0>
    1fe0:	80 95       	com	r24
    1fe2:	84 23       	and	r24, r20
    1fe4:	8c 93       	st	X, r24
    1fe6:	06 c0       	rjmp	.+12     	; 0x1ff4 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	8c 83       	std	Y+4, r24	; 0x04
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	8c 83       	std	Y+4, r24	; 0x04
    1ff2:	01 c0       	rjmp	.+2      	; 0x1ff6 <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    1ff4:	1c 82       	std	Y+4, r1	; 0x04
    1ff6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <DIO_ES_tGetPinValue+0x6>
    200c:	00 d0       	rcall	.+0      	; 0x200e <DIO_ES_tGetPinValue+0x8>
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	6a 83       	std	Y+2, r22	; 0x02
    2018:	5c 83       	std	Y+4, r21	; 0x04
    201a:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	88 30       	cpi	r24, 0x08	; 8
    2020:	18 f0       	brcs	.+6      	; 0x2028 <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	4d 83       	std	Y+5, r20	; 0x05
    2026:	60 c0       	rjmp	.+192    	; 0x20e8 <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	88 23       	and	r24, r24
    202c:	a1 f4       	brne	.+40     	; 0x2056 <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    202e:	e9 e3       	ldi	r30, 0x39	; 57
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	88 2f       	mov	r24, r24
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a9 01       	movw	r20, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <DIO_ES_tGetPinValue+0x40>
    2042:	55 95       	asr	r21
    2044:	47 95       	ror	r20
    2046:	8a 95       	dec	r24
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <DIO_ES_tGetPinValue+0x3c>
    204a:	ca 01       	movw	r24, r20
    204c:	81 70       	andi	r24, 0x01	; 1
    204e:	eb 81       	ldd	r30, Y+3	; 0x03
    2050:	fc 81       	ldd	r31, Y+4	; 0x04
    2052:	80 83       	st	Z, r24
    2054:	48 c0       	rjmp	.+144    	; 0x20e6 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	a1 f4       	brne	.+40     	; 0x2084 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    205c:	e6 e3       	ldi	r30, 0x36	; 54
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	88 2f       	mov	r24, r24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a9 01       	movw	r20, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <DIO_ES_tGetPinValue+0x6e>
    2070:	55 95       	asr	r21
    2072:	47 95       	ror	r20
    2074:	8a 95       	dec	r24
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <DIO_ES_tGetPinValue+0x6a>
    2078:	ca 01       	movw	r24, r20
    207a:	81 70       	andi	r24, 0x01	; 1
    207c:	eb 81       	ldd	r30, Y+3	; 0x03
    207e:	fc 81       	ldd	r31, Y+4	; 0x04
    2080:	80 83       	st	Z, r24
    2082:	31 c0       	rjmp	.+98     	; 0x20e6 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	82 30       	cpi	r24, 0x02	; 2
    2088:	a1 f4       	brne	.+40     	; 0x20b2 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    208a:	e3 e3       	ldi	r30, 0x33	; 51
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a9 01       	movw	r20, r18
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <DIO_ES_tGetPinValue+0x9c>
    209e:	55 95       	asr	r21
    20a0:	47 95       	ror	r20
    20a2:	8a 95       	dec	r24
    20a4:	e2 f7       	brpl	.-8      	; 0x209e <DIO_ES_tGetPinValue+0x98>
    20a6:	ca 01       	movw	r24, r20
    20a8:	81 70       	andi	r24, 0x01	; 1
    20aa:	eb 81       	ldd	r30, Y+3	; 0x03
    20ac:	fc 81       	ldd	r31, Y+4	; 0x04
    20ae:	80 83       	st	Z, r24
    20b0:	1a c0       	rjmp	.+52     	; 0x20e6 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	83 30       	cpi	r24, 0x03	; 3
    20b6:	a1 f4       	brne	.+40     	; 0x20e0 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    20b8:	e0 e3       	ldi	r30, 0x30	; 48
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a9 01       	movw	r20, r18
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <DIO_ES_tGetPinValue+0xca>
    20cc:	55 95       	asr	r21
    20ce:	47 95       	ror	r20
    20d0:	8a 95       	dec	r24
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <DIO_ES_tGetPinValue+0xc6>
    20d4:	ca 01       	movw	r24, r20
    20d6:	81 70       	andi	r24, 0x01	; 1
    20d8:	eb 81       	ldd	r30, Y+3	; 0x03
    20da:	fc 81       	ldd	r31, Y+4	; 0x04
    20dc:	80 83       	st	Z, r24
    20de:	03 c0       	rjmp	.+6      	; 0x20e6 <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    20e0:	51 e0       	ldi	r21, 0x01	; 1
    20e2:	5d 83       	std	Y+5, r21	; 0x05
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    20e6:	1d 82       	std	Y+5, r1	; 0x05
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <DIO_ES_tSetPortDirection+0x6>
    2100:	00 d0       	rcall	.+0      	; 0x2102 <DIO_ES_tSetPortDirection+0x8>
    2102:	0f 92       	push	r0
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	31 f0       	breq	.+12     	; 0x211e <DIO_ES_tSetPortDirection+0x24>
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	19 f0       	breq	.+6      	; 0x211e <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    2118:	21 e0       	ldi	r18, 0x01	; 1
    211a:	2d 83       	std	Y+5, r18	; 0x05
    211c:	53 c0       	rjmp	.+166    	; 0x21c4 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	3c 83       	std	Y+4, r19	; 0x04
    2126:	2b 83       	std	Y+3, r18	; 0x03
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	91 05       	cpc	r25, r1
    2130:	09 f1       	breq	.+66     	; 0x2174 <DIO_ES_tSetPortDirection+0x7a>
    2132:	2b 81       	ldd	r18, Y+3	; 0x03
    2134:	3c 81       	ldd	r19, Y+4	; 0x04
    2136:	22 30       	cpi	r18, 0x02	; 2
    2138:	31 05       	cpc	r19, r1
    213a:	2c f4       	brge	.+10     	; 0x2146 <DIO_ES_tSetPortDirection+0x4c>
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	61 f0       	breq	.+24     	; 0x215c <DIO_ES_tSetPortDirection+0x62>
    2144:	3b c0       	rjmp	.+118    	; 0x21bc <DIO_ES_tSetPortDirection+0xc2>
    2146:	2b 81       	ldd	r18, Y+3	; 0x03
    2148:	3c 81       	ldd	r19, Y+4	; 0x04
    214a:	22 30       	cpi	r18, 0x02	; 2
    214c:	31 05       	cpc	r19, r1
    214e:	f1 f0       	breq	.+60     	; 0x218c <DIO_ES_tSetPortDirection+0x92>
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	83 30       	cpi	r24, 0x03	; 3
    2156:	91 05       	cpc	r25, r1
    2158:	29 f1       	breq	.+74     	; 0x21a4 <DIO_ES_tSetPortDirection+0xaa>
    215a:	30 c0       	rjmp	.+96     	; 0x21bc <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	29 f4       	brne	.+10     	; 0x216c <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    2162:	ea e3       	ldi	r30, 0x3A	; 58
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	8f ef       	ldi	r24, 0xFF	; 255
    2168:	80 83       	st	Z, r24
    216a:	2b c0       	rjmp	.+86     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    216c:	ea e3       	ldi	r30, 0x3A	; 58
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	10 82       	st	Z, r1
    2172:	27 c0       	rjmp	.+78     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	29 f4       	brne	.+10     	; 0x2184 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    217a:	e7 e3       	ldi	r30, 0x37	; 55
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	8f ef       	ldi	r24, 0xFF	; 255
    2180:	80 83       	st	Z, r24
    2182:	1f c0       	rjmp	.+62     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    2184:	e7 e3       	ldi	r30, 0x37	; 55
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	10 82       	st	Z, r1
    218a:	1b c0       	rjmp	.+54     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	81 30       	cpi	r24, 0x01	; 1
    2190:	29 f4       	brne	.+10     	; 0x219c <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    2192:	e4 e3       	ldi	r30, 0x34	; 52
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	8f ef       	ldi	r24, 0xFF	; 255
    2198:	80 83       	st	Z, r24
    219a:	13 c0       	rjmp	.+38     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    219c:	e4 e3       	ldi	r30, 0x34	; 52
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	10 82       	st	Z, r1
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	29 f4       	brne	.+10     	; 0x21b4 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    21aa:	e1 e3       	ldi	r30, 0x31	; 49
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	8f ef       	ldi	r24, 0xFF	; 255
    21b0:	80 83       	st	Z, r24
    21b2:	07 c0       	rjmp	.+14     	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    21b4:	e1 e3       	ldi	r30, 0x31	; 49
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	10 82       	st	Z, r1
    21ba:	03 c0       	rjmp	.+6      	; 0x21c2 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    21bc:	91 e0       	ldi	r25, 0x01	; 1
    21be:	9d 83       	std	Y+5, r25	; 0x05
    21c0:	01 c0       	rjmp	.+2      	; 0x21c4 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    21c2:	1d 82       	std	Y+5, r1	; 0x05
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	00 d0       	rcall	.+0      	; 0x21dc <DIO_ES_tSetPortValue+0x6>
    21dc:	00 d0       	rcall	.+0      	; 0x21de <DIO_ES_tSetPortValue+0x8>
    21de:	0f 92       	push	r0
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	31 f0       	breq	.+12     	; 0x21fa <DIO_ES_tSetPortValue+0x24>
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	88 23       	and	r24, r24
    21f2:	19 f0       	breq	.+6      	; 0x21fa <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    21f4:	21 e0       	ldi	r18, 0x01	; 1
    21f6:	2d 83       	std	Y+5, r18	; 0x05
    21f8:	53 c0       	rjmp	.+166    	; 0x22a0 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	3c 83       	std	Y+4, r19	; 0x04
    2202:	2b 83       	std	Y+3, r18	; 0x03
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	81 30       	cpi	r24, 0x01	; 1
    220a:	91 05       	cpc	r25, r1
    220c:	09 f1       	breq	.+66     	; 0x2250 <DIO_ES_tSetPortValue+0x7a>
    220e:	2b 81       	ldd	r18, Y+3	; 0x03
    2210:	3c 81       	ldd	r19, Y+4	; 0x04
    2212:	22 30       	cpi	r18, 0x02	; 2
    2214:	31 05       	cpc	r19, r1
    2216:	2c f4       	brge	.+10     	; 0x2222 <DIO_ES_tSetPortValue+0x4c>
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	61 f0       	breq	.+24     	; 0x2238 <DIO_ES_tSetPortValue+0x62>
    2220:	3b c0       	rjmp	.+118    	; 0x2298 <DIO_ES_tSetPortValue+0xc2>
    2222:	2b 81       	ldd	r18, Y+3	; 0x03
    2224:	3c 81       	ldd	r19, Y+4	; 0x04
    2226:	22 30       	cpi	r18, 0x02	; 2
    2228:	31 05       	cpc	r19, r1
    222a:	f1 f0       	breq	.+60     	; 0x2268 <DIO_ES_tSetPortValue+0x92>
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	83 30       	cpi	r24, 0x03	; 3
    2232:	91 05       	cpc	r25, r1
    2234:	29 f1       	breq	.+74     	; 0x2280 <DIO_ES_tSetPortValue+0xaa>
    2236:	30 c0       	rjmp	.+96     	; 0x2298 <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	29 f4       	brne	.+10     	; 0x2248 <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    223e:	eb e3       	ldi	r30, 0x3B	; 59
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	8f ef       	ldi	r24, 0xFF	; 255
    2244:	80 83       	st	Z, r24
    2246:	2b c0       	rjmp	.+86     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    2248:	eb e3       	ldi	r30, 0x3B	; 59
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	10 82       	st	Z, r1
    224e:	27 c0       	rjmp	.+78     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	81 30       	cpi	r24, 0x01	; 1
    2254:	29 f4       	brne	.+10     	; 0x2260 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    2256:	e8 e3       	ldi	r30, 0x38	; 56
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	8f ef       	ldi	r24, 0xFF	; 255
    225c:	80 83       	st	Z, r24
    225e:	1f c0       	rjmp	.+62     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    2260:	e8 e3       	ldi	r30, 0x38	; 56
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	10 82       	st	Z, r1
    2266:	1b c0       	rjmp	.+54     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	29 f4       	brne	.+10     	; 0x2278 <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    226e:	e5 e3       	ldi	r30, 0x35	; 53
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	8f ef       	ldi	r24, 0xFF	; 255
    2274:	80 83       	st	Z, r24
    2276:	13 c0       	rjmp	.+38     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    2278:	e5 e3       	ldi	r30, 0x35	; 53
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	10 82       	st	Z, r1
    227e:	0f c0       	rjmp	.+30     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	81 30       	cpi	r24, 0x01	; 1
    2284:	29 f4       	brne	.+10     	; 0x2290 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    2286:	e2 e3       	ldi	r30, 0x32	; 50
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	8f ef       	ldi	r24, 0xFF	; 255
    228c:	80 83       	st	Z, r24
    228e:	07 c0       	rjmp	.+14     	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    2290:	e2 e3       	ldi	r30, 0x32	; 50
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	10 82       	st	Z, r1
    2296:	03 c0       	rjmp	.+6      	; 0x229e <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    2298:	91 e0       	ldi	r25, 0x01	; 1
    229a:	9d 83       	std	Y+5, r25	; 0x05
    229c:	01 c0       	rjmp	.+2      	; 0x22a0 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    229e:	1d 82       	std	Y+5, r1	; 0x05
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <DIO_ES_tTOGPin+0x6>
    22b8:	0f 92       	push	r0
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	88 30       	cpi	r24, 0x08	; 8
    22c6:	18 f0       	brcs	.+6      	; 0x22ce <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	8b 83       	std	Y+3, r24	; 0x03
    22cc:	60 c0       	rjmp	.+192    	; 0x238e <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	88 23       	and	r24, r24
    22d2:	a1 f4       	brne	.+40     	; 0x22fc <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    22d4:	ab e3       	ldi	r26, 0x3B	; 59
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	eb e3       	ldi	r30, 0x3B	; 59
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	48 2f       	mov	r20, r24
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <DIO_ES_tTOGPin+0x40>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <DIO_ES_tTOGPin+0x3c>
    22f6:	84 27       	eor	r24, r20
    22f8:	8c 93       	st	X, r24
    22fa:	48 c0       	rjmp	.+144    	; 0x238c <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	a1 f4       	brne	.+40     	; 0x232a <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    2302:	a8 e3       	ldi	r26, 0x38	; 56
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e8 e3       	ldi	r30, 0x38	; 56
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	48 2f       	mov	r20, r24
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	02 2e       	mov	r0, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <DIO_ES_tTOGPin+0x6e>
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	0a 94       	dec	r0
    2322:	e2 f7       	brpl	.-8      	; 0x231c <DIO_ES_tTOGPin+0x6a>
    2324:	84 27       	eor	r24, r20
    2326:	8c 93       	st	X, r24
    2328:	31 c0       	rjmp	.+98     	; 0x238c <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	82 30       	cpi	r24, 0x02	; 2
    232e:	a1 f4       	brne	.+40     	; 0x2358 <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    2330:	a5 e3       	ldi	r26, 0x35	; 53
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e5 e3       	ldi	r30, 0x35	; 53
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	48 2f       	mov	r20, r24
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	02 2e       	mov	r0, r18
    2348:	02 c0       	rjmp	.+4      	; 0x234e <DIO_ES_tTOGPin+0x9c>
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	0a 94       	dec	r0
    2350:	e2 f7       	brpl	.-8      	; 0x234a <DIO_ES_tTOGPin+0x98>
    2352:	84 27       	eor	r24, r20
    2354:	8c 93       	st	X, r24
    2356:	1a c0       	rjmp	.+52     	; 0x238c <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	83 30       	cpi	r24, 0x03	; 3
    235c:	a1 f4       	brne	.+40     	; 0x2386 <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    235e:	a2 e3       	ldi	r26, 0x32	; 50
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e2 e3       	ldi	r30, 0x32	; 50
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	48 2f       	mov	r20, r24
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	02 2e       	mov	r0, r18
    2376:	02 c0       	rjmp	.+4      	; 0x237c <DIO_ES_tTOGPin+0xca>
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	0a 94       	dec	r0
    237e:	e2 f7       	brpl	.-8      	; 0x2378 <DIO_ES_tTOGPin+0xc6>
    2380:	84 27       	eor	r24, r20
    2382:	8c 93       	st	X, r24
    2384:	03 c0       	rjmp	.+6      	; 0x238c <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	8b 83       	std	Y+3, r24	; 0x03
    238a:	01 c0       	rjmp	.+2      	; 0x238e <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    238c:	1b 82       	std	Y+3, r1	; 0x03
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <DIO_ES_tInit+0x6>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    23a6:	1a 82       	std	Y+2, r1	; 0x02
    23a8:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    23aa:	1a 82       	std	Y+2, r1	; 0x02
    23ac:	19 82       	std	Y+1, r1	; 0x01
    23ae:	a3 c2       	rjmp	.+1350   	; 0x28f6 <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	fc 01       	movw	r30, r24
    23be:	ec 5b       	subi	r30, 0xBC	; 188
    23c0:	fd 4f       	sbci	r31, 0xFD	; 253
    23c2:	80 81       	ld	r24, Z
    23c4:	88 23       	and	r24, r24
    23c6:	09 f0       	breq	.+2      	; 0x23ca <DIO_ES_tInit+0x2e>
    23c8:	9b c0       	rjmp	.+310    	; 0x2500 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	fc 01       	movw	r30, r24
    23da:	ec 5b       	subi	r30, 0xBC	; 188
    23dc:	fd 4f       	sbci	r31, 0xFD	; 253
    23de:	80 81       	ld	r24, Z
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	e9 f4       	brne	.+58     	; 0x241e <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    23e4:	aa e3       	ldi	r26, 0x3A	; 58
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	ea e3       	ldi	r30, 0x3A	; 58
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	48 2f       	mov	r20, r24
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	fc 01       	movw	r30, r24
    23fe:	eb 5b       	subi	r30, 0xBB	; 187
    2400:	fd 4f       	sbci	r31, 0xFD	; 253
    2402:	80 81       	ld	r24, Z
    2404:	28 2f       	mov	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	02 2e       	mov	r0, r18
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <DIO_ES_tInit+0x78>
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	0a 94       	dec	r0
    2416:	e2 f7       	brpl	.-8      	; 0x2410 <DIO_ES_tInit+0x74>
    2418:	84 2b       	or	r24, r20
    241a:	8c 93       	st	X, r24
    241c:	67 c2       	rjmp	.+1230   	; 0x28ec <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    241e:	aa e3       	ldi	r26, 0x3A	; 58
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	ea e3       	ldi	r30, 0x3A	; 58
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	48 2f       	mov	r20, r24
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	88 0f       	add	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	fc 01       	movw	r30, r24
    2438:	eb 5b       	subi	r30, 0xBB	; 187
    243a:	fd 4f       	sbci	r31, 0xFD	; 253
    243c:	80 81       	ld	r24, Z
    243e:	28 2f       	mov	r18, r24
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	02 2e       	mov	r0, r18
    2448:	02 c0       	rjmp	.+4      	; 0x244e <DIO_ES_tInit+0xb2>
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	0a 94       	dec	r0
    2450:	e2 f7       	brpl	.-8      	; 0x244a <DIO_ES_tInit+0xae>
    2452:	80 95       	com	r24
    2454:	84 23       	and	r24, r20
    2456:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	fc 01       	movw	r30, r24
    2466:	e9 5b       	subi	r30, 0xB9	; 185
    2468:	fd 4f       	sbci	r31, 0xFD	; 253
    246a:	80 81       	ld	r24, Z
    246c:	81 30       	cpi	r24, 0x01	; 1
    246e:	e9 f4       	brne	.+58     	; 0x24aa <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2470:	ab e3       	ldi	r26, 0x3B	; 59
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	eb e3       	ldi	r30, 0x3B	; 59
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	48 2f       	mov	r20, r24
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	fc 01       	movw	r30, r24
    248a:	eb 5b       	subi	r30, 0xBB	; 187
    248c:	fd 4f       	sbci	r31, 0xFD	; 253
    248e:	80 81       	ld	r24, Z
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	02 2e       	mov	r0, r18
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <DIO_ES_tInit+0x104>
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	0a 94       	dec	r0
    24a2:	e2 f7       	brpl	.-8      	; 0x249c <DIO_ES_tInit+0x100>
    24a4:	84 2b       	or	r24, r20
    24a6:	8c 93       	st	X, r24
    24a8:	21 c2       	rjmp	.+1090   	; 0x28ec <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	fc 01       	movw	r30, r24
    24b8:	e9 5b       	subi	r30, 0xB9	; 185
    24ba:	fd 4f       	sbci	r31, 0xFD	; 253
    24bc:	80 81       	ld	r24, Z
    24be:	88 23       	and	r24, r24
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <DIO_ES_tInit+0x128>
    24c2:	14 c2       	rjmp	.+1064   	; 0x28ec <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    24c4:	ab e3       	ldi	r26, 0x3B	; 59
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	eb e3       	ldi	r30, 0x3B	; 59
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	48 2f       	mov	r20, r24
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	9a 81       	ldd	r25, Y+2	; 0x02
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	fc 01       	movw	r30, r24
    24de:	eb 5b       	subi	r30, 0xBB	; 187
    24e0:	fd 4f       	sbci	r31, 0xFD	; 253
    24e2:	80 81       	ld	r24, Z
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	02 2e       	mov	r0, r18
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <DIO_ES_tInit+0x158>
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	0a 94       	dec	r0
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <DIO_ES_tInit+0x154>
    24f8:	80 95       	com	r24
    24fa:	84 23       	and	r24, r20
    24fc:	8c 93       	st	X, r24
    24fe:	f6 c1       	rjmp	.+1004   	; 0x28ec <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	fc 01       	movw	r30, r24
    250e:	ec 5b       	subi	r30, 0xBC	; 188
    2510:	fd 4f       	sbci	r31, 0xFD	; 253
    2512:	80 81       	ld	r24, Z
    2514:	81 30       	cpi	r24, 0x01	; 1
    2516:	09 f0       	breq	.+2      	; 0x251a <DIO_ES_tInit+0x17e>
    2518:	9b c0       	rjmp	.+310    	; 0x2650 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	9a 81       	ldd	r25, Y+2	; 0x02
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	fc 01       	movw	r30, r24
    252a:	ec 5b       	subi	r30, 0xBC	; 188
    252c:	fd 4f       	sbci	r31, 0xFD	; 253
    252e:	80 81       	ld	r24, Z
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	e9 f4       	brne	.+58     	; 0x256e <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    2534:	a7 e3       	ldi	r26, 0x37	; 55
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e7 e3       	ldi	r30, 0x37	; 55
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	48 2f       	mov	r20, r24
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	9a 81       	ldd	r25, Y+2	; 0x02
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	fc 01       	movw	r30, r24
    254e:	eb 5b       	subi	r30, 0xBB	; 187
    2550:	fd 4f       	sbci	r31, 0xFD	; 253
    2552:	80 81       	ld	r24, Z
    2554:	28 2f       	mov	r18, r24
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	02 2e       	mov	r0, r18
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <DIO_ES_tInit+0x1c8>
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	0a 94       	dec	r0
    2566:	e2 f7       	brpl	.-8      	; 0x2560 <DIO_ES_tInit+0x1c4>
    2568:	84 2b       	or	r24, r20
    256a:	8c 93       	st	X, r24
    256c:	bf c1       	rjmp	.+894    	; 0x28ec <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    256e:	a7 e3       	ldi	r26, 0x37	; 55
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e7 e3       	ldi	r30, 0x37	; 55
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	48 2f       	mov	r20, r24
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	9a 81       	ldd	r25, Y+2	; 0x02
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	fc 01       	movw	r30, r24
    2588:	eb 5b       	subi	r30, 0xBB	; 187
    258a:	fd 4f       	sbci	r31, 0xFD	; 253
    258c:	80 81       	ld	r24, Z
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	02 2e       	mov	r0, r18
    2598:	02 c0       	rjmp	.+4      	; 0x259e <DIO_ES_tInit+0x202>
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	0a 94       	dec	r0
    25a0:	e2 f7       	brpl	.-8      	; 0x259a <DIO_ES_tInit+0x1fe>
    25a2:	80 95       	com	r24
    25a4:	84 23       	and	r24, r20
    25a6:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	9a 81       	ldd	r25, Y+2	; 0x02
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	fc 01       	movw	r30, r24
    25b6:	e9 5b       	subi	r30, 0xB9	; 185
    25b8:	fd 4f       	sbci	r31, 0xFD	; 253
    25ba:	80 81       	ld	r24, Z
    25bc:	81 30       	cpi	r24, 0x01	; 1
    25be:	e9 f4       	brne	.+58     	; 0x25fa <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    25c0:	a8 e3       	ldi	r26, 0x38	; 56
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e8 e3       	ldi	r30, 0x38	; 56
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	48 2f       	mov	r20, r24
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9a 81       	ldd	r25, Y+2	; 0x02
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	fc 01       	movw	r30, r24
    25da:	eb 5b       	subi	r30, 0xBB	; 187
    25dc:	fd 4f       	sbci	r31, 0xFD	; 253
    25de:	80 81       	ld	r24, Z
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	02 2e       	mov	r0, r18
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <DIO_ES_tInit+0x254>
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	0a 94       	dec	r0
    25f2:	e2 f7       	brpl	.-8      	; 0x25ec <DIO_ES_tInit+0x250>
    25f4:	84 2b       	or	r24, r20
    25f6:	8c 93       	st	X, r24
    25f8:	79 c1       	rjmp	.+754    	; 0x28ec <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	88 0f       	add	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	fc 01       	movw	r30, r24
    2608:	e9 5b       	subi	r30, 0xB9	; 185
    260a:	fd 4f       	sbci	r31, 0xFD	; 253
    260c:	80 81       	ld	r24, Z
    260e:	88 23       	and	r24, r24
    2610:	09 f0       	breq	.+2      	; 0x2614 <DIO_ES_tInit+0x278>
    2612:	6c c1       	rjmp	.+728    	; 0x28ec <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2614:	ab e3       	ldi	r26, 0x3B	; 59
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	eb e3       	ldi	r30, 0x3B	; 59
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	48 2f       	mov	r20, r24
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	fc 01       	movw	r30, r24
    262e:	eb 5b       	subi	r30, 0xBB	; 187
    2630:	fd 4f       	sbci	r31, 0xFD	; 253
    2632:	80 81       	ld	r24, Z
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	02 2e       	mov	r0, r18
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <DIO_ES_tInit+0x2a8>
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	0a 94       	dec	r0
    2646:	e2 f7       	brpl	.-8      	; 0x2640 <DIO_ES_tInit+0x2a4>
    2648:	80 95       	com	r24
    264a:	84 23       	and	r24, r20
    264c:	8c 93       	st	X, r24
    264e:	4e c1       	rjmp	.+668    	; 0x28ec <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	88 0f       	add	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	fc 01       	movw	r30, r24
    265e:	ec 5b       	subi	r30, 0xBC	; 188
    2660:	fd 4f       	sbci	r31, 0xFD	; 253
    2662:	80 81       	ld	r24, Z
    2664:	82 30       	cpi	r24, 0x02	; 2
    2666:	09 f0       	breq	.+2      	; 0x266a <DIO_ES_tInit+0x2ce>
    2668:	9b c0       	rjmp	.+310    	; 0x27a0 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	9a 81       	ldd	r25, Y+2	; 0x02
    266e:	88 0f       	add	r24, r24
    2670:	99 1f       	adc	r25, r25
    2672:	01 96       	adiw	r24, 0x01	; 1
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	fc 01       	movw	r30, r24
    267a:	ec 5b       	subi	r30, 0xBC	; 188
    267c:	fd 4f       	sbci	r31, 0xFD	; 253
    267e:	80 81       	ld	r24, Z
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	e9 f4       	brne	.+58     	; 0x26be <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    2684:	a4 e3       	ldi	r26, 0x34	; 52
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e4 e3       	ldi	r30, 0x34	; 52
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	48 2f       	mov	r20, r24
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	fc 01       	movw	r30, r24
    269e:	eb 5b       	subi	r30, 0xBB	; 187
    26a0:	fd 4f       	sbci	r31, 0xFD	; 253
    26a2:	80 81       	ld	r24, Z
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	02 2e       	mov	r0, r18
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <DIO_ES_tInit+0x318>
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	0a 94       	dec	r0
    26b6:	e2 f7       	brpl	.-8      	; 0x26b0 <DIO_ES_tInit+0x314>
    26b8:	84 2b       	or	r24, r20
    26ba:	8c 93       	st	X, r24
    26bc:	17 c1       	rjmp	.+558    	; 0x28ec <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    26be:	a4 e3       	ldi	r26, 0x34	; 52
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e4 e3       	ldi	r30, 0x34	; 52
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	48 2f       	mov	r20, r24
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	fc 01       	movw	r30, r24
    26d8:	eb 5b       	subi	r30, 0xBB	; 187
    26da:	fd 4f       	sbci	r31, 0xFD	; 253
    26dc:	80 81       	ld	r24, Z
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	02 2e       	mov	r0, r18
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <DIO_ES_tInit+0x352>
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	0a 94       	dec	r0
    26f0:	e2 f7       	brpl	.-8      	; 0x26ea <DIO_ES_tInit+0x34e>
    26f2:	80 95       	com	r24
    26f4:	84 23       	and	r24, r20
    26f6:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	9a 81       	ldd	r25, Y+2	; 0x02
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	88 0f       	add	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	fc 01       	movw	r30, r24
    2706:	e9 5b       	subi	r30, 0xB9	; 185
    2708:	fd 4f       	sbci	r31, 0xFD	; 253
    270a:	80 81       	ld	r24, Z
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	e9 f4       	brne	.+58     	; 0x274a <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    2710:	a5 e3       	ldi	r26, 0x35	; 53
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e5 e3       	ldi	r30, 0x35	; 53
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	48 2f       	mov	r20, r24
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	88 0f       	add	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	fc 01       	movw	r30, r24
    272a:	eb 5b       	subi	r30, 0xBB	; 187
    272c:	fd 4f       	sbci	r31, 0xFD	; 253
    272e:	80 81       	ld	r24, Z
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	02 2e       	mov	r0, r18
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <DIO_ES_tInit+0x3a4>
    273c:	88 0f       	add	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	0a 94       	dec	r0
    2742:	e2 f7       	brpl	.-8      	; 0x273c <DIO_ES_tInit+0x3a0>
    2744:	84 2b       	or	r24, r20
    2746:	8c 93       	st	X, r24
    2748:	d1 c0       	rjmp	.+418    	; 0x28ec <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	fc 01       	movw	r30, r24
    2758:	e9 5b       	subi	r30, 0xB9	; 185
    275a:	fd 4f       	sbci	r31, 0xFD	; 253
    275c:	80 81       	ld	r24, Z
    275e:	88 23       	and	r24, r24
    2760:	09 f0       	breq	.+2      	; 0x2764 <DIO_ES_tInit+0x3c8>
    2762:	c4 c0       	rjmp	.+392    	; 0x28ec <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2764:	ab e3       	ldi	r26, 0x3B	; 59
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	eb e3       	ldi	r30, 0x3B	; 59
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	48 2f       	mov	r20, r24
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	fc 01       	movw	r30, r24
    277e:	eb 5b       	subi	r30, 0xBB	; 187
    2780:	fd 4f       	sbci	r31, 0xFD	; 253
    2782:	80 81       	ld	r24, Z
    2784:	28 2f       	mov	r18, r24
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	02 2e       	mov	r0, r18
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <DIO_ES_tInit+0x3f8>
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	0a 94       	dec	r0
    2796:	e2 f7       	brpl	.-8      	; 0x2790 <DIO_ES_tInit+0x3f4>
    2798:	80 95       	com	r24
    279a:	84 23       	and	r24, r20
    279c:	8c 93       	st	X, r24
    279e:	a6 c0       	rjmp	.+332    	; 0x28ec <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	9a 81       	ldd	r25, Y+2	; 0x02
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	88 0f       	add	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	fc 01       	movw	r30, r24
    27ae:	ec 5b       	subi	r30, 0xBC	; 188
    27b0:	fd 4f       	sbci	r31, 0xFD	; 253
    27b2:	80 81       	ld	r24, Z
    27b4:	83 30       	cpi	r24, 0x03	; 3
    27b6:	09 f0       	breq	.+2      	; 0x27ba <DIO_ES_tInit+0x41e>
    27b8:	99 c0       	rjmp	.+306    	; 0x28ec <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	01 96       	adiw	r24, 0x01	; 1
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	fc 01       	movw	r30, r24
    27ca:	ec 5b       	subi	r30, 0xBC	; 188
    27cc:	fd 4f       	sbci	r31, 0xFD	; 253
    27ce:	80 81       	ld	r24, Z
    27d0:	81 30       	cpi	r24, 0x01	; 1
    27d2:	e9 f4       	brne	.+58     	; 0x280e <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    27d4:	a1 e3       	ldi	r26, 0x31	; 49
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e1 e3       	ldi	r30, 0x31	; 49
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	48 2f       	mov	r20, r24
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	88 0f       	add	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	fc 01       	movw	r30, r24
    27ee:	eb 5b       	subi	r30, 0xBB	; 187
    27f0:	fd 4f       	sbci	r31, 0xFD	; 253
    27f2:	80 81       	ld	r24, Z
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	02 2e       	mov	r0, r18
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <DIO_ES_tInit+0x468>
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	0a 94       	dec	r0
    2806:	e2 f7       	brpl	.-8      	; 0x2800 <DIO_ES_tInit+0x464>
    2808:	84 2b       	or	r24, r20
    280a:	8c 93       	st	X, r24
    280c:	6f c0       	rjmp	.+222    	; 0x28ec <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    280e:	a1 e3       	ldi	r26, 0x31	; 49
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e1 e3       	ldi	r30, 0x31	; 49
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	48 2f       	mov	r20, r24
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	9a 81       	ldd	r25, Y+2	; 0x02
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	fc 01       	movw	r30, r24
    2828:	eb 5b       	subi	r30, 0xBB	; 187
    282a:	fd 4f       	sbci	r31, 0xFD	; 253
    282c:	80 81       	ld	r24, Z
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	02 2e       	mov	r0, r18
    2838:	02 c0       	rjmp	.+4      	; 0x283e <DIO_ES_tInit+0x4a2>
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	0a 94       	dec	r0
    2840:	e2 f7       	brpl	.-8      	; 0x283a <DIO_ES_tInit+0x49e>
    2842:	80 95       	com	r24
    2844:	84 23       	and	r24, r20
    2846:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	88 0f       	add	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	fc 01       	movw	r30, r24
    2856:	e9 5b       	subi	r30, 0xB9	; 185
    2858:	fd 4f       	sbci	r31, 0xFD	; 253
    285a:	80 81       	ld	r24, Z
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	e9 f4       	brne	.+58     	; 0x289a <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    2860:	a2 e3       	ldi	r26, 0x32	; 50
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e2 e3       	ldi	r30, 0x32	; 50
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	48 2f       	mov	r20, r24
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	9a 81       	ldd	r25, Y+2	; 0x02
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	fc 01       	movw	r30, r24
    287a:	eb 5b       	subi	r30, 0xBB	; 187
    287c:	fd 4f       	sbci	r31, 0xFD	; 253
    287e:	80 81       	ld	r24, Z
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	02 2e       	mov	r0, r18
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <DIO_ES_tInit+0x4f4>
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	0a 94       	dec	r0
    2892:	e2 f7       	brpl	.-8      	; 0x288c <DIO_ES_tInit+0x4f0>
    2894:	84 2b       	or	r24, r20
    2896:	8c 93       	st	X, r24
    2898:	29 c0       	rjmp	.+82     	; 0x28ec <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	9a 81       	ldd	r25, Y+2	; 0x02
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	fc 01       	movw	r30, r24
    28a8:	e9 5b       	subi	r30, 0xB9	; 185
    28aa:	fd 4f       	sbci	r31, 0xFD	; 253
    28ac:	80 81       	ld	r24, Z
    28ae:	88 23       	and	r24, r24
    28b0:	e9 f4       	brne	.+58     	; 0x28ec <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    28b2:	ab e3       	ldi	r26, 0x3B	; 59
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	eb e3       	ldi	r30, 0x3B	; 59
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	48 2f       	mov	r20, r24
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	9a 81       	ldd	r25, Y+2	; 0x02
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	fc 01       	movw	r30, r24
    28cc:	eb 5b       	subi	r30, 0xBB	; 187
    28ce:	fd 4f       	sbci	r31, 0xFD	; 253
    28d0:	80 81       	ld	r24, Z
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	02 2e       	mov	r0, r18
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <DIO_ES_tInit+0x546>
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	0a 94       	dec	r0
    28e4:	e2 f7       	brpl	.-8      	; 0x28de <DIO_ES_tInit+0x542>
    28e6:	80 95       	com	r24
    28e8:	84 23       	and	r24, r20
    28ea:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	9a 83       	std	Y+2, r25	; 0x02
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	9a 81       	ldd	r25, Y+2	; 0x02
    28fa:	8a 31       	cpi	r24, 0x1A	; 26
    28fc:	91 05       	cpc	r25, r1
    28fe:	0c f4       	brge	.+2      	; 0x2902 <DIO_ES_tInit+0x566>
    2900:	57 cd       	rjmp	.-1362   	; 0x23b0 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    2902:	80 e0       	ldi	r24, 0x00	; 0
}
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <Stepper_Init>:

#include "Stepper.h"
#include "StepperCfg.h"

void Stepper_Init(void)
{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S1, OUTPUT);
    2916:	82 e0       	ldi	r24, 0x02	; 2
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S2, OUTPUT);
    2920:	82 e0       	ldi	r24, 0x02	; 2
    2922:	65 e0       	ldi	r22, 0x05	; 5
    2924:	41 e0       	ldi	r20, 0x01	; 1
    2926:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S3, OUTPUT);
    292a:	82 e0       	ldi	r24, 0x02	; 2
    292c:	66 e0       	ldi	r22, 0x06	; 6
    292e:	41 e0       	ldi	r20, 0x01	; 1
    2930:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S4, OUTPUT);
    2934:	82 e0       	ldi	r24, 0x02	; 2
    2936:	67 e0       	ldi	r22, 0x07	; 7
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    293e:	82 e0       	ldi	r24, 0x02	; 2
    2940:	60 e0       	ldi	r22, 0x00	; 0
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    2948:	82 e0       	ldi	r24, 0x02	; 2
    294a:	65 e0       	ldi	r22, 0x05	; 5
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	66 e0       	ldi	r22, 0x06	; 6
    2956:	40 e0       	ldi	r20, 0x00	; 0
    2958:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	67 e0       	ldi	r22, 0x07	; 7
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
}
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <Stepper_Rotate>:


void Stepper_Rotate(u8 degree)
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	ef 97       	sbiw	r28, 0x3f	; 63
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	8f af       	std	Y+63, r24	; 0x3f
	u16 stepsNum = (degree * 2048UL)/360;
    2982:	8f ad       	ldd	r24, Y+63	; 0x3f
    2984:	88 2f       	mov	r24, r24
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	a0 e0       	ldi	r26, 0x00	; 0
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	07 2e       	mov	r0, r23
    298e:	7b e0       	ldi	r23, 0x0B	; 11
    2990:	88 0f       	add	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	aa 1f       	adc	r26, r26
    2996:	bb 1f       	adc	r27, r27
    2998:	7a 95       	dec	r23
    299a:	d1 f7       	brne	.-12     	; 0x2990 <Stepper_Rotate+0x24>
    299c:	70 2d       	mov	r23, r0
    299e:	28 e6       	ldi	r18, 0x68	; 104
    29a0:	31 e0       	ldi	r19, 0x01	; 1
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	bc 01       	movw	r22, r24
    29a8:	cd 01       	movw	r24, r26
    29aa:	0e 94 8c 29 	call	0x5318	; 0x5318 <__udivmodsi4>
    29ae:	da 01       	movw	r26, r20
    29b0:	c9 01       	movw	r24, r18
    29b2:	9e af       	std	Y+62, r25	; 0x3e
    29b4:	8d af       	std	Y+61, r24	; 0x3d
	u16 IterationsNum = stepsNum/4;
    29b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ba:	96 95       	lsr	r25
    29bc:	87 95       	ror	r24
    29be:	96 95       	lsr	r25
    29c0:	87 95       	ror	r24
    29c2:	9c af       	std	Y+60, r25	; 0x3c
    29c4:	8b af       	std	Y+59, r24	; 0x3b

	u16 i=0;
    29c6:	1a ae       	std	Y+58, r1	; 0x3a
    29c8:	19 ae       	std	Y+57, r1	; 0x39
	for(i=0;i<IterationsNum;i++)
    29ca:	1a ae       	std	Y+58, r1	; 0x3a
    29cc:	19 ae       	std	Y+57, r1	; 0x39
    29ce:	1d c2       	rjmp	.+1082   	; 0x2e0a <Stepper_Rotate+0x49e>
	{
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, HIGH);
    29d0:	82 e0       	ldi	r24, 0x02	; 2
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	41 e0       	ldi	r20, 0x01	; 1
    29d6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    29da:	82 e0       	ldi	r24, 0x02	; 2
    29dc:	65 e0       	ldi	r22, 0x05	; 5
    29de:	40 e0       	ldi	r20, 0x00	; 0
    29e0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    29e4:	82 e0       	ldi	r24, 0x02	; 2
    29e6:	66 e0       	ldi	r22, 0x06	; 6
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	67 e0       	ldi	r22, 0x07	; 7
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	a0 ea       	ldi	r26, 0xA0	; 160
    29fe:	b1 e4       	ldi	r27, 0x41	; 65
    2a00:	8d ab       	std	Y+53, r24	; 0x35
    2a02:	9e ab       	std	Y+54, r25	; 0x36
    2a04:	af ab       	std	Y+55, r26	; 0x37
    2a06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a08:	6d a9       	ldd	r22, Y+53	; 0x35
    2a0a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a0c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a0e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	4a e7       	ldi	r20, 0x7A	; 122
    2a16:	55 e4       	ldi	r21, 0x45	; 69
    2a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	89 ab       	std	Y+49, r24	; 0x31
    2a22:	9a ab       	std	Y+50, r25	; 0x32
    2a24:	ab ab       	std	Y+51, r26	; 0x33
    2a26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a28:	69 a9       	ldd	r22, Y+49	; 0x31
    2a2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e8       	ldi	r20, 0x80	; 128
    2a36:	5f e3       	ldi	r21, 0x3F	; 63
    2a38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a3c:	88 23       	and	r24, r24
    2a3e:	2c f4       	brge	.+10     	; 0x2a4a <Stepper_Rotate+0xde>
		__ticks = 1;
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	98 ab       	std	Y+48, r25	; 0x30
    2a46:	8f a7       	std	Y+47, r24	; 0x2f
    2a48:	3f c0       	rjmp	.+126    	; 0x2ac8 <Stepper_Rotate+0x15c>
	else if (__tmp > 65535)
    2a4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a50:	9c a9       	ldd	r25, Y+52	; 0x34
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	3f ef       	ldi	r19, 0xFF	; 255
    2a56:	4f e7       	ldi	r20, 0x7F	; 127
    2a58:	57 e4       	ldi	r21, 0x47	; 71
    2a5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a5e:	18 16       	cp	r1, r24
    2a60:	4c f5       	brge	.+82     	; 0x2ab4 <Stepper_Rotate+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a62:	6d a9       	ldd	r22, Y+53	; 0x35
    2a64:	7e a9       	ldd	r23, Y+54	; 0x36
    2a66:	8f a9       	ldd	r24, Y+55	; 0x37
    2a68:	98 ad       	ldd	r25, Y+56	; 0x38
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	40 e2       	ldi	r20, 0x20	; 32
    2a70:	51 e4       	ldi	r21, 0x41	; 65
    2a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	bc 01       	movw	r22, r24
    2a7c:	cd 01       	movw	r24, r26
    2a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	98 ab       	std	Y+48, r25	; 0x30
    2a88:	8f a7       	std	Y+47, r24	; 0x2f
    2a8a:	0f c0       	rjmp	.+30     	; 0x2aaa <Stepper_Rotate+0x13e>
    2a8c:	80 e9       	ldi	r24, 0x90	; 144
    2a8e:	91 e0       	ldi	r25, 0x01	; 1
    2a90:	9e a7       	std	Y+46, r25	; 0x2e
    2a92:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a94:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a96:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <Stepper_Rotate+0x12c>
    2a9c:	9e a7       	std	Y+46, r25	; 0x2e
    2a9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aa2:	98 a9       	ldd	r25, Y+48	; 0x30
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	98 ab       	std	Y+48, r25	; 0x30
    2aa8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aac:	98 a9       	ldd	r25, Y+48	; 0x30
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	69 f7       	brne	.-38     	; 0x2a8c <Stepper_Rotate+0x120>
    2ab2:	14 c0       	rjmp	.+40     	; 0x2adc <Stepper_Rotate+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ab6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ab8:	8b a9       	ldd	r24, Y+51	; 0x33
    2aba:	9c a9       	ldd	r25, Y+52	; 0x34
    2abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	98 ab       	std	Y+48, r25	; 0x30
    2ac6:	8f a7       	std	Y+47, r24	; 0x2f
    2ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aca:	98 a9       	ldd	r25, Y+48	; 0x30
    2acc:	9c a7       	std	Y+44, r25	; 0x2c
    2ace:	8b a7       	std	Y+43, r24	; 0x2b
    2ad0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ad2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <Stepper_Rotate+0x168>
    2ad8:	9c a7       	std	Y+44, r25	; 0x2c
    2ada:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    2adc:	82 e0       	ldi	r24, 0x02	; 2
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, HIGH);
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	65 e0       	ldi	r22, 0x05	; 5
    2aea:	41 e0       	ldi	r20, 0x01	; 1
    2aec:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    2af0:	82 e0       	ldi	r24, 0x02	; 2
    2af2:	66 e0       	ldi	r22, 0x06	; 6
    2af4:	40 e0       	ldi	r20, 0x00	; 0
    2af6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    2afa:	82 e0       	ldi	r24, 0x02	; 2
    2afc:	67 e0       	ldi	r22, 0x07	; 7
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	a0 ea       	ldi	r26, 0xA0	; 160
    2b0a:	b1 e4       	ldi	r27, 0x41	; 65
    2b0c:	8f a3       	std	Y+39, r24	; 0x27
    2b0e:	98 a7       	std	Y+40, r25	; 0x28
    2b10:	a9 a7       	std	Y+41, r26	; 0x29
    2b12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b14:	6f a1       	ldd	r22, Y+39	; 0x27
    2b16:	78 a5       	ldd	r23, Y+40	; 0x28
    2b18:	89 a5       	ldd	r24, Y+41	; 0x29
    2b1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4a e7       	ldi	r20, 0x7A	; 122
    2b22:	55 e4       	ldi	r21, 0x45	; 69
    2b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	8b a3       	std	Y+35, r24	; 0x23
    2b2e:	9c a3       	std	Y+36, r25	; 0x24
    2b30:	ad a3       	std	Y+37, r26	; 0x25
    2b32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b34:	6b a1       	ldd	r22, Y+35	; 0x23
    2b36:	7c a1       	ldd	r23, Y+36	; 0x24
    2b38:	8d a1       	ldd	r24, Y+37	; 0x25
    2b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e8       	ldi	r20, 0x80	; 128
    2b42:	5f e3       	ldi	r21, 0x3F	; 63
    2b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b48:	88 23       	and	r24, r24
    2b4a:	2c f4       	brge	.+10     	; 0x2b56 <Stepper_Rotate+0x1ea>
		__ticks = 1;
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	9a a3       	std	Y+34, r25	; 0x22
    2b52:	89 a3       	std	Y+33, r24	; 0x21
    2b54:	3f c0       	rjmp	.+126    	; 0x2bd4 <Stepper_Rotate+0x268>
	else if (__tmp > 65535)
    2b56:	6b a1       	ldd	r22, Y+35	; 0x23
    2b58:	7c a1       	ldd	r23, Y+36	; 0x24
    2b5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	3f ef       	ldi	r19, 0xFF	; 255
    2b62:	4f e7       	ldi	r20, 0x7F	; 127
    2b64:	57 e4       	ldi	r21, 0x47	; 71
    2b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b6a:	18 16       	cp	r1, r24
    2b6c:	4c f5       	brge	.+82     	; 0x2bc0 <Stepper_Rotate+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b70:	78 a5       	ldd	r23, Y+40	; 0x28
    2b72:	89 a5       	ldd	r24, Y+41	; 0x29
    2b74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e2       	ldi	r20, 0x20	; 32
    2b7c:	51 e4       	ldi	r21, 0x41	; 65
    2b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9a a3       	std	Y+34, r25	; 0x22
    2b94:	89 a3       	std	Y+33, r24	; 0x21
    2b96:	0f c0       	rjmp	.+30     	; 0x2bb6 <Stepper_Rotate+0x24a>
    2b98:	80 e9       	ldi	r24, 0x90	; 144
    2b9a:	91 e0       	ldi	r25, 0x01	; 1
    2b9c:	98 a3       	std	Y+32, r25	; 0x20
    2b9e:	8f 8f       	std	Y+31, r24	; 0x1f
    2ba0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ba2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <Stepper_Rotate+0x238>
    2ba8:	98 a3       	std	Y+32, r25	; 0x20
    2baa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bac:	89 a1       	ldd	r24, Y+33	; 0x21
    2bae:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	9a a3       	std	Y+34, r25	; 0x22
    2bb4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bba:	00 97       	sbiw	r24, 0x00	; 0
    2bbc:	69 f7       	brne	.-38     	; 0x2b98 <Stepper_Rotate+0x22c>
    2bbe:	14 c0       	rjmp	.+40     	; 0x2be8 <Stepper_Rotate+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    2bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9a a3       	std	Y+34, r25	; 0x22
    2bd2:	89 a3       	std	Y+33, r24	; 0x21
    2bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd8:	9e 8f       	std	Y+30, r25	; 0x1e
    2bda:	8d 8f       	std	Y+29, r24	; 0x1d
    2bdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <Stepper_Rotate+0x274>
    2be4:	9e 8f       	std	Y+30, r25	; 0x1e
    2be6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    2be8:	82 e0       	ldi	r24, 0x02	; 2
    2bea:	60 e0       	ldi	r22, 0x00	; 0
    2bec:	40 e0       	ldi	r20, 0x00	; 0
    2bee:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	65 e0       	ldi	r22, 0x05	; 5
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, HIGH);
    2bfc:	82 e0       	ldi	r24, 0x02	; 2
    2bfe:	66 e0       	ldi	r22, 0x06	; 6
    2c00:	41 e0       	ldi	r20, 0x01	; 1
    2c02:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    2c06:	82 e0       	ldi	r24, 0x02	; 2
    2c08:	67 e0       	ldi	r22, 0x07	; 7
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	a0 ea       	ldi	r26, 0xA0	; 160
    2c16:	b1 e4       	ldi	r27, 0x41	; 65
    2c18:	89 8f       	std	Y+25, r24	; 0x19
    2c1a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c1c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c20:	69 8d       	ldd	r22, Y+25	; 0x19
    2c22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	4a e7       	ldi	r20, 0x7A	; 122
    2c2e:	55 e4       	ldi	r21, 0x45	; 69
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	8d 8b       	std	Y+21, r24	; 0x15
    2c3a:	9e 8b       	std	Y+22, r25	; 0x16
    2c3c:	af 8b       	std	Y+23, r26	; 0x17
    2c3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c40:	6d 89       	ldd	r22, Y+21	; 0x15
    2c42:	7e 89       	ldd	r23, Y+22	; 0x16
    2c44:	8f 89       	ldd	r24, Y+23	; 0x17
    2c46:	98 8d       	ldd	r25, Y+24	; 0x18
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e8       	ldi	r20, 0x80	; 128
    2c4e:	5f e3       	ldi	r21, 0x3F	; 63
    2c50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c54:	88 23       	and	r24, r24
    2c56:	2c f4       	brge	.+10     	; 0x2c62 <Stepper_Rotate+0x2f6>
		__ticks = 1;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	9c 8b       	std	Y+20, r25	; 0x14
    2c5e:	8b 8b       	std	Y+19, r24	; 0x13
    2c60:	3f c0       	rjmp	.+126    	; 0x2ce0 <Stepper_Rotate+0x374>
	else if (__tmp > 65535)
    2c62:	6d 89       	ldd	r22, Y+21	; 0x15
    2c64:	7e 89       	ldd	r23, Y+22	; 0x16
    2c66:	8f 89       	ldd	r24, Y+23	; 0x17
    2c68:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	3f ef       	ldi	r19, 0xFF	; 255
    2c6e:	4f e7       	ldi	r20, 0x7F	; 127
    2c70:	57 e4       	ldi	r21, 0x47	; 71
    2c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c76:	18 16       	cp	r1, r24
    2c78:	4c f5       	brge	.+82     	; 0x2ccc <Stepper_Rotate+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e2       	ldi	r20, 0x20	; 32
    2c88:	51 e4       	ldi	r21, 0x41	; 65
    2c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9c 8b       	std	Y+20, r25	; 0x14
    2ca0:	8b 8b       	std	Y+19, r24	; 0x13
    2ca2:	0f c0       	rjmp	.+30     	; 0x2cc2 <Stepper_Rotate+0x356>
    2ca4:	80 e9       	ldi	r24, 0x90	; 144
    2ca6:	91 e0       	ldi	r25, 0x01	; 1
    2ca8:	9a 8b       	std	Y+18, r25	; 0x12
    2caa:	89 8b       	std	Y+17, r24	; 0x11
    2cac:	89 89       	ldd	r24, Y+17	; 0x11
    2cae:	9a 89       	ldd	r25, Y+18	; 0x12
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <Stepper_Rotate+0x344>
    2cb4:	9a 8b       	std	Y+18, r25	; 0x12
    2cb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cba:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	9c 8b       	std	Y+20, r25	; 0x14
    2cc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	69 f7       	brne	.-38     	; 0x2ca4 <Stepper_Rotate+0x338>
    2cca:	14 c0       	rjmp	.+40     	; 0x2cf4 <Stepper_Rotate+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cce:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	9c 8b       	std	Y+20, r25	; 0x14
    2cde:	8b 8b       	std	Y+19, r24	; 0x13
    2ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce4:	98 8b       	std	Y+16, r25	; 0x10
    2ce6:	8f 87       	std	Y+15, r24	; 0x0f
    2ce8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cea:	98 89       	ldd	r25, Y+16	; 0x10
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <Stepper_Rotate+0x380>
    2cf0:	98 8b       	std	Y+16, r25	; 0x10
    2cf2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	60 e0       	ldi	r22, 0x00	; 0
    2cf8:	40 e0       	ldi	r20, 0x00	; 0
    2cfa:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    2cfe:	82 e0       	ldi	r24, 0x02	; 2
    2d00:	65 e0       	ldi	r22, 0x05	; 5
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    2d08:	82 e0       	ldi	r24, 0x02	; 2
    2d0a:	66 e0       	ldi	r22, 0x06	; 6
    2d0c:	40 e0       	ldi	r20, 0x00	; 0
    2d0e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, HIGH);
    2d12:	82 e0       	ldi	r24, 0x02	; 2
    2d14:	67 e0       	ldi	r22, 0x07	; 7
    2d16:	41 e0       	ldi	r20, 0x01	; 1
    2d18:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	a0 ea       	ldi	r26, 0xA0	; 160
    2d22:	b1 e4       	ldi	r27, 0x41	; 65
    2d24:	8b 87       	std	Y+11, r24	; 0x0b
    2d26:	9c 87       	std	Y+12, r25	; 0x0c
    2d28:	ad 87       	std	Y+13, r26	; 0x0d
    2d2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	4a e7       	ldi	r20, 0x7A	; 122
    2d3a:	55 e4       	ldi	r21, 0x45	; 69
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	8f 83       	std	Y+7, r24	; 0x07
    2d46:	98 87       	std	Y+8, r25	; 0x08
    2d48:	a9 87       	std	Y+9, r26	; 0x09
    2d4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4e:	78 85       	ldd	r23, Y+8	; 0x08
    2d50:	89 85       	ldd	r24, Y+9	; 0x09
    2d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e8       	ldi	r20, 0x80	; 128
    2d5a:	5f e3       	ldi	r21, 0x3F	; 63
    2d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d60:	88 23       	and	r24, r24
    2d62:	2c f4       	brge	.+10     	; 0x2d6e <Stepper_Rotate+0x402>
		__ticks = 1;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
    2d6c:	3f c0       	rjmp	.+126    	; 0x2dec <Stepper_Rotate+0x480>
	else if (__tmp > 65535)
    2d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d70:	78 85       	ldd	r23, Y+8	; 0x08
    2d72:	89 85       	ldd	r24, Y+9	; 0x09
    2d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	3f ef       	ldi	r19, 0xFF	; 255
    2d7a:	4f e7       	ldi	r20, 0x7F	; 127
    2d7c:	57 e4       	ldi	r21, 0x47	; 71
    2d7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d82:	18 16       	cp	r1, r24
    2d84:	4c f5       	brge	.+82     	; 0x2dd8 <Stepper_Rotate+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e2       	ldi	r20, 0x20	; 32
    2d94:	51 e4       	ldi	r21, 0x41	; 65
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	bc 01       	movw	r22, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
    2dae:	0f c0       	rjmp	.+30     	; 0x2dce <Stepper_Rotate+0x462>
    2db0:	80 e9       	ldi	r24, 0x90	; 144
    2db2:	91 e0       	ldi	r25, 0x01	; 1
    2db4:	9c 83       	std	Y+4, r25	; 0x04
    2db6:	8b 83       	std	Y+3, r24	; 0x03
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <Stepper_Rotate+0x450>
    2dc0:	9c 83       	std	Y+4, r25	; 0x04
    2dc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	9e 83       	std	Y+6, r25	; 0x06
    2dcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	69 f7       	brne	.-38     	; 0x2db0 <Stepper_Rotate+0x444>
    2dd6:	14 c0       	rjmp	.+40     	; 0x2e00 <Stepper_Rotate+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dda:	78 85       	ldd	r23, Y+8	; 0x08
    2ddc:	89 85       	ldd	r24, Y+9	; 0x09
    2dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	9e 83       	std	Y+6, r25	; 0x06
    2dea:	8d 83       	std	Y+5, r24	; 0x05
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	9e 81       	ldd	r25, Y+6	; 0x06
    2df0:	9a 83       	std	Y+2, r25	; 0x02
    2df2:	89 83       	std	Y+1, r24	; 0x01
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <Stepper_Rotate+0x48c>
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	89 83       	std	Y+1, r24	; 0x01
{
	u16 stepsNum = (degree * 2048UL)/360;
	u16 IterationsNum = stepsNum/4;

	u16 i=0;
	for(i=0;i<IterationsNum;i++)
    2e00:	89 ad       	ldd	r24, Y+57	; 0x39
    2e02:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e04:	01 96       	adiw	r24, 0x01	; 1
    2e06:	9a af       	std	Y+58, r25	; 0x3a
    2e08:	89 af       	std	Y+57, r24	; 0x39
    2e0a:	29 ad       	ldd	r18, Y+57	; 0x39
    2e0c:	3a ad       	ldd	r19, Y+58	; 0x3a
    2e0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e10:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e12:	28 17       	cp	r18, r24
    2e14:	39 07       	cpc	r19, r25
    2e16:	08 f4       	brcc	.+2      	; 0x2e1a <Stepper_Rotate+0x4ae>
    2e18:	db cd       	rjmp	.-1098   	; 0x29d0 <Stepper_Rotate+0x64>
		_delay_ms(20);
	}



}
    2e1a:	ef 96       	adiw	r28, 0x3f	; 63
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	08 95       	ret

00002e2c <Servo_Init>:

TIMER1_Config_t Timer1Cfg = {0};


void Servo_Init(void)
{
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62


	Timer1Cfg.mode = TIMER1_FAST_PWM_ICR1_TOP;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	80 93 e4 02 	sts	0x02E4, r24
	Timer1Cfg.prescalar = TIMER1_PRESCALAR_64;
    2e3a:	83 e0       	ldi	r24, 0x03	; 3
    2e3c:	80 93 e5 02 	sts	0x02E5, r24
	Timer1Cfg.OC1A_mode = OCRA_NON_INVERTING;
    2e40:	82 e0       	ldi	r24, 0x02	; 2
    2e42:	80 93 e6 02 	sts	0x02E6, r24
	Timer1Cfg.OC1B_mode = OCRB_DISCONNECTED;
    2e46:	10 92 e7 02 	sts	0x02E7, r1
	TIMER1_Init(&Timer1Cfg);
    2e4a:	84 ee       	ldi	r24, 0xE4	; 228
    2e4c:	92 e0       	ldi	r25, 0x02	; 2
    2e4e:	0e 94 41 0a 	call	0x1482	; 0x1482 <TIMER1_Init>



}
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	08 95       	ret

00002e58 <Servo_Turn>:



// From 0 to 180
void Servo_Turn(int angle)
{
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	00 d0       	rcall	.+0      	; 0x2e5e <Servo_Turn+0x6>
    2e5e:	00 d0       	rcall	.+0      	; 0x2e60 <Servo_Turn+0x8>
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <Servo_Turn+0xa>
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
//	DIO_ES_tSetPinDirection(DIO_U8_PORT_D, DIO_U8_PIN_5, OUTPUT);

	// Calculate the pulse width based on the desired angle
	u16 pulse_width_microseconds = 1500 + ((angle / 180.0) * 1000);
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6e:	aa 27       	eor	r26, r26
    2e70:	97 fd       	sbrc	r25, 7
    2e72:	a0 95       	com	r26
    2e74:	ba 2f       	mov	r27, r26
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	bc 01       	movw	r22, r24
    2e84:	cd 01       	movw	r24, r26
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	44 e3       	ldi	r20, 0x34	; 52
    2e8c:	53 e4       	ldi	r21, 0x43	; 67
    2e8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	bc 01       	movw	r22, r24
    2e98:	cd 01       	movw	r24, r26
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	4a e7       	ldi	r20, 0x7A	; 122
    2ea0:	54 e4       	ldi	r21, 0x44	; 68
    2ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e8       	ldi	r19, 0x80	; 128
    2eb2:	4b eb       	ldi	r20, 0xBB	; 187
    2eb4:	54 e4       	ldi	r21, 0x44	; 68
    2eb6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9c 83       	std	Y+4, r25	; 0x04
    2ecc:	8b 83       	std	Y+3, r24	; 0x03
	u16 pulse_width_counts = pulse_width_microseconds / 4; // Timer 1 resolution prescaler is 64
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed2:	96 95       	lsr	r25
    2ed4:	87 95       	ror	r24
    2ed6:	96 95       	lsr	r25
    2ed8:	87 95       	ror	r24
    2eda:	9a 83       	std	Y+2, r25	; 0x02
    2edc:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = pulse_width_counts - 1;
    2ede:	ea e4       	ldi	r30, 0x4A	; 74
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	91 83       	std	Z+1, r25	; 0x01
    2eea:	80 83       	st	Z, r24
	ICR1 = 4999;			// 20 ms in data sheet of servo
    2eec:	e6 e4       	ldi	r30, 0x46	; 70
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	87 e8       	ldi	r24, 0x87	; 135
    2ef2:	93 e1       	ldi	r25, 0x13	; 19
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	80 83       	st	Z, r24


	SET_BIT(TCCR1A,COM1A1);
    2ef8:	af e4       	ldi	r26, 0x4F	; 79
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	ef e4       	ldi	r30, 0x4F	; 79
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	80 68       	ori	r24, 0x80	; 128
    2f04:	8c 93       	st	X, r24
	Servo_Init();
    2f06:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <Servo_Init>



	// Limit the angle to the range -90 to +90 degrees
	if (angle < -90)
    2f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0e:	2f ef       	ldi	r18, 0xFF	; 255
    2f10:	86 3a       	cpi	r24, 0xA6	; 166
    2f12:	92 07       	cpc	r25, r18
    2f14:	2c f4       	brge	.+10     	; 0x2f20 <Servo_Turn+0xc8>
		angle = -90;
    2f16:	86 ea       	ldi	r24, 0xA6	; 166
    2f18:	9f ef       	ldi	r25, 0xFF	; 255
    2f1a:	9e 83       	std	Y+6, r25	; 0x06
    2f1c:	8d 83       	std	Y+5, r24	; 0x05
    2f1e:	09 c0       	rjmp	.+18     	; 0x2f32 <Servo_Turn+0xda>
	else if (angle > 90)
    2f20:	8d 81       	ldd	r24, Y+5	; 0x05
    2f22:	9e 81       	ldd	r25, Y+6	; 0x06
    2f24:	8b 35       	cpi	r24, 0x5B	; 91
    2f26:	91 05       	cpc	r25, r1
    2f28:	24 f0       	brlt	.+8      	; 0x2f32 <Servo_Turn+0xda>
		angle = 90;
    2f2a:	8a e5       	ldi	r24, 0x5A	; 90
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	9e 83       	std	Y+6, r25	; 0x06
    2f30:	8d 83       	std	Y+5, r24	; 0x05




}
    2f32:	26 96       	adiw	r28, 0x06	; 6
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	f8 94       	cli
    2f38:	de bf       	out	0x3e, r29	; 62
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	cd bf       	out	0x3d, r28	; 61
    2f3e:	cf 91       	pop	r28
    2f40:	df 91       	pop	r29
    2f42:	08 95       	ret

00002f44 <Servo_Stop>:

void Servo_Stop()
{
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
	// Disable the OC1A interrupt
	TIMER1_Stop();
    2f4c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <TIMER1_Stop>
}
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	e0 97       	sbiw	r28, 0x30	; 48
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	41 e0       	ldi	r20, 0x01	; 1
    2f70:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	a0 e2       	ldi	r26, 0x20	; 32
    2f7a:	b1 e4       	ldi	r27, 0x41	; 65
    2f7c:	8d a7       	std	Y+45, r24	; 0x2d
    2f7e:	9e a7       	std	Y+46, r25	; 0x2e
    2f80:	af a7       	std	Y+47, r26	; 0x2f
    2f82:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f84:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f86:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f8c:	2b ea       	ldi	r18, 0xAB	; 171
    2f8e:	3a ea       	ldi	r19, 0xAA	; 170
    2f90:	4a ea       	ldi	r20, 0xAA	; 170
    2f92:	50 e4       	ldi	r21, 0x40	; 64
    2f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	89 a7       	std	Y+41, r24	; 0x29
    2f9e:	9a a7       	std	Y+42, r25	; 0x2a
    2fa0:	ab a7       	std	Y+43, r26	; 0x2b
    2fa2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2fa4:	69 a5       	ldd	r22, Y+41	; 0x29
    2fa6:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fa8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2faa:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e8       	ldi	r20, 0x80	; 128
    2fb2:	5f e3       	ldi	r21, 0x3F	; 63
    2fb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb8:	88 23       	and	r24, r24
    2fba:	1c f4       	brge	.+6      	; 0x2fc2 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	88 a7       	std	Y+40, r24	; 0x28
    2fc0:	91 c0       	rjmp	.+290    	; 0x30e4 <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    2fc2:	69 a5       	ldd	r22, Y+41	; 0x29
    2fc4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	4f e7       	ldi	r20, 0x7F	; 127
    2fd0:	53 e4       	ldi	r21, 0x43	; 67
    2fd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fd6:	18 16       	cp	r1, r24
    2fd8:	0c f0       	brlt	.+2      	; 0x2fdc <LCD_ES_tTrigger_Enable+0x86>
    2fda:	7b c0       	rjmp	.+246    	; 0x30d2 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2fdc:	6d a5       	ldd	r22, Y+45	; 0x2d
    2fde:	7e a5       	ldd	r23, Y+46	; 0x2e
    2fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fe2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	4a e7       	ldi	r20, 0x7A	; 122
    2fea:	54 e4       	ldi	r21, 0x44	; 68
    2fec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	8c a3       	std	Y+36, r24	; 0x24
    2ff6:	9d a3       	std	Y+37, r25	; 0x25
    2ff8:	ae a3       	std	Y+38, r26	; 0x26
    2ffa:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffc:	6c a1       	ldd	r22, Y+36	; 0x24
    2ffe:	7d a1       	ldd	r23, Y+37	; 0x25
    3000:	8e a1       	ldd	r24, Y+38	; 0x26
    3002:	9f a1       	ldd	r25, Y+39	; 0x27
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	4a e7       	ldi	r20, 0x7A	; 122
    300a:	55 e4       	ldi	r21, 0x45	; 69
    300c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	88 a3       	std	Y+32, r24	; 0x20
    3016:	99 a3       	std	Y+33, r25	; 0x21
    3018:	aa a3       	std	Y+34, r26	; 0x22
    301a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    301c:	68 a1       	ldd	r22, Y+32	; 0x20
    301e:	79 a1       	ldd	r23, Y+33	; 0x21
    3020:	8a a1       	ldd	r24, Y+34	; 0x22
    3022:	9b a1       	ldd	r25, Y+35	; 0x23
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	40 e8       	ldi	r20, 0x80	; 128
    302a:	5f e3       	ldi	r21, 0x3F	; 63
    302c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3030:	88 23       	and	r24, r24
    3032:	2c f4       	brge	.+10     	; 0x303e <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	9f 8f       	std	Y+31, r25	; 0x1f
    303a:	8e 8f       	std	Y+30, r24	; 0x1e
    303c:	3f c0       	rjmp	.+126    	; 0x30bc <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    303e:	68 a1       	ldd	r22, Y+32	; 0x20
    3040:	79 a1       	ldd	r23, Y+33	; 0x21
    3042:	8a a1       	ldd	r24, Y+34	; 0x22
    3044:	9b a1       	ldd	r25, Y+35	; 0x23
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	3f ef       	ldi	r19, 0xFF	; 255
    304a:	4f e7       	ldi	r20, 0x7F	; 127
    304c:	57 e4       	ldi	r21, 0x47	; 71
    304e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3052:	18 16       	cp	r1, r24
    3054:	4c f5       	brge	.+82     	; 0x30a8 <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3056:	6c a1       	ldd	r22, Y+36	; 0x24
    3058:	7d a1       	ldd	r23, Y+37	; 0x25
    305a:	8e a1       	ldd	r24, Y+38	; 0x26
    305c:	9f a1       	ldd	r25, Y+39	; 0x27
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e2       	ldi	r20, 0x20	; 32
    3064:	51 e4       	ldi	r21, 0x41	; 65
    3066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	bc 01       	movw	r22, r24
    3070:	cd 01       	movw	r24, r26
    3072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	9f 8f       	std	Y+31, r25	; 0x1f
    307c:	8e 8f       	std	Y+30, r24	; 0x1e
    307e:	0f c0       	rjmp	.+30     	; 0x309e <LCD_ES_tTrigger_Enable+0x148>
    3080:	80 e9       	ldi	r24, 0x90	; 144
    3082:	91 e0       	ldi	r25, 0x01	; 1
    3084:	9d 8f       	std	Y+29, r25	; 0x1d
    3086:	8c 8f       	std	Y+28, r24	; 0x1c
    3088:	8c 8d       	ldd	r24, Y+28	; 0x1c
    308a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <LCD_ES_tTrigger_Enable+0x136>
    3090:	9d 8f       	std	Y+29, r25	; 0x1d
    3092:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3094:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3096:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	9f 8f       	std	Y+31, r25	; 0x1f
    309c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30a2:	00 97       	sbiw	r24, 0x00	; 0
    30a4:	69 f7       	brne	.-38     	; 0x3080 <LCD_ES_tTrigger_Enable+0x12a>
    30a6:	24 c0       	rjmp	.+72     	; 0x30f0 <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a8:	68 a1       	ldd	r22, Y+32	; 0x20
    30aa:	79 a1       	ldd	r23, Y+33	; 0x21
    30ac:	8a a1       	ldd	r24, Y+34	; 0x22
    30ae:	9b a1       	ldd	r25, Y+35	; 0x23
    30b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	9f 8f       	std	Y+31, r25	; 0x1f
    30ba:	8e 8f       	std	Y+30, r24	; 0x1e
    30bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30c0:	9b 8f       	std	Y+27, r25	; 0x1b
    30c2:	8a 8f       	std	Y+26, r24	; 0x1a
    30c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	f1 f7       	brne	.-4      	; 0x30c8 <LCD_ES_tTrigger_Enable+0x172>
    30cc:	9b 8f       	std	Y+27, r25	; 0x1b
    30ce:	8a 8f       	std	Y+26, r24	; 0x1a
    30d0:	0f c0       	rjmp	.+30     	; 0x30f0 <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30d2:	69 a5       	ldd	r22, Y+41	; 0x29
    30d4:	7a a5       	ldd	r23, Y+42	; 0x2a
    30d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    30d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    30da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	88 a7       	std	Y+40, r24	; 0x28
    30e4:	88 a5       	ldd	r24, Y+40	; 0x28
    30e6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30e8:	89 8d       	ldd	r24, Y+25	; 0x19
    30ea:	8a 95       	dec	r24
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <LCD_ES_tTrigger_Enable+0x194>
    30ee:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	60 e0       	ldi	r22, 0x00	; 0
    30f4:	40 e0       	ldi	r20, 0x00	; 0
    30f6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	aa ef       	ldi	r26, 0xFA	; 250
    3100:	b4 e4       	ldi	r27, 0x44	; 68
    3102:	8d 8b       	std	Y+21, r24	; 0x15
    3104:	9e 8b       	std	Y+22, r25	; 0x16
    3106:	af 8b       	std	Y+23, r26	; 0x17
    3108:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    310a:	6d 89       	ldd	r22, Y+21	; 0x15
    310c:	7e 89       	ldd	r23, Y+22	; 0x16
    310e:	8f 89       	ldd	r24, Y+23	; 0x17
    3110:	98 8d       	ldd	r25, Y+24	; 0x18
    3112:	2b ea       	ldi	r18, 0xAB	; 171
    3114:	3a ea       	ldi	r19, 0xAA	; 170
    3116:	4a ea       	ldi	r20, 0xAA	; 170
    3118:	50 e4       	ldi	r21, 0x40	; 64
    311a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	89 8b       	std	Y+17, r24	; 0x11
    3124:	9a 8b       	std	Y+18, r25	; 0x12
    3126:	ab 8b       	std	Y+19, r26	; 0x13
    3128:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    312a:	69 89       	ldd	r22, Y+17	; 0x11
    312c:	7a 89       	ldd	r23, Y+18	; 0x12
    312e:	8b 89       	ldd	r24, Y+19	; 0x13
    3130:	9c 89       	ldd	r25, Y+20	; 0x14
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	40 e8       	ldi	r20, 0x80	; 128
    3138:	5f e3       	ldi	r21, 0x3F	; 63
    313a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    313e:	88 23       	and	r24, r24
    3140:	1c f4       	brge	.+6      	; 0x3148 <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	88 8b       	std	Y+16, r24	; 0x10
    3146:	91 c0       	rjmp	.+290    	; 0x326a <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    3148:	69 89       	ldd	r22, Y+17	; 0x11
    314a:	7a 89       	ldd	r23, Y+18	; 0x12
    314c:	8b 89       	ldd	r24, Y+19	; 0x13
    314e:	9c 89       	ldd	r25, Y+20	; 0x14
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	4f e7       	ldi	r20, 0x7F	; 127
    3156:	53 e4       	ldi	r21, 0x43	; 67
    3158:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    315c:	18 16       	cp	r1, r24
    315e:	0c f0       	brlt	.+2      	; 0x3162 <LCD_ES_tTrigger_Enable+0x20c>
    3160:	7b c0       	rjmp	.+246    	; 0x3258 <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    3162:	6d 89       	ldd	r22, Y+21	; 0x15
    3164:	7e 89       	ldd	r23, Y+22	; 0x16
    3166:	8f 89       	ldd	r24, Y+23	; 0x17
    3168:	98 8d       	ldd	r25, Y+24	; 0x18
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	4a e7       	ldi	r20, 0x7A	; 122
    3170:	54 e4       	ldi	r21, 0x44	; 68
    3172:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	8c 87       	std	Y+12, r24	; 0x0c
    317c:	9d 87       	std	Y+13, r25	; 0x0d
    317e:	ae 87       	std	Y+14, r26	; 0x0e
    3180:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3182:	6c 85       	ldd	r22, Y+12	; 0x0c
    3184:	7d 85       	ldd	r23, Y+13	; 0x0d
    3186:	8e 85       	ldd	r24, Y+14	; 0x0e
    3188:	9f 85       	ldd	r25, Y+15	; 0x0f
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	4a e7       	ldi	r20, 0x7A	; 122
    3190:	55 e4       	ldi	r21, 0x45	; 69
    3192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	88 87       	std	Y+8, r24	; 0x08
    319c:	99 87       	std	Y+9, r25	; 0x09
    319e:	aa 87       	std	Y+10, r26	; 0x0a
    31a0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31a2:	68 85       	ldd	r22, Y+8	; 0x08
    31a4:	79 85       	ldd	r23, Y+9	; 0x09
    31a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	40 e8       	ldi	r20, 0x80	; 128
    31b0:	5f e3       	ldi	r21, 0x3F	; 63
    31b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b6:	88 23       	and	r24, r24
    31b8:	2c f4       	brge	.+10     	; 0x31c4 <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	9f 83       	std	Y+7, r25	; 0x07
    31c0:	8e 83       	std	Y+6, r24	; 0x06
    31c2:	3f c0       	rjmp	.+126    	; 0x3242 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    31c4:	68 85       	ldd	r22, Y+8	; 0x08
    31c6:	79 85       	ldd	r23, Y+9	; 0x09
    31c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	3f ef       	ldi	r19, 0xFF	; 255
    31d0:	4f e7       	ldi	r20, 0x7F	; 127
    31d2:	57 e4       	ldi	r21, 0x47	; 71
    31d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d8:	18 16       	cp	r1, r24
    31da:	4c f5       	brge	.+82     	; 0x322e <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    31de:	7d 85       	ldd	r23, Y+13	; 0x0d
    31e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    31e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e2       	ldi	r20, 0x20	; 32
    31ea:	51 e4       	ldi	r21, 0x41	; 65
    31ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	bc 01       	movw	r22, r24
    31f6:	cd 01       	movw	r24, r26
    31f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	9f 83       	std	Y+7, r25	; 0x07
    3202:	8e 83       	std	Y+6, r24	; 0x06
    3204:	0f c0       	rjmp	.+30     	; 0x3224 <LCD_ES_tTrigger_Enable+0x2ce>
    3206:	80 e9       	ldi	r24, 0x90	; 144
    3208:	91 e0       	ldi	r25, 0x01	; 1
    320a:	9d 83       	std	Y+5, r25	; 0x05
    320c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    320e:	8c 81       	ldd	r24, Y+4	; 0x04
    3210:	9d 81       	ldd	r25, Y+5	; 0x05
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	f1 f7       	brne	.-4      	; 0x3212 <LCD_ES_tTrigger_Enable+0x2bc>
    3216:	9d 83       	std	Y+5, r25	; 0x05
    3218:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321a:	8e 81       	ldd	r24, Y+6	; 0x06
    321c:	9f 81       	ldd	r25, Y+7	; 0x07
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	9f 83       	std	Y+7, r25	; 0x07
    3222:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3224:	8e 81       	ldd	r24, Y+6	; 0x06
    3226:	9f 81       	ldd	r25, Y+7	; 0x07
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	69 f7       	brne	.-38     	; 0x3206 <LCD_ES_tTrigger_Enable+0x2b0>
    322c:	24 c0       	rjmp	.+72     	; 0x3276 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322e:	68 85       	ldd	r22, Y+8	; 0x08
    3230:	79 85       	ldd	r23, Y+9	; 0x09
    3232:	8a 85       	ldd	r24, Y+10	; 0x0a
    3234:	9b 85       	ldd	r25, Y+11	; 0x0b
    3236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	9f 83       	std	Y+7, r25	; 0x07
    3240:	8e 83       	std	Y+6, r24	; 0x06
    3242:	8e 81       	ldd	r24, Y+6	; 0x06
    3244:	9f 81       	ldd	r25, Y+7	; 0x07
    3246:	9b 83       	std	Y+3, r25	; 0x03
    3248:	8a 83       	std	Y+2, r24	; 0x02
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	9b 81       	ldd	r25, Y+3	; 0x03
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	f1 f7       	brne	.-4      	; 0x324e <LCD_ES_tTrigger_Enable+0x2f8>
    3252:	9b 83       	std	Y+3, r25	; 0x03
    3254:	8a 83       	std	Y+2, r24	; 0x02
    3256:	0f c0       	rjmp	.+30     	; 0x3276 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3258:	69 89       	ldd	r22, Y+17	; 0x11
    325a:	7a 89       	ldd	r23, Y+18	; 0x12
    325c:	8b 89       	ldd	r24, Y+19	; 0x13
    325e:	9c 89       	ldd	r25, Y+20	; 0x14
    3260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	88 8b       	std	Y+16, r24	; 0x10
    326a:	88 89       	ldd	r24, Y+16	; 0x10
    326c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	8a 95       	dec	r24
    3272:	f1 f7       	brne	.-4      	; 0x3270 <LCD_ES_tTrigger_Enable+0x31a>
    3274:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    3276:	80 e0       	ldi	r24, 0x00	; 0
}
    3278:	e0 96       	adiw	r28, 0x30	; 48
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    328a:	df 93       	push	r29
    328c:	cf 93       	push	r28
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    3292:	82 e0       	ldi	r24, 0x02	; 2
    3294:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    3298:	88 e2       	ldi	r24, 0x28	; 40
    329a:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    329e:	8e e0       	ldi	r24, 0x0E	; 14
    32a0:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    32a4:	86 e0       	ldi	r24, 0x06	; 6
    32a6:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
	return ES_OK;
    32b0:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	08 95       	ret

000032b8 <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    32b8:	df 93       	push	r29
    32ba:	cf 93       	push	r28
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    32c0:	2e 97       	sbiw	r28, 0x0e	; 14
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	de bf       	out	0x3e, r29	; 62
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	a0 e0       	ldi	r26, 0x00	; 0
    32d8:	b0 e4       	ldi	r27, 0x40	; 64
    32da:	8b 87       	std	Y+11, r24	; 0x0b
    32dc:	9c 87       	std	Y+12, r25	; 0x0c
    32de:	ad 87       	std	Y+13, r26	; 0x0d
    32e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	4a e7       	ldi	r20, 0x7A	; 122
    32f0:	55 e4       	ldi	r21, 0x45	; 69
    32f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	8f 83       	std	Y+7, r24	; 0x07
    32fc:	98 87       	std	Y+8, r25	; 0x08
    32fe:	a9 87       	std	Y+9, r26	; 0x09
    3300:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3302:	6f 81       	ldd	r22, Y+7	; 0x07
    3304:	78 85       	ldd	r23, Y+8	; 0x08
    3306:	89 85       	ldd	r24, Y+9	; 0x09
    3308:	9a 85       	ldd	r25, Y+10	; 0x0a
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e8       	ldi	r20, 0x80	; 128
    3310:	5f e3       	ldi	r21, 0x3F	; 63
    3312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3316:	88 23       	and	r24, r24
    3318:	2c f4       	brge	.+10     	; 0x3324 <lcd_ES_tclear+0x6c>
		__ticks = 1;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	9e 83       	std	Y+6, r25	; 0x06
    3320:	8d 83       	std	Y+5, r24	; 0x05
    3322:	3f c0       	rjmp	.+126    	; 0x33a2 <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    3324:	6f 81       	ldd	r22, Y+7	; 0x07
    3326:	78 85       	ldd	r23, Y+8	; 0x08
    3328:	89 85       	ldd	r24, Y+9	; 0x09
    332a:	9a 85       	ldd	r25, Y+10	; 0x0a
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	3f ef       	ldi	r19, 0xFF	; 255
    3330:	4f e7       	ldi	r20, 0x7F	; 127
    3332:	57 e4       	ldi	r21, 0x47	; 71
    3334:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3338:	18 16       	cp	r1, r24
    333a:	4c f5       	brge	.+82     	; 0x338e <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333c:	6b 85       	ldd	r22, Y+11	; 0x0b
    333e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3340:	8d 85       	ldd	r24, Y+13	; 0x0d
    3342:	9e 85       	ldd	r25, Y+14	; 0x0e
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e2       	ldi	r20, 0x20	; 32
    334a:	51 e4       	ldi	r21, 0x41	; 65
    334c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9e 83       	std	Y+6, r25	; 0x06
    3362:	8d 83       	std	Y+5, r24	; 0x05
    3364:	0f c0       	rjmp	.+30     	; 0x3384 <lcd_ES_tclear+0xcc>
    3366:	80 e9       	ldi	r24, 0x90	; 144
    3368:	91 e0       	ldi	r25, 0x01	; 1
    336a:	9c 83       	std	Y+4, r25	; 0x04
    336c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    336e:	8b 81       	ldd	r24, Y+3	; 0x03
    3370:	9c 81       	ldd	r25, Y+4	; 0x04
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <lcd_ES_tclear+0xba>
    3376:	9c 83       	std	Y+4, r25	; 0x04
    3378:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337a:	8d 81       	ldd	r24, Y+5	; 0x05
    337c:	9e 81       	ldd	r25, Y+6	; 0x06
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	9e 83       	std	Y+6, r25	; 0x06
    3382:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3384:	8d 81       	ldd	r24, Y+5	; 0x05
    3386:	9e 81       	ldd	r25, Y+6	; 0x06
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	69 f7       	brne	.-38     	; 0x3366 <lcd_ES_tclear+0xae>
    338c:	14 c0       	rjmp	.+40     	; 0x33b6 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338e:	6f 81       	ldd	r22, Y+7	; 0x07
    3390:	78 85       	ldd	r23, Y+8	; 0x08
    3392:	89 85       	ldd	r24, Y+9	; 0x09
    3394:	9a 85       	ldd	r25, Y+10	; 0x0a
    3396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	9e 83       	std	Y+6, r25	; 0x06
    33a0:	8d 83       	std	Y+5, r24	; 0x05
    33a2:	8d 81       	ldd	r24, Y+5	; 0x05
    33a4:	9e 81       	ldd	r25, Y+6	; 0x06
    33a6:	9a 83       	std	Y+2, r25	; 0x02
    33a8:	89 83       	std	Y+1, r24	; 0x01
    33aa:	89 81       	ldd	r24, Y+1	; 0x01
    33ac:	9a 81       	ldd	r25, Y+2	; 0x02
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <lcd_ES_tclear+0xf6>
    33b2:	9a 83       	std	Y+2, r25	; 0x02
    33b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    33b6:	80 e0       	ldi	r24, 0x00	; 0
}
    33b8:	2e 96       	adiw	r28, 0x0e	; 14
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	0f 92       	push	r0
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	61 e0       	ldi	r22, 0x01	; 1
    33da:	40 e0       	ldi	r20, 0x00	; 0
    33dc:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    33e0:	89 81       	ldd	r24, Y+1	; 0x01
    33e2:	88 23       	and	r24, r24
    33e4:	34 f4       	brge	.+12     	; 0x33f2 <Lcd_ES_tsendCmd+0x28>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	66 e0       	ldi	r22, 0x06	; 6
    33ea:	41 e0       	ldi	r20, 0x01	; 1
    33ec:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    33f0:	05 c0       	rjmp	.+10     	; 0x33fc <Lcd_ES_tsendCmd+0x32>
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	66 e0       	ldi	r22, 0x06	; 6
    33f6:	40 e0       	ldi	r20, 0x00	; 0
    33f8:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    33fc:	89 81       	ldd	r24, Y+1	; 0x01
    33fe:	82 95       	swap	r24
    3400:	86 95       	lsr	r24
    3402:	86 95       	lsr	r24
    3404:	83 70       	andi	r24, 0x03	; 3
    3406:	88 2f       	mov	r24, r24
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	81 70       	andi	r24, 0x01	; 1
    340c:	90 70       	andi	r25, 0x00	; 0
    340e:	88 23       	and	r24, r24
    3410:	31 f0       	breq	.+12     	; 0x341e <Lcd_ES_tsendCmd+0x54>
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	65 e0       	ldi	r22, 0x05	; 5
    3416:	41 e0       	ldi	r20, 0x01	; 1
    3418:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    341c:	05 c0       	rjmp	.+10     	; 0x3428 <Lcd_ES_tsendCmd+0x5e>
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	65 e0       	ldi	r22, 0x05	; 5
    3422:	40 e0       	ldi	r20, 0x00	; 0
    3424:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	82 95       	swap	r24
    342c:	86 95       	lsr	r24
    342e:	87 70       	andi	r24, 0x07	; 7
    3430:	88 2f       	mov	r24, r24
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	81 70       	andi	r24, 0x01	; 1
    3436:	90 70       	andi	r25, 0x00	; 0
    3438:	88 23       	and	r24, r24
    343a:	31 f0       	breq	.+12     	; 0x3448 <Lcd_ES_tsendCmd+0x7e>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	64 e0       	ldi	r22, 0x04	; 4
    3440:	41 e0       	ldi	r20, 0x01	; 1
    3442:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3446:	05 c0       	rjmp	.+10     	; 0x3452 <Lcd_ES_tsendCmd+0x88>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	64 e0       	ldi	r22, 0x04	; 4
    344c:	40 e0       	ldi	r20, 0x00	; 0
    344e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	82 95       	swap	r24
    3456:	8f 70       	andi	r24, 0x0F	; 15
    3458:	88 2f       	mov	r24, r24
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	81 70       	andi	r24, 0x01	; 1
    345e:	90 70       	andi	r25, 0x00	; 0
    3460:	88 23       	and	r24, r24
    3462:	31 f0       	breq	.+12     	; 0x3470 <Lcd_ES_tsendCmd+0xa6>
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	63 e0       	ldi	r22, 0x03	; 3
    3468:	41 e0       	ldi	r20, 0x01	; 1
    346a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    346e:	05 c0       	rjmp	.+10     	; 0x347a <Lcd_ES_tsendCmd+0xb0>
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	63 e0       	ldi	r22, 0x03	; 3
    3474:	40 e0       	ldi	r20, 0x00	; 0
    3476:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    347a:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	86 95       	lsr	r24
    3482:	86 95       	lsr	r24
    3484:	86 95       	lsr	r24
    3486:	88 2f       	mov	r24, r24
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	81 70       	andi	r24, 0x01	; 1
    348c:	90 70       	andi	r25, 0x00	; 0
    348e:	88 23       	and	r24, r24
    3490:	31 f0       	breq	.+12     	; 0x349e <Lcd_ES_tsendCmd+0xd4>
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	66 e0       	ldi	r22, 0x06	; 6
    3496:	41 e0       	ldi	r20, 0x01	; 1
    3498:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    349c:	05 c0       	rjmp	.+10     	; 0x34a8 <Lcd_ES_tsendCmd+0xde>
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	66 e0       	ldi	r22, 0x06	; 6
    34a2:	40 e0       	ldi	r20, 0x00	; 0
    34a4:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	86 95       	lsr	r24
    34ac:	86 95       	lsr	r24
    34ae:	88 2f       	mov	r24, r24
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	81 70       	andi	r24, 0x01	; 1
    34b4:	90 70       	andi	r25, 0x00	; 0
    34b6:	88 23       	and	r24, r24
    34b8:	31 f0       	breq	.+12     	; 0x34c6 <Lcd_ES_tsendCmd+0xfc>
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	65 e0       	ldi	r22, 0x05	; 5
    34be:	41 e0       	ldi	r20, 0x01	; 1
    34c0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    34c4:	05 c0       	rjmp	.+10     	; 0x34d0 <Lcd_ES_tsendCmd+0x106>
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	65 e0       	ldi	r22, 0x05	; 5
    34ca:	40 e0       	ldi	r20, 0x00	; 0
    34cc:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    34d0:	89 81       	ldd	r24, Y+1	; 0x01
    34d2:	86 95       	lsr	r24
    34d4:	88 2f       	mov	r24, r24
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	81 70       	andi	r24, 0x01	; 1
    34da:	90 70       	andi	r25, 0x00	; 0
    34dc:	88 23       	and	r24, r24
    34de:	31 f0       	breq	.+12     	; 0x34ec <Lcd_ES_tsendCmd+0x122>
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	64 e0       	ldi	r22, 0x04	; 4
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    34ea:	05 c0       	rjmp	.+10     	; 0x34f6 <Lcd_ES_tsendCmd+0x12c>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	64 e0       	ldi	r22, 0x04	; 4
    34f0:	40 e0       	ldi	r20, 0x00	; 0
    34f2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	88 2f       	mov	r24, r24
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	81 70       	andi	r24, 0x01	; 1
    34fe:	90 70       	andi	r25, 0x00	; 0
    3500:	88 23       	and	r24, r24
    3502:	31 f0       	breq	.+12     	; 0x3510 <Lcd_ES_tsendCmd+0x146>
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	63 e0       	ldi	r22, 0x03	; 3
    3508:	41 e0       	ldi	r20, 0x01	; 1
    350a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    350e:	05 c0       	rjmp	.+10     	; 0x351a <Lcd_ES_tsendCmd+0x150>
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	63 e0       	ldi	r22, 0x03	; 3
    3514:	40 e0       	ldi	r20, 0x00	; 0
    3516:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    351a:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    351e:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    3520:	0f 90       	pop	r0
    3522:	cf 91       	pop	r28
    3524:	df 91       	pop	r29
    3526:	08 95       	ret

00003528 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    3528:	df 93       	push	r29
    352a:	cf 93       	push	r28
    352c:	0f 92       	push	r0
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	61 e0       	ldi	r22, 0x01	; 1
    3538:	41 e0       	ldi	r20, 0x01	; 1
    353a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	88 23       	and	r24, r24
    3542:	34 f4       	brge	.+12     	; 0x3550 <Lcd_ES_tsendChar+0x28>
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	66 e0       	ldi	r22, 0x06	; 6
    3548:	41 e0       	ldi	r20, 0x01	; 1
    354a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    354e:	05 c0       	rjmp	.+10     	; 0x355a <Lcd_ES_tsendChar+0x32>
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	66 e0       	ldi	r22, 0x06	; 6
    3554:	40 e0       	ldi	r20, 0x00	; 0
    3556:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	82 95       	swap	r24
    355e:	86 95       	lsr	r24
    3560:	86 95       	lsr	r24
    3562:	83 70       	andi	r24, 0x03	; 3
    3564:	88 2f       	mov	r24, r24
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	81 70       	andi	r24, 0x01	; 1
    356a:	90 70       	andi	r25, 0x00	; 0
    356c:	88 23       	and	r24, r24
    356e:	31 f0       	breq	.+12     	; 0x357c <Lcd_ES_tsendChar+0x54>
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	65 e0       	ldi	r22, 0x05	; 5
    3574:	41 e0       	ldi	r20, 0x01	; 1
    3576:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    357a:	05 c0       	rjmp	.+10     	; 0x3586 <Lcd_ES_tsendChar+0x5e>
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	65 e0       	ldi	r22, 0x05	; 5
    3580:	40 e0       	ldi	r20, 0x00	; 0
    3582:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    3586:	89 81       	ldd	r24, Y+1	; 0x01
    3588:	82 95       	swap	r24
    358a:	86 95       	lsr	r24
    358c:	87 70       	andi	r24, 0x07	; 7
    358e:	88 2f       	mov	r24, r24
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	81 70       	andi	r24, 0x01	; 1
    3594:	90 70       	andi	r25, 0x00	; 0
    3596:	88 23       	and	r24, r24
    3598:	31 f0       	breq	.+12     	; 0x35a6 <Lcd_ES_tsendChar+0x7e>
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	64 e0       	ldi	r22, 0x04	; 4
    359e:	41 e0       	ldi	r20, 0x01	; 1
    35a0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    35a4:	05 c0       	rjmp	.+10     	; 0x35b0 <Lcd_ES_tsendChar+0x88>
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	64 e0       	ldi	r22, 0x04	; 4
    35aa:	40 e0       	ldi	r20, 0x00	; 0
    35ac:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    35b0:	89 81       	ldd	r24, Y+1	; 0x01
    35b2:	82 95       	swap	r24
    35b4:	8f 70       	andi	r24, 0x0F	; 15
    35b6:	88 2f       	mov	r24, r24
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	81 70       	andi	r24, 0x01	; 1
    35bc:	90 70       	andi	r25, 0x00	; 0
    35be:	88 23       	and	r24, r24
    35c0:	31 f0       	breq	.+12     	; 0x35ce <Lcd_ES_tsendChar+0xa6>
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	63 e0       	ldi	r22, 0x03	; 3
    35c6:	41 e0       	ldi	r20, 0x01	; 1
    35c8:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    35cc:	05 c0       	rjmp	.+10     	; 0x35d8 <Lcd_ES_tsendChar+0xb0>
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	63 e0       	ldi	r22, 0x03	; 3
    35d2:	40 e0       	ldi	r20, 0x00	; 0
    35d4:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    35d8:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	86 95       	lsr	r24
    35e0:	86 95       	lsr	r24
    35e2:	86 95       	lsr	r24
    35e4:	88 2f       	mov	r24, r24
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	81 70       	andi	r24, 0x01	; 1
    35ea:	90 70       	andi	r25, 0x00	; 0
    35ec:	88 23       	and	r24, r24
    35ee:	31 f0       	breq	.+12     	; 0x35fc <Lcd_ES_tsendChar+0xd4>
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	66 e0       	ldi	r22, 0x06	; 6
    35f4:	41 e0       	ldi	r20, 0x01	; 1
    35f6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    35fa:	05 c0       	rjmp	.+10     	; 0x3606 <Lcd_ES_tsendChar+0xde>
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	66 e0       	ldi	r22, 0x06	; 6
    3600:	40 e0       	ldi	r20, 0x00	; 0
    3602:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    3606:	89 81       	ldd	r24, Y+1	; 0x01
    3608:	86 95       	lsr	r24
    360a:	86 95       	lsr	r24
    360c:	88 2f       	mov	r24, r24
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	81 70       	andi	r24, 0x01	; 1
    3612:	90 70       	andi	r25, 0x00	; 0
    3614:	88 23       	and	r24, r24
    3616:	31 f0       	breq	.+12     	; 0x3624 <Lcd_ES_tsendChar+0xfc>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	65 e0       	ldi	r22, 0x05	; 5
    361c:	41 e0       	ldi	r20, 0x01	; 1
    361e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3622:	05 c0       	rjmp	.+10     	; 0x362e <Lcd_ES_tsendChar+0x106>
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	65 e0       	ldi	r22, 0x05	; 5
    3628:	40 e0       	ldi	r20, 0x00	; 0
    362a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	86 95       	lsr	r24
    3632:	88 2f       	mov	r24, r24
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	81 70       	andi	r24, 0x01	; 1
    3638:	90 70       	andi	r25, 0x00	; 0
    363a:	88 23       	and	r24, r24
    363c:	31 f0       	breq	.+12     	; 0x364a <Lcd_ES_tsendChar+0x122>
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	64 e0       	ldi	r22, 0x04	; 4
    3642:	41 e0       	ldi	r20, 0x01	; 1
    3644:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    3648:	05 c0       	rjmp	.+10     	; 0x3654 <Lcd_ES_tsendChar+0x12c>
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	64 e0       	ldi	r22, 0x04	; 4
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    3654:	89 81       	ldd	r24, Y+1	; 0x01
    3656:	88 2f       	mov	r24, r24
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	81 70       	andi	r24, 0x01	; 1
    365c:	90 70       	andi	r25, 0x00	; 0
    365e:	88 23       	and	r24, r24
    3660:	31 f0       	breq	.+12     	; 0x366e <Lcd_ES_tsendChar+0x146>
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	63 e0       	ldi	r22, 0x03	; 3
    3666:	41 e0       	ldi	r20, 0x01	; 1
    3668:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    366c:	05 c0       	rjmp	.+10     	; 0x3678 <Lcd_ES_tsendChar+0x150>
    366e:	80 e0       	ldi	r24, 0x00	; 0
    3670:	63 e0       	ldi	r22, 0x03	; 3
    3672:	40 e0       	ldi	r20, 0x00	; 0
    3674:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3678:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    367c:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    367e:	0f 90       	pop	r0
    3680:	cf 91       	pop	r28
    3682:	df 91       	pop	r29
    3684:	08 95       	ret

00003686 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	00 d0       	rcall	.+0      	; 0x368c <Lcd_ES_tsendString+0x6>
    368c:	0f 92       	push	r0
    368e:	cd b7       	in	r28, 0x3d	; 61
    3690:	de b7       	in	r29, 0x3e	; 62
    3692:	9b 83       	std	Y+3, r25	; 0x03
    3694:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	61 e0       	ldi	r22, 0x01	; 1
    369a:	41 e0       	ldi	r20, 0x01	; 1
    369c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>

	unsigned char i=0;
    36a0:	19 82       	std	Y+1, r1	; 0x01
    36a2:	0e c0       	rjmp	.+28     	; 0x36c0 <Lcd_ES_tsendString+0x3a>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    36a4:	89 81       	ldd	r24, Y+1	; 0x01
    36a6:	28 2f       	mov	r18, r24
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	8a 81       	ldd	r24, Y+2	; 0x02
    36ac:	9b 81       	ldd	r25, Y+3	; 0x03
    36ae:	fc 01       	movw	r30, r24
    36b0:	e2 0f       	add	r30, r18
    36b2:	f3 1f       	adc	r31, r19
    36b4:	80 81       	ld	r24, Z
    36b6:	0e 94 94 1a 	call	0x3528	; 0x3528 <Lcd_ES_tsendChar>
		i++;
    36ba:	89 81       	ldd	r24, Y+1	; 0x01
    36bc:	8f 5f       	subi	r24, 0xFF	; 255
    36be:	89 83       	std	Y+1, r24	; 0x01
ES_t Lcd_ES_tsendString(char *data)
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);

	unsigned char i=0;
	while(data[i]!=0)
    36c0:	89 81       	ldd	r24, Y+1	; 0x01
    36c2:	28 2f       	mov	r18, r24
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ca:	fc 01       	movw	r30, r24
    36cc:	e2 0f       	add	r30, r18
    36ce:	f3 1f       	adc	r31, r19
    36d0:	80 81       	ld	r24, Z
    36d2:	88 23       	and	r24, r24
    36d4:	39 f7       	brne	.-50     	; 0x36a4 <Lcd_ES_tsendString+0x1e>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    36d6:	80 e0       	ldi	r24, 0x00	; 0
}
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	cf 91       	pop	r28
    36e0:	df 91       	pop	r29
    36e2:	08 95       	ret

000036e4 <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    36e4:	df 93       	push	r29
    36e6:	cf 93       	push	r28
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <Lcd_ES_tsendString_xy+0x6>
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <Lcd_ES_tsendString_xy+0x8>
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	9a 83       	std	Y+2, r25	; 0x02
    36f2:	89 83       	std	Y+1, r24	; 0x01
    36f4:	6b 83       	std	Y+3, r22	; 0x03
    36f6:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	61 e0       	ldi	r22, 0x01	; 1
    36fc:	41 e0       	ldi	r20, 0x01	; 1
    36fe:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>


	LCD_ES_tSet_Cursor_Pos(row,col);
    3702:	8b 81       	ldd	r24, Y+3	; 0x03
    3704:	6c 81       	ldd	r22, Y+4	; 0x04
    3706:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    370a:	89 81       	ldd	r24, Y+1	; 0x01
    370c:	9a 81       	ldd	r25, Y+2	; 0x02
    370e:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
	return ES_OK;
    3712:	80 e0       	ldi	r24, 0x00	; 0

}
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	0f 90       	pop	r0
    371c:	cf 91       	pop	r28
    371e:	df 91       	pop	r29
    3720:	08 95       	ret

00003722 <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    3722:	df 93       	push	r29
    3724:	cf 93       	push	r28
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
    372a:	2e 97       	sbiw	r28, 0x0e	; 14
    372c:	0f b6       	in	r0, 0x3f	; 63
    372e:	f8 94       	cli
    3730:	de bf       	out	0x3e, r29	; 62
    3732:	0f be       	out	0x3f, r0	; 63
    3734:	cd bf       	out	0x3d, r28	; 61
    3736:	9e 87       	std	Y+14, r25	; 0x0e
    3738:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	61 e0       	ldi	r22, 0x01	; 1
    373e:	41 e0       	ldi	r20, 0x01	; 1
    3740:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>


	uint8_t ch[10],i=0,j=0;
    3744:	1a 82       	std	Y+2, r1	; 0x02
    3746:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    3748:	8d 85       	ldd	r24, Y+13	; 0x0d
    374a:	9e 85       	ldd	r25, Y+14	; 0x0e
    374c:	00 97       	sbiw	r24, 0x00	; 0
    374e:	11 f5       	brne	.+68     	; 0x3794 <Lcd_ES_tdisplayNum+0x72>
	{
		Lcd_ES_tsendChar('0');
    3750:	80 e3       	ldi	r24, 0x30	; 48
    3752:	0e 94 94 1a 	call	0x3528	; 0x3528 <Lcd_ES_tsendChar>
    3756:	39 c0       	rjmp	.+114    	; 0x37ca <Lcd_ES_tdisplayNum+0xa8>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    3758:	8a 81       	ldd	r24, Y+2	; 0x02
    375a:	e8 2f       	mov	r30, r24
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3760:	9e 85       	ldd	r25, Y+14	; 0x0e
    3762:	2a e0       	ldi	r18, 0x0A	; 10
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	b9 01       	movw	r22, r18
    3768:	0e 94 78 29 	call	0x52f0	; 0x52f0 <__udivmodhi4>
    376c:	28 2f       	mov	r18, r24
    376e:	20 5d       	subi	r18, 0xD0	; 208
    3770:	ce 01       	movw	r24, r28
    3772:	03 96       	adiw	r24, 0x03	; 3
    3774:	e8 0f       	add	r30, r24
    3776:	f9 1f       	adc	r31, r25
    3778:	20 83       	st	Z, r18
			num /= 10;
    377a:	8d 85       	ldd	r24, Y+13	; 0x0d
    377c:	9e 85       	ldd	r25, Y+14	; 0x0e
    377e:	2a e0       	ldi	r18, 0x0A	; 10
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	b9 01       	movw	r22, r18
    3784:	0e 94 78 29 	call	0x52f0	; 0x52f0 <__udivmodhi4>
    3788:	cb 01       	movw	r24, r22
    378a:	9e 87       	std	Y+14, r25	; 0x0e
    378c:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	8f 5f       	subi	r24, 0xFF	; 255
    3792:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    3794:	8d 85       	ldd	r24, Y+13	; 0x0d
    3796:	9e 85       	ldd	r25, Y+14	; 0x0e
    3798:	00 97       	sbiw	r24, 0x00	; 0
    379a:	f1 f6       	brne	.-68     	; 0x3758 <Lcd_ES_tdisplayNum+0x36>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    379c:	8a 81       	ldd	r24, Y+2	; 0x02
    379e:	89 83       	std	Y+1, r24	; 0x01
    37a0:	11 c0       	rjmp	.+34     	; 0x37c4 <Lcd_ES_tdisplayNum+0xa2>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	88 2f       	mov	r24, r24
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	9c 01       	movw	r18, r24
    37aa:	21 50       	subi	r18, 0x01	; 1
    37ac:	30 40       	sbci	r19, 0x00	; 0
    37ae:	ce 01       	movw	r24, r28
    37b0:	03 96       	adiw	r24, 0x03	; 3
    37b2:	fc 01       	movw	r30, r24
    37b4:	e2 0f       	add	r30, r18
    37b6:	f3 1f       	adc	r31, r19
    37b8:	80 81       	ld	r24, Z
    37ba:	0e 94 94 1a 	call	0x3528	; 0x3528 <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	81 50       	subi	r24, 0x01	; 1
    37c2:	89 83       	std	Y+1, r24	; 0x01
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	88 23       	and	r24, r24
    37c8:	61 f7       	brne	.-40     	; 0x37a2 <Lcd_ES_tdisplayNum+0x80>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    37ca:	80 e0       	ldi	r24, 0x00	; 0
}
    37cc:	2e 96       	adiw	r28, 0x0e	; 14
    37ce:	0f b6       	in	r0, 0x3f	; 63
    37d0:	f8 94       	cli
    37d2:	de bf       	out	0x3e, r29	; 62
    37d4:	0f be       	out	0x3f, r0	; 63
    37d6:	cd bf       	out	0x3d, r28	; 61
    37d8:	cf 91       	pop	r28
    37da:	df 91       	pop	r29
    37dc:	08 95       	ret

000037de <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    37de:	df 93       	push	r29
    37e0:	cf 93       	push	r28
    37e2:	cd b7       	in	r28, 0x3d	; 61
    37e4:	de b7       	in	r29, 0x3e	; 62
    37e6:	a3 97       	sbiw	r28, 0x23	; 35
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	f8 94       	cli
    37ec:	de bf       	out	0x3e, r29	; 62
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	cd bf       	out	0x3d, r28	; 61
    37f2:	98 a3       	std	Y+32, r25	; 0x20
    37f4:	8f 8f       	std	Y+31, r24	; 0x1f
    37f6:	69 a3       	std	Y+33, r22	; 0x21
    37f8:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	61 e0       	ldi	r22, 0x01	; 1
    37fe:	41 e0       	ldi	r20, 0x01	; 1
    3800:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>


	if(row == 1){
    3804:	89 a1       	ldd	r24, Y+33	; 0x21
    3806:	81 30       	cpi	r24, 0x01	; 1
    3808:	09 f0       	breq	.+2      	; 0x380c <Lcd_ES_tdisplayNum_xy+0x2e>
    380a:	76 c0       	rjmp	.+236    	; 0x38f8 <Lcd_ES_tdisplayNum_xy+0x11a>
		Lcd_ES_tsendCmd(Force1stline);
    380c:	80 e8       	ldi	r24, 0x80	; 128
    380e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	a0 e8       	ldi	r26, 0x80	; 128
    3818:	bf e3       	ldi	r27, 0x3F	; 63
    381a:	89 8f       	std	Y+25, r24	; 0x19
    381c:	9a 8f       	std	Y+26, r25	; 0x1a
    381e:	ab 8f       	std	Y+27, r26	; 0x1b
    3820:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3822:	69 8d       	ldd	r22, Y+25	; 0x19
    3824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	4a e7       	ldi	r20, 0x7A	; 122
    3830:	55 e4       	ldi	r21, 0x45	; 69
    3832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	8d 8b       	std	Y+21, r24	; 0x15
    383c:	9e 8b       	std	Y+22, r25	; 0x16
    383e:	af 8b       	std	Y+23, r26	; 0x17
    3840:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3842:	6d 89       	ldd	r22, Y+21	; 0x15
    3844:	7e 89       	ldd	r23, Y+22	; 0x16
    3846:	8f 89       	ldd	r24, Y+23	; 0x17
    3848:	98 8d       	ldd	r25, Y+24	; 0x18
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e8       	ldi	r20, 0x80	; 128
    3850:	5f e3       	ldi	r21, 0x3F	; 63
    3852:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3856:	88 23       	and	r24, r24
    3858:	2c f4       	brge	.+10     	; 0x3864 <Lcd_ES_tdisplayNum_xy+0x86>
		__ticks = 1;
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	9c 8b       	std	Y+20, r25	; 0x14
    3860:	8b 8b       	std	Y+19, r24	; 0x13
    3862:	3f c0       	rjmp	.+126    	; 0x38e2 <Lcd_ES_tdisplayNum_xy+0x104>
	else if (__tmp > 65535)
    3864:	6d 89       	ldd	r22, Y+21	; 0x15
    3866:	7e 89       	ldd	r23, Y+22	; 0x16
    3868:	8f 89       	ldd	r24, Y+23	; 0x17
    386a:	98 8d       	ldd	r25, Y+24	; 0x18
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	3f ef       	ldi	r19, 0xFF	; 255
    3870:	4f e7       	ldi	r20, 0x7F	; 127
    3872:	57 e4       	ldi	r21, 0x47	; 71
    3874:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3878:	18 16       	cp	r1, r24
    387a:	4c f5       	brge	.+82     	; 0x38ce <Lcd_ES_tdisplayNum_xy+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    387c:	69 8d       	ldd	r22, Y+25	; 0x19
    387e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	40 e2       	ldi	r20, 0x20	; 32
    388a:	51 e4       	ldi	r21, 0x41	; 65
    388c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3890:	dc 01       	movw	r26, r24
    3892:	cb 01       	movw	r24, r22
    3894:	bc 01       	movw	r22, r24
    3896:	cd 01       	movw	r24, r26
    3898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	9c 8b       	std	Y+20, r25	; 0x14
    38a2:	8b 8b       	std	Y+19, r24	; 0x13
    38a4:	0f c0       	rjmp	.+30     	; 0x38c4 <Lcd_ES_tdisplayNum_xy+0xe6>
    38a6:	80 e9       	ldi	r24, 0x90	; 144
    38a8:	91 e0       	ldi	r25, 0x01	; 1
    38aa:	9a 8b       	std	Y+18, r25	; 0x12
    38ac:	89 8b       	std	Y+17, r24	; 0x11
    38ae:	89 89       	ldd	r24, Y+17	; 0x11
    38b0:	9a 89       	ldd	r25, Y+18	; 0x12
    38b2:	01 97       	sbiw	r24, 0x01	; 1
    38b4:	f1 f7       	brne	.-4      	; 0x38b2 <Lcd_ES_tdisplayNum_xy+0xd4>
    38b6:	9a 8b       	std	Y+18, r25	; 0x12
    38b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ba:	8b 89       	ldd	r24, Y+19	; 0x13
    38bc:	9c 89       	ldd	r25, Y+20	; 0x14
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	9c 8b       	std	Y+20, r25	; 0x14
    38c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c4:	8b 89       	ldd	r24, Y+19	; 0x13
    38c6:	9c 89       	ldd	r25, Y+20	; 0x14
    38c8:	00 97       	sbiw	r24, 0x00	; 0
    38ca:	69 f7       	brne	.-38     	; 0x38a6 <Lcd_ES_tdisplayNum_xy+0xc8>
    38cc:	92 c0       	rjmp	.+292    	; 0x39f2 <Lcd_ES_tdisplayNum_xy+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ce:	6d 89       	ldd	r22, Y+21	; 0x15
    38d0:	7e 89       	ldd	r23, Y+22	; 0x16
    38d2:	8f 89       	ldd	r24, Y+23	; 0x17
    38d4:	98 8d       	ldd	r25, Y+24	; 0x18
    38d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	9c 8b       	std	Y+20, r25	; 0x14
    38e0:	8b 8b       	std	Y+19, r24	; 0x13
    38e2:	8b 89       	ldd	r24, Y+19	; 0x13
    38e4:	9c 89       	ldd	r25, Y+20	; 0x14
    38e6:	98 8b       	std	Y+16, r25	; 0x10
    38e8:	8f 87       	std	Y+15, r24	; 0x0f
    38ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ec:	98 89       	ldd	r25, Y+16	; 0x10
    38ee:	01 97       	sbiw	r24, 0x01	; 1
    38f0:	f1 f7       	brne	.-4      	; 0x38ee <Lcd_ES_tdisplayNum_xy+0x110>
    38f2:	98 8b       	std	Y+16, r25	; 0x10
    38f4:	8f 87       	std	Y+15, r24	; 0x0f
    38f6:	7d c0       	rjmp	.+250    	; 0x39f2 <Lcd_ES_tdisplayNum_xy+0x214>
		_delay_ms(1);
	}else if(row == 2){
    38f8:	89 a1       	ldd	r24, Y+33	; 0x21
    38fa:	82 30       	cpi	r24, 0x02	; 2
    38fc:	09 f0       	breq	.+2      	; 0x3900 <Lcd_ES_tdisplayNum_xy+0x122>
    38fe:	76 c0       	rjmp	.+236    	; 0x39ec <Lcd_ES_tdisplayNum_xy+0x20e>
		Lcd_ES_tsendCmd(Force2ndline);
    3900:	80 ec       	ldi	r24, 0xC0	; 192
    3902:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	a0 e2       	ldi	r26, 0x20	; 32
    390c:	b1 e4       	ldi	r27, 0x41	; 65
    390e:	8b 87       	std	Y+11, r24	; 0x0b
    3910:	9c 87       	std	Y+12, r25	; 0x0c
    3912:	ad 87       	std	Y+13, r26	; 0x0d
    3914:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3916:	6b 85       	ldd	r22, Y+11	; 0x0b
    3918:	7c 85       	ldd	r23, Y+12	; 0x0c
    391a:	8d 85       	ldd	r24, Y+13	; 0x0d
    391c:	9e 85       	ldd	r25, Y+14	; 0x0e
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	4a e7       	ldi	r20, 0x7A	; 122
    3924:	55 e4       	ldi	r21, 0x45	; 69
    3926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	8f 83       	std	Y+7, r24	; 0x07
    3930:	98 87       	std	Y+8, r25	; 0x08
    3932:	a9 87       	std	Y+9, r26	; 0x09
    3934:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3936:	6f 81       	ldd	r22, Y+7	; 0x07
    3938:	78 85       	ldd	r23, Y+8	; 0x08
    393a:	89 85       	ldd	r24, Y+9	; 0x09
    393c:	9a 85       	ldd	r25, Y+10	; 0x0a
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	40 e8       	ldi	r20, 0x80	; 128
    3944:	5f e3       	ldi	r21, 0x3F	; 63
    3946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    394a:	88 23       	and	r24, r24
    394c:	2c f4       	brge	.+10     	; 0x3958 <Lcd_ES_tdisplayNum_xy+0x17a>
		__ticks = 1;
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	9e 83       	std	Y+6, r25	; 0x06
    3954:	8d 83       	std	Y+5, r24	; 0x05
    3956:	3f c0       	rjmp	.+126    	; 0x39d6 <Lcd_ES_tdisplayNum_xy+0x1f8>
	else if (__tmp > 65535)
    3958:	6f 81       	ldd	r22, Y+7	; 0x07
    395a:	78 85       	ldd	r23, Y+8	; 0x08
    395c:	89 85       	ldd	r24, Y+9	; 0x09
    395e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	3f ef       	ldi	r19, 0xFF	; 255
    3964:	4f e7       	ldi	r20, 0x7F	; 127
    3966:	57 e4       	ldi	r21, 0x47	; 71
    3968:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    396c:	18 16       	cp	r1, r24
    396e:	4c f5       	brge	.+82     	; 0x39c2 <Lcd_ES_tdisplayNum_xy+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3970:	6b 85       	ldd	r22, Y+11	; 0x0b
    3972:	7c 85       	ldd	r23, Y+12	; 0x0c
    3974:	8d 85       	ldd	r24, Y+13	; 0x0d
    3976:	9e 85       	ldd	r25, Y+14	; 0x0e
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	40 e2       	ldi	r20, 0x20	; 32
    397e:	51 e4       	ldi	r21, 0x41	; 65
    3980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	bc 01       	movw	r22, r24
    398a:	cd 01       	movw	r24, r26
    398c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	9e 83       	std	Y+6, r25	; 0x06
    3996:	8d 83       	std	Y+5, r24	; 0x05
    3998:	0f c0       	rjmp	.+30     	; 0x39b8 <Lcd_ES_tdisplayNum_xy+0x1da>
    399a:	80 e9       	ldi	r24, 0x90	; 144
    399c:	91 e0       	ldi	r25, 0x01	; 1
    399e:	9c 83       	std	Y+4, r25	; 0x04
    39a0:	8b 83       	std	Y+3, r24	; 0x03
    39a2:	8b 81       	ldd	r24, Y+3	; 0x03
    39a4:	9c 81       	ldd	r25, Y+4	; 0x04
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	f1 f7       	brne	.-4      	; 0x39a6 <Lcd_ES_tdisplayNum_xy+0x1c8>
    39aa:	9c 83       	std	Y+4, r25	; 0x04
    39ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ae:	8d 81       	ldd	r24, Y+5	; 0x05
    39b0:	9e 81       	ldd	r25, Y+6	; 0x06
    39b2:	01 97       	sbiw	r24, 0x01	; 1
    39b4:	9e 83       	std	Y+6, r25	; 0x06
    39b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ba:	9e 81       	ldd	r25, Y+6	; 0x06
    39bc:	00 97       	sbiw	r24, 0x00	; 0
    39be:	69 f7       	brne	.-38     	; 0x399a <Lcd_ES_tdisplayNum_xy+0x1bc>
    39c0:	18 c0       	rjmp	.+48     	; 0x39f2 <Lcd_ES_tdisplayNum_xy+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c2:	6f 81       	ldd	r22, Y+7	; 0x07
    39c4:	78 85       	ldd	r23, Y+8	; 0x08
    39c6:	89 85       	ldd	r24, Y+9	; 0x09
    39c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	9e 83       	std	Y+6, r25	; 0x06
    39d4:	8d 83       	std	Y+5, r24	; 0x05
    39d6:	8d 81       	ldd	r24, Y+5	; 0x05
    39d8:	9e 81       	ldd	r25, Y+6	; 0x06
    39da:	9a 83       	std	Y+2, r25	; 0x02
    39dc:	89 83       	std	Y+1, r24	; 0x01
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	9a 81       	ldd	r25, Y+2	; 0x02
    39e2:	01 97       	sbiw	r24, 0x01	; 1
    39e4:	f1 f7       	brne	.-4      	; 0x39e2 <Lcd_ES_tdisplayNum_xy+0x204>
    39e6:	9a 83       	std	Y+2, r25	; 0x02
    39e8:	89 83       	std	Y+1, r24	; 0x01
    39ea:	03 c0       	rjmp	.+6      	; 0x39f2 <Lcd_ES_tdisplayNum_xy+0x214>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	8b a3       	std	Y+35, r24	; 0x23
    39f0:	1a c0       	rjmp	.+52     	; 0x3a26 <Lcd_ES_tdisplayNum_xy+0x248>
	}


	for(int j=1;j<=col;j++){
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	9e 8f       	std	Y+30, r25	; 0x1e
    39f8:	8d 8f       	std	Y+29, r24	; 0x1d
    39fa:	08 c0       	rjmp	.+16     	; 0x3a0c <Lcd_ES_tdisplayNum_xy+0x22e>
		Lcd_ES_tsendCmd(ShiftRight);
    39fc:	8c e1       	ldi	r24, 0x1C	; 28
    39fe:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    3a02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a06:	01 96       	adiw	r24, 0x01	; 1
    3a08:	9e 8f       	std	Y+30, r25	; 0x1e
    3a0a:	8d 8f       	std	Y+29, r24	; 0x1d
    3a0c:	8a a1       	ldd	r24, Y+34	; 0x22
    3a0e:	28 2f       	mov	r18, r24
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a16:	28 17       	cp	r18, r24
    3a18:	39 07       	cpc	r19, r25
    3a1a:	84 f7       	brge	.-32     	; 0x39fc <Lcd_ES_tdisplayNum_xy+0x21e>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    3a1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a1e:	98 a1       	ldd	r25, Y+32	; 0x20
    3a20:	0e 94 91 1b 	call	0x3722	; 0x3722 <Lcd_ES_tdisplayNum>
	return ES_OK;
    3a24:	1b a2       	std	Y+35, r1	; 0x23
    3a26:	8b a1       	ldd	r24, Y+35	; 0x23

}
    3a28:	a3 96       	adiw	r28, 0x23	; 35
    3a2a:	0f b6       	in	r0, 0x3f	; 63
    3a2c:	f8 94       	cli
    3a2e:	de bf       	out	0x3e, r29	; 62
    3a30:	0f be       	out	0x3f, r0	; 63
    3a32:	cd bf       	out	0x3d, r28	; 61
    3a34:	cf 91       	pop	r28
    3a36:	df 91       	pop	r29
    3a38:	08 95       	ret

00003a3a <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	a2 97       	sbiw	r28, 0x22	; 34
    3a44:	0f b6       	in	r0, 0x3f	; 63
    3a46:	f8 94       	cli
    3a48:	de bf       	out	0x3e, r29	; 62
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	cd bf       	out	0x3d, r28	; 61
    3a4e:	8f 8f       	std	Y+31, r24	; 0x1f
    3a50:	68 a3       	std	Y+32, r22	; 0x20
    3a52:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	61 e0       	ldi	r22, 0x01	; 1
    3a58:	41 e0       	ldi	r20, 0x01	; 1
    3a5a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>


	if(row == 1){
    3a5e:	88 a1       	ldd	r24, Y+32	; 0x20
    3a60:	81 30       	cpi	r24, 0x01	; 1
    3a62:	09 f0       	breq	.+2      	; 0x3a66 <Lcd_ES_tsendChar_xy+0x2c>
    3a64:	76 c0       	rjmp	.+236    	; 0x3b52 <Lcd_ES_tsendChar_xy+0x118>
		Lcd_ES_tsendCmd(Force1stline);
    3a66:	80 e8       	ldi	r24, 0x80	; 128
    3a68:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	a0 e8       	ldi	r26, 0x80	; 128
    3a72:	bf e3       	ldi	r27, 0x3F	; 63
    3a74:	89 8f       	std	Y+25, r24	; 0x19
    3a76:	9a 8f       	std	Y+26, r25	; 0x1a
    3a78:	ab 8f       	std	Y+27, r26	; 0x1b
    3a7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a7c:	69 8d       	ldd	r22, Y+25	; 0x19
    3a7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	4a e7       	ldi	r20, 0x7A	; 122
    3a8a:	55 e4       	ldi	r21, 0x45	; 69
    3a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	8d 8b       	std	Y+21, r24	; 0x15
    3a96:	9e 8b       	std	Y+22, r25	; 0x16
    3a98:	af 8b       	std	Y+23, r26	; 0x17
    3a9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    3aa4:	20 e0       	ldi	r18, 0x00	; 0
    3aa6:	30 e0       	ldi	r19, 0x00	; 0
    3aa8:	40 e8       	ldi	r20, 0x80	; 128
    3aaa:	5f e3       	ldi	r21, 0x3F	; 63
    3aac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ab0:	88 23       	and	r24, r24
    3ab2:	2c f4       	brge	.+10     	; 0x3abe <Lcd_ES_tsendChar_xy+0x84>
		__ticks = 1;
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	9c 8b       	std	Y+20, r25	; 0x14
    3aba:	8b 8b       	std	Y+19, r24	; 0x13
    3abc:	3f c0       	rjmp	.+126    	; 0x3b3c <Lcd_ES_tsendChar_xy+0x102>
	else if (__tmp > 65535)
    3abe:	6d 89       	ldd	r22, Y+21	; 0x15
    3ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	3f ef       	ldi	r19, 0xFF	; 255
    3aca:	4f e7       	ldi	r20, 0x7F	; 127
    3acc:	57 e4       	ldi	r21, 0x47	; 71
    3ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ad2:	18 16       	cp	r1, r24
    3ad4:	4c f5       	brge	.+82     	; 0x3b28 <Lcd_ES_tsendChar_xy+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad6:	69 8d       	ldd	r22, Y+25	; 0x19
    3ad8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ada:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3adc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	40 e2       	ldi	r20, 0x20	; 32
    3ae4:	51 e4       	ldi	r21, 0x41	; 65
    3ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	bc 01       	movw	r22, r24
    3af0:	cd 01       	movw	r24, r26
    3af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	9c 8b       	std	Y+20, r25	; 0x14
    3afc:	8b 8b       	std	Y+19, r24	; 0x13
    3afe:	0f c0       	rjmp	.+30     	; 0x3b1e <Lcd_ES_tsendChar_xy+0xe4>
    3b00:	80 e9       	ldi	r24, 0x90	; 144
    3b02:	91 e0       	ldi	r25, 0x01	; 1
    3b04:	9a 8b       	std	Y+18, r25	; 0x12
    3b06:	89 8b       	std	Y+17, r24	; 0x11
    3b08:	89 89       	ldd	r24, Y+17	; 0x11
    3b0a:	9a 89       	ldd	r25, Y+18	; 0x12
    3b0c:	01 97       	sbiw	r24, 0x01	; 1
    3b0e:	f1 f7       	brne	.-4      	; 0x3b0c <Lcd_ES_tsendChar_xy+0xd2>
    3b10:	9a 8b       	std	Y+18, r25	; 0x12
    3b12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b14:	8b 89       	ldd	r24, Y+19	; 0x13
    3b16:	9c 89       	ldd	r25, Y+20	; 0x14
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	9c 8b       	std	Y+20, r25	; 0x14
    3b1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b20:	9c 89       	ldd	r25, Y+20	; 0x14
    3b22:	00 97       	sbiw	r24, 0x00	; 0
    3b24:	69 f7       	brne	.-38     	; 0x3b00 <Lcd_ES_tsendChar_xy+0xc6>
    3b26:	92 c0       	rjmp	.+292    	; 0x3c4c <Lcd_ES_tsendChar_xy+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b28:	6d 89       	ldd	r22, Y+21	; 0x15
    3b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	9c 8b       	std	Y+20, r25	; 0x14
    3b3a:	8b 8b       	std	Y+19, r24	; 0x13
    3b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b40:	98 8b       	std	Y+16, r25	; 0x10
    3b42:	8f 87       	std	Y+15, r24	; 0x0f
    3b44:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b46:	98 89       	ldd	r25, Y+16	; 0x10
    3b48:	01 97       	sbiw	r24, 0x01	; 1
    3b4a:	f1 f7       	brne	.-4      	; 0x3b48 <Lcd_ES_tsendChar_xy+0x10e>
    3b4c:	98 8b       	std	Y+16, r25	; 0x10
    3b4e:	8f 87       	std	Y+15, r24	; 0x0f
    3b50:	7d c0       	rjmp	.+250    	; 0x3c4c <Lcd_ES_tsendChar_xy+0x212>
		_delay_ms(1);
	}else if(row == 2){
    3b52:	88 a1       	ldd	r24, Y+32	; 0x20
    3b54:	82 30       	cpi	r24, 0x02	; 2
    3b56:	09 f0       	breq	.+2      	; 0x3b5a <Lcd_ES_tsendChar_xy+0x120>
    3b58:	76 c0       	rjmp	.+236    	; 0x3c46 <Lcd_ES_tsendChar_xy+0x20c>
		Lcd_ES_tsendCmd(Force2ndline);
    3b5a:	80 ec       	ldi	r24, 0xC0	; 192
    3b5c:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
    3b60:	80 e0       	ldi	r24, 0x00	; 0
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	a0 e2       	ldi	r26, 0x20	; 32
    3b66:	b1 e4       	ldi	r27, 0x41	; 65
    3b68:	8b 87       	std	Y+11, r24	; 0x0b
    3b6a:	9c 87       	std	Y+12, r25	; 0x0c
    3b6c:	ad 87       	std	Y+13, r26	; 0x0d
    3b6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	4a e7       	ldi	r20, 0x7A	; 122
    3b7e:	55 e4       	ldi	r21, 0x45	; 69
    3b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	8f 83       	std	Y+7, r24	; 0x07
    3b8a:	98 87       	std	Y+8, r25	; 0x08
    3b8c:	a9 87       	std	Y+9, r26	; 0x09
    3b8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b90:	6f 81       	ldd	r22, Y+7	; 0x07
    3b92:	78 85       	ldd	r23, Y+8	; 0x08
    3b94:	89 85       	ldd	r24, Y+9	; 0x09
    3b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b98:	20 e0       	ldi	r18, 0x00	; 0
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	40 e8       	ldi	r20, 0x80	; 128
    3b9e:	5f e3       	ldi	r21, 0x3F	; 63
    3ba0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ba4:	88 23       	and	r24, r24
    3ba6:	2c f4       	brge	.+10     	; 0x3bb2 <Lcd_ES_tsendChar_xy+0x178>
		__ticks = 1;
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	9e 83       	std	Y+6, r25	; 0x06
    3bae:	8d 83       	std	Y+5, r24	; 0x05
    3bb0:	3f c0       	rjmp	.+126    	; 0x3c30 <Lcd_ES_tsendChar_xy+0x1f6>
	else if (__tmp > 65535)
    3bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb4:	78 85       	ldd	r23, Y+8	; 0x08
    3bb6:	89 85       	ldd	r24, Y+9	; 0x09
    3bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	3f ef       	ldi	r19, 0xFF	; 255
    3bbe:	4f e7       	ldi	r20, 0x7F	; 127
    3bc0:	57 e4       	ldi	r21, 0x47	; 71
    3bc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bc6:	18 16       	cp	r1, r24
    3bc8:	4c f5       	brge	.+82     	; 0x3c1c <Lcd_ES_tsendChar_xy+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	40 e2       	ldi	r20, 0x20	; 32
    3bd8:	51 e4       	ldi	r21, 0x41	; 65
    3bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	bc 01       	movw	r22, r24
    3be4:	cd 01       	movw	r24, r26
    3be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	9e 83       	std	Y+6, r25	; 0x06
    3bf0:	8d 83       	std	Y+5, r24	; 0x05
    3bf2:	0f c0       	rjmp	.+30     	; 0x3c12 <Lcd_ES_tsendChar_xy+0x1d8>
    3bf4:	80 e9       	ldi	r24, 0x90	; 144
    3bf6:	91 e0       	ldi	r25, 0x01	; 1
    3bf8:	9c 83       	std	Y+4, r25	; 0x04
    3bfa:	8b 83       	std	Y+3, r24	; 0x03
    3bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    3c00:	01 97       	sbiw	r24, 0x01	; 1
    3c02:	f1 f7       	brne	.-4      	; 0x3c00 <Lcd_ES_tsendChar_xy+0x1c6>
    3c04:	9c 83       	std	Y+4, r25	; 0x04
    3c06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c08:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c0c:	01 97       	sbiw	r24, 0x01	; 1
    3c0e:	9e 83       	std	Y+6, r25	; 0x06
    3c10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c12:	8d 81       	ldd	r24, Y+5	; 0x05
    3c14:	9e 81       	ldd	r25, Y+6	; 0x06
    3c16:	00 97       	sbiw	r24, 0x00	; 0
    3c18:	69 f7       	brne	.-38     	; 0x3bf4 <Lcd_ES_tsendChar_xy+0x1ba>
    3c1a:	18 c0       	rjmp	.+48     	; 0x3c4c <Lcd_ES_tsendChar_xy+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c1e:	78 85       	ldd	r23, Y+8	; 0x08
    3c20:	89 85       	ldd	r24, Y+9	; 0x09
    3c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	9e 83       	std	Y+6, r25	; 0x06
    3c2e:	8d 83       	std	Y+5, r24	; 0x05
    3c30:	8d 81       	ldd	r24, Y+5	; 0x05
    3c32:	9e 81       	ldd	r25, Y+6	; 0x06
    3c34:	9a 83       	std	Y+2, r25	; 0x02
    3c36:	89 83       	std	Y+1, r24	; 0x01
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3c:	01 97       	sbiw	r24, 0x01	; 1
    3c3e:	f1 f7       	brne	.-4      	; 0x3c3c <Lcd_ES_tsendChar_xy+0x202>
    3c40:	9a 83       	std	Y+2, r25	; 0x02
    3c42:	89 83       	std	Y+1, r24	; 0x01
    3c44:	03 c0       	rjmp	.+6      	; 0x3c4c <Lcd_ES_tsendChar_xy+0x212>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	8a a3       	std	Y+34, r24	; 0x22
    3c4a:	19 c0       	rjmp	.+50     	; 0x3c7e <Lcd_ES_tsendChar_xy+0x244>
	}

	for(int j=1;j<=col;j++){
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	9e 8f       	std	Y+30, r25	; 0x1e
    3c52:	8d 8f       	std	Y+29, r24	; 0x1d
    3c54:	08 c0       	rjmp	.+16     	; 0x3c66 <Lcd_ES_tsendChar_xy+0x22c>
		Lcd_ES_tsendCmd(ShiftRight);
    3c56:	8c e1       	ldi	r24, 0x1C	; 28
    3c58:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    3c5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c60:	01 96       	adiw	r24, 0x01	; 1
    3c62:	9e 8f       	std	Y+30, r25	; 0x1e
    3c64:	8d 8f       	std	Y+29, r24	; 0x1d
    3c66:	89 a1       	ldd	r24, Y+33	; 0x21
    3c68:	28 2f       	mov	r18, r24
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c70:	28 17       	cp	r18, r24
    3c72:	39 07       	cpc	r19, r25
    3c74:	84 f7       	brge	.-32     	; 0x3c56 <Lcd_ES_tsendChar_xy+0x21c>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    3c76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c78:	0e 94 94 1a 	call	0x3528	; 0x3528 <Lcd_ES_tsendChar>
	return ES_OK;
    3c7c:	1a a2       	std	Y+34, r1	; 0x22
    3c7e:	8a a1       	ldd	r24, Y+34	; 0x22
}
    3c80:	a2 96       	adiw	r28, 0x22	; 34
    3c82:	0f b6       	in	r0, 0x3f	; 63
    3c84:	f8 94       	cli
    3c86:	de bf       	out	0x3e, r29	; 62
    3c88:	0f be       	out	0x3f, r0	; 63
    3c8a:	cd bf       	out	0x3d, r28	; 61
    3c8c:	cf 91       	pop	r28
    3c8e:	df 91       	pop	r29
    3c90:	08 95       	ret

00003c92 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    3c92:	df 93       	push	r29
    3c94:	cf 93       	push	r28
    3c96:	00 d0       	rcall	.+0      	; 0x3c98 <LCD_ES_tSet_Cursor_Pos+0x6>
    3c98:	00 d0       	rcall	.+0      	; 0x3c9a <LCD_ES_tSet_Cursor_Pos+0x8>
    3c9a:	0f 92       	push	r0
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	89 83       	std	Y+1, r24	; 0x01
    3ca2:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    3ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca6:	81 50       	subi	r24, 0x01	; 1
    3ca8:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    3caa:	89 81       	ldd	r24, Y+1	; 0x01
    3cac:	28 2f       	mov	r18, r24
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	3d 83       	std	Y+5, r19	; 0x05
    3cb2:	2c 83       	std	Y+4, r18	; 0x04
    3cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb6:	9d 81       	ldd	r25, Y+5	; 0x05
    3cb8:	81 30       	cpi	r24, 0x01	; 1
    3cba:	91 05       	cpc	r25, r1
    3cbc:	31 f0       	breq	.+12     	; 0x3cca <LCD_ES_tSet_Cursor_Pos+0x38>
    3cbe:	2c 81       	ldd	r18, Y+4	; 0x04
    3cc0:	3d 81       	ldd	r19, Y+5	; 0x05
    3cc2:	22 30       	cpi	r18, 0x02	; 2
    3cc4:	31 05       	cpc	r19, r1
    3cc6:	31 f0       	breq	.+12     	; 0x3cd4 <LCD_ES_tSet_Cursor_Pos+0x42>
    3cc8:	0a c0       	rjmp	.+20     	; 0x3cde <LCD_ES_tSet_Cursor_Pos+0x4c>
	case 1:
		Lcd_ES_tsendCmd((0x80 + column));
    3cca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ccc:	80 58       	subi	r24, 0x80	; 128
    3cce:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
    3cd2:	08 c0       	rjmp	.+16     	; 0x3ce4 <LCD_ES_tSet_Cursor_Pos+0x52>
		break;
	case 2:
		Lcd_ES_tsendCmd((0xc0 + column));
    3cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd6:	80 54       	subi	r24, 0x40	; 64
    3cd8:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
    3cdc:	03 c0       	rjmp	.+6      	; 0x3ce4 <LCD_ES_tSet_Cursor_Pos+0x52>
		break;
	default:
		return ES_NOT_OK;
    3cde:	31 e0       	ldi	r19, 0x01	; 1
    3ce0:	3b 83       	std	Y+3, r19	; 0x03
    3ce2:	01 c0       	rjmp	.+2      	; 0x3ce6 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    3ce4:	1b 82       	std	Y+3, r1	; 0x03
    3ce6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3ce8:	0f 90       	pop	r0
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	0f 90       	pop	r0
    3cf0:	0f 90       	pop	r0
    3cf2:	cf 91       	pop	r28
    3cf4:	df 91       	pop	r29
    3cf6:	08 95       	ret

00003cf8 <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    3cf8:	df 93       	push	r29
    3cfa:	cf 93       	push	r28
    3cfc:	00 d0       	rcall	.+0      	; 0x3cfe <LCD_ES_tGoTo+0x6>
    3cfe:	0f 92       	push	r0
    3d00:	cd b7       	in	r28, 0x3d	; 61
    3d02:	de b7       	in	r29, 0x3e	; 62
    3d04:	89 83       	std	Y+1, r24	; 0x01
    3d06:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    3d08:	89 81       	ldd	r24, Y+1	; 0x01
    3d0a:	88 23       	and	r24, r24
    3d0c:	41 f4       	brne	.+16     	; 0x3d1e <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    3d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d10:	80 31       	cpi	r24, 0x10	; 16
    3d12:	48 f5       	brcc	.+82     	; 0x3d66 <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    3d14:	8a 81       	ldd	r24, Y+2	; 0x02
    3d16:	80 58       	subi	r24, 0x80	; 128
    3d18:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
    3d1c:	24 c0       	rjmp	.+72     	; 0x3d66 <LCD_ES_tGoTo+0x6e>
		}
	}
	else if (1 == Line)
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
    3d20:	81 30       	cpi	r24, 0x01	; 1
    3d22:	41 f4       	brne	.+16     	; 0x3d34 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    3d24:	8a 81       	ldd	r24, Y+2	; 0x02
    3d26:	80 31       	cpi	r24, 0x10	; 16
    3d28:	f0 f4       	brcc	.+60     	; 0x3d66 <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    3d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2c:	80 54       	subi	r24, 0x40	; 64
    3d2e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
    3d32:	19 c0       	rjmp	.+50     	; 0x3d66 <LCD_ES_tGoTo+0x6e>
		}
	}// In case of 16*4 lcd
	else if(2 == Line)
    3d34:	89 81       	ldd	r24, Y+1	; 0x01
    3d36:	82 30       	cpi	r24, 0x02	; 2
    3d38:	41 f4       	brne	.+16     	; 0x3d4a <LCD_ES_tGoTo+0x52>
	{
		if ( x <=15)
    3d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3c:	80 31       	cpi	r24, 0x10	; 16
    3d3e:	98 f4       	brcc	.+38     	; 0x3d66 <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0x90 + x);
    3d40:	8a 81       	ldd	r24, Y+2	; 0x02
    3d42:	80 57       	subi	r24, 0x70	; 112
    3d44:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
    3d48:	0e c0       	rjmp	.+28     	; 0x3d66 <LCD_ES_tGoTo+0x6e>
		}
	}else if(3 == Line)
    3d4a:	89 81       	ldd	r24, Y+1	; 0x01
    3d4c:	83 30       	cpi	r24, 0x03	; 3
    3d4e:	41 f4       	brne	.+16     	; 0x3d60 <LCD_ES_tGoTo+0x68>
	{
		if ( x <=15)
    3d50:	8a 81       	ldd	r24, Y+2	; 0x02
    3d52:	80 31       	cpi	r24, 0x10	; 16
    3d54:	40 f4       	brcc	.+16     	; 0x3d66 <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0xD0 + x);
    3d56:	8a 81       	ldd	r24, Y+2	; 0x02
    3d58:	80 53       	subi	r24, 0x30	; 48
    3d5a:	0e 94 e5 19 	call	0x33ca	; 0x33ca <Lcd_ES_tsendCmd>
    3d5e:	03 c0       	rjmp	.+6      	; 0x3d66 <LCD_ES_tGoTo+0x6e>
		}
	}
	else{
		return ES_NOT_OK;
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	8b 83       	std	Y+3, r24	; 0x03
    3d64:	01 c0       	rjmp	.+2      	; 0x3d68 <LCD_ES_tGoTo+0x70>
	}
	return ES_OK;
    3d66:	1b 82       	std	Y+3, r1	; 0x03
    3d68:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	cf 91       	pop	r28
    3d72:	df 91       	pop	r29
    3d74:	08 95       	ret

00003d76 <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    3d76:	df 93       	push	r29
    3d78:	cf 93       	push	r28
    3d7a:	cd b7       	in	r28, 0x3d	; 61
    3d7c:	de b7       	in	r29, 0x3e	; 62
    3d7e:	65 97       	sbiw	r28, 0x15	; 21
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	f8 94       	cli
    3d84:	de bf       	out	0x3e, r29	; 62
    3d86:	0f be       	out	0x3f, r0	; 63
    3d88:	cd bf       	out	0x3d, r28	; 61
    3d8a:	9c 8b       	std	Y+20, r25	; 0x14
    3d8c:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    3d8e:	eb 89       	ldd	r30, Y+19	; 0x13
    3d90:	fc 89       	ldd	r31, Y+20	; 0x14
    3d92:	8f ef       	ldi	r24, 0xFF	; 255
    3d94:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    3d96:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    3d98:	8b 89       	ldd	r24, Y+19	; 0x13
    3d9a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d9c:	00 97       	sbiw	r24, 0x00	; 0
    3d9e:	09 f4       	brne	.+2      	; 0x3da2 <KPD_ES_tGetKeyPressed+0x2c>
    3da0:	ed c0       	rjmp	.+474    	; 0x3f7c <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3da2:	19 8a       	std	Y+17, r1	; 0x11
    3da4:	e5 c0       	rjmp	.+458    	; 0x3f70 <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    3da6:	89 89       	ldd	r24, Y+17	; 0x11
    3da8:	88 2f       	mov	r24, r24
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	fc 01       	movw	r30, r24
    3dae:	ea 53       	subi	r30, 0x3A	; 58
    3db0:	fd 4f       	sbci	r31, 0xFD	; 253
    3db2:	90 81       	ld	r25, Z
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	69 2f       	mov	r22, r25
    3db8:	40 e0       	ldi	r20, 0x00	; 0
    3dba:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3dbe:	18 8a       	std	Y+16, r1	; 0x10
    3dc0:	c1 c0       	rjmp	.+386    	; 0x3f44 <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    3dc2:	88 89       	ldd	r24, Y+16	; 0x10
    3dc4:	88 2f       	mov	r24, r24
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	fc 01       	movw	r30, r24
    3dca:	e6 53       	subi	r30, 0x36	; 54
    3dcc:	fd 4f       	sbci	r31, 0xFD	; 253
    3dce:	90 81       	ld	r25, Z
    3dd0:	9e 01       	movw	r18, r28
    3dd2:	2e 5e       	subi	r18, 0xEE	; 238
    3dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd6:	83 e0       	ldi	r24, 0x03	; 3
    3dd8:	69 2f       	mov	r22, r25
    3dda:	a9 01       	movw	r20, r18
    3ddc:	0e 94 03 10 	call	0x2006	; 0x2006 <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    3de0:	8a 89       	ldd	r24, Y+18	; 0x12
    3de2:	88 23       	and	r24, r24
    3de4:	09 f0       	breq	.+2      	; 0x3de8 <KPD_ES_tGetKeyPressed+0x72>
    3de6:	ab c0       	rjmp	.+342    	; 0x3f3e <KPD_ES_tGetKeyPressed+0x1c8>
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	a0 ea       	ldi	r26, 0xA0	; 160
    3dee:	b1 e4       	ldi	r27, 0x41	; 65
    3df0:	8b 87       	std	Y+11, r24	; 0x0b
    3df2:	9c 87       	std	Y+12, r25	; 0x0c
    3df4:	ad 87       	std	Y+13, r26	; 0x0d
    3df6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	4a e7       	ldi	r20, 0x7A	; 122
    3e06:	55 e4       	ldi	r21, 0x45	; 69
    3e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	8f 83       	std	Y+7, r24	; 0x07
    3e12:	98 87       	std	Y+8, r25	; 0x08
    3e14:	a9 87       	std	Y+9, r26	; 0x09
    3e16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e18:	6f 81       	ldd	r22, Y+7	; 0x07
    3e1a:	78 85       	ldd	r23, Y+8	; 0x08
    3e1c:	89 85       	ldd	r24, Y+9	; 0x09
    3e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	40 e8       	ldi	r20, 0x80	; 128
    3e26:	5f e3       	ldi	r21, 0x3F	; 63
    3e28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e2c:	88 23       	and	r24, r24
    3e2e:	2c f4       	brge	.+10     	; 0x3e3a <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	9e 83       	std	Y+6, r25	; 0x06
    3e36:	8d 83       	std	Y+5, r24	; 0x05
    3e38:	3f c0       	rjmp	.+126    	; 0x3eb8 <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    3e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e3c:	78 85       	ldd	r23, Y+8	; 0x08
    3e3e:	89 85       	ldd	r24, Y+9	; 0x09
    3e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e42:	20 e0       	ldi	r18, 0x00	; 0
    3e44:	3f ef       	ldi	r19, 0xFF	; 255
    3e46:	4f e7       	ldi	r20, 0x7F	; 127
    3e48:	57 e4       	ldi	r21, 0x47	; 71
    3e4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e4e:	18 16       	cp	r1, r24
    3e50:	4c f5       	brge	.+82     	; 0x3ea4 <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e5a:	20 e0       	ldi	r18, 0x00	; 0
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	40 e2       	ldi	r20, 0x20	; 32
    3e60:	51 e4       	ldi	r21, 0x41	; 65
    3e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	bc 01       	movw	r22, r24
    3e6c:	cd 01       	movw	r24, r26
    3e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	9e 83       	std	Y+6, r25	; 0x06
    3e78:	8d 83       	std	Y+5, r24	; 0x05
    3e7a:	0f c0       	rjmp	.+30     	; 0x3e9a <KPD_ES_tGetKeyPressed+0x124>
    3e7c:	80 e9       	ldi	r24, 0x90	; 144
    3e7e:	91 e0       	ldi	r25, 0x01	; 1
    3e80:	9c 83       	std	Y+4, r25	; 0x04
    3e82:	8b 83       	std	Y+3, r24	; 0x03
    3e84:	8b 81       	ldd	r24, Y+3	; 0x03
    3e86:	9c 81       	ldd	r25, Y+4	; 0x04
    3e88:	01 97       	sbiw	r24, 0x01	; 1
    3e8a:	f1 f7       	brne	.-4      	; 0x3e88 <KPD_ES_tGetKeyPressed+0x112>
    3e8c:	9c 83       	std	Y+4, r25	; 0x04
    3e8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e90:	8d 81       	ldd	r24, Y+5	; 0x05
    3e92:	9e 81       	ldd	r25, Y+6	; 0x06
    3e94:	01 97       	sbiw	r24, 0x01	; 1
    3e96:	9e 83       	std	Y+6, r25	; 0x06
    3e98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9e:	00 97       	sbiw	r24, 0x00	; 0
    3ea0:	69 f7       	brne	.-38     	; 0x3e7c <KPD_ES_tGetKeyPressed+0x106>
    3ea2:	14 c0       	rjmp	.+40     	; 0x3ecc <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ea6:	78 85       	ldd	r23, Y+8	; 0x08
    3ea8:	89 85       	ldd	r24, Y+9	; 0x09
    3eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	9e 83       	std	Y+6, r25	; 0x06
    3eb6:	8d 83       	std	Y+5, r24	; 0x05
    3eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eba:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebc:	9a 83       	std	Y+2, r25	; 0x02
    3ebe:	89 83       	std	Y+1, r24	; 0x01
    3ec0:	89 81       	ldd	r24, Y+1	; 0x01
    3ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec4:	01 97       	sbiw	r24, 0x01	; 1
    3ec6:	f1 f7       	brne	.-4      	; 0x3ec4 <KPD_ES_tGetKeyPressed+0x14e>
    3ec8:	9a 83       	std	Y+2, r25	; 0x02
    3eca:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3ecc:	88 89       	ldd	r24, Y+16	; 0x10
    3ece:	88 2f       	mov	r24, r24
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	e6 53       	subi	r30, 0x36	; 54
    3ed6:	fd 4f       	sbci	r31, 0xFD	; 253
    3ed8:	90 81       	ld	r25, Z
    3eda:	9e 01       	movw	r18, r28
    3edc:	2e 5e       	subi	r18, 0xEE	; 238
    3ede:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee0:	83 e0       	ldi	r24, 0x03	; 3
    3ee2:	69 2f       	mov	r22, r25
    3ee4:	a9 01       	movw	r20, r18
    3ee6:	0e 94 03 10 	call	0x2006	; 0x2006 <DIO_ES_tGetPinValue>
    3eea:	0f c0       	rjmp	.+30     	; 0x3f0a <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    3eec:	88 89       	ldd	r24, Y+16	; 0x10
    3eee:	88 2f       	mov	r24, r24
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	e6 53       	subi	r30, 0x36	; 54
    3ef6:	fd 4f       	sbci	r31, 0xFD	; 253
    3ef8:	90 81       	ld	r25, Z
    3efa:	9e 01       	movw	r18, r28
    3efc:	2e 5e       	subi	r18, 0xEE	; 238
    3efe:	3f 4f       	sbci	r19, 0xFF	; 255
    3f00:	83 e0       	ldi	r24, 0x03	; 3
    3f02:	69 2f       	mov	r22, r25
    3f04:	a9 01       	movw	r20, r18
    3f06:	0e 94 03 10 	call	0x2006	; 0x2006 <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    3f0a:	8a 89       	ldd	r24, Y+18	; 0x12
    3f0c:	88 23       	and	r24, r24
    3f0e:	71 f3       	breq	.-36     	; 0x3eec <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    3f10:	89 89       	ldd	r24, Y+17	; 0x11
    3f12:	48 2f       	mov	r20, r24
    3f14:	50 e0       	ldi	r21, 0x00	; 0
    3f16:	88 89       	ldd	r24, Y+16	; 0x10
    3f18:	28 2f       	mov	r18, r24
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	ca 01       	movw	r24, r20
    3f1e:	88 0f       	add	r24, r24
    3f20:	99 1f       	adc	r25, r25
    3f22:	88 0f       	add	r24, r24
    3f24:	99 1f       	adc	r25, r25
    3f26:	82 0f       	add	r24, r18
    3f28:	93 1f       	adc	r25, r19
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	ea 54       	subi	r30, 0x4A	; 74
    3f2e:	fd 4f       	sbci	r31, 0xFD	; 253
    3f30:	80 81       	ld	r24, Z
    3f32:	eb 89       	ldd	r30, Y+19	; 0x13
    3f34:	fc 89       	ldd	r31, Y+20	; 0x14
    3f36:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	8f 87       	std	Y+15, r24	; 0x0f
    3f3c:	07 c0       	rjmp	.+14     	; 0x3f4c <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    3f3e:	88 89       	ldd	r24, Y+16	; 0x10
    3f40:	8f 5f       	subi	r24, 0xFF	; 255
    3f42:	88 8b       	std	Y+16, r24	; 0x10
    3f44:	88 89       	ldd	r24, Y+16	; 0x10
    3f46:	84 30       	cpi	r24, 0x04	; 4
    3f48:	08 f4       	brcc	.+2      	; 0x3f4c <KPD_ES_tGetKeyPressed+0x1d6>
    3f4a:	3b cf       	rjmp	.-394    	; 0x3dc2 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    3f4c:	89 89       	ldd	r24, Y+17	; 0x11
    3f4e:	88 2f       	mov	r24, r24
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	fc 01       	movw	r30, r24
    3f54:	ea 53       	subi	r30, 0x3A	; 58
    3f56:	fd 4f       	sbci	r31, 0xFD	; 253
    3f58:	90 81       	ld	r25, Z
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	69 2f       	mov	r22, r25
    3f5e:	41 e0       	ldi	r20, 0x01	; 1
    3f60:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    3f64:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f66:	81 30       	cpi	r24, 0x01	; 1
    3f68:	39 f0       	breq	.+14     	; 0x3f78 <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    3f6a:	89 89       	ldd	r24, Y+17	; 0x11
    3f6c:	8f 5f       	subi	r24, 0xFF	; 255
    3f6e:	89 8b       	std	Y+17, r24	; 0x11
    3f70:	89 89       	ldd	r24, Y+17	; 0x11
    3f72:	84 30       	cpi	r24, 0x04	; 4
    3f74:	08 f4       	brcc	.+2      	; 0x3f78 <KPD_ES_tGetKeyPressed+0x202>
    3f76:	17 cf       	rjmp	.-466    	; 0x3da6 <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    3f78:	1d 8a       	std	Y+21, r1	; 0x15
    3f7a:	02 c0       	rjmp	.+4      	; 0x3f80 <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	8d 8b       	std	Y+21, r24	; 0x15
    3f80:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    3f82:	65 96       	adiw	r28, 0x15	; 21
    3f84:	0f b6       	in	r0, 0x3f	; 63
    3f86:	f8 94       	cli
    3f88:	de bf       	out	0x3e, r29	; 62
    3f8a:	0f be       	out	0x3f, r0	; 63
    3f8c:	cd bf       	out	0x3d, r28	; 61
    3f8e:	cf 91       	pop	r28
    3f90:	df 91       	pop	r29
    3f92:	08 95       	ret

00003f94 <DC_Motor_Init>:
#include "DC_Motor.h"
#include "DC_MotorCfg.h"


ES_t DC_Motor_Init(DC_MOTOR_Index Motor)
{
    3f94:	df 93       	push	r29
    3f96:	cf 93       	push	r28
    3f98:	00 d0       	rcall	.+0      	; 0x3f9a <DC_Motor_Init+0x6>
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62
    3f9e:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    3fa0:	89 81       	ldd	r24, Y+1	; 0x01
    3fa2:	88 23       	and	r24, r24
    3fa4:	59 f4       	brne	.+22     	; 0x3fbc <DC_Motor_Init+0x28>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN1, OUTPUT);
    3fa6:	82 e0       	ldi	r24, 0x02	; 2
    3fa8:	61 e0       	ldi	r22, 0x01	; 1
    3faa:	41 e0       	ldi	r20, 0x01	; 1
    3fac:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN2, OUTPUT);
    3fb0:	82 e0       	ldi	r24, 0x02	; 2
    3fb2:	62 e0       	ldi	r22, 0x02	; 2
    3fb4:	41 e0       	ldi	r20, 0x01	; 1
    3fb6:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
    3fba:	11 c0       	rjmp	.+34     	; 0x3fde <DC_Motor_Init+0x4a>
	}else if(Motor == DC_MOTOR_1){
    3fbc:	89 81       	ldd	r24, Y+1	; 0x01
    3fbe:	81 30       	cpi	r24, 0x01	; 1
    3fc0:	59 f4       	brne	.+22     	; 0x3fd8 <DC_Motor_Init+0x44>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN3, OUTPUT);
    3fc2:	82 e0       	ldi	r24, 0x02	; 2
    3fc4:	63 e0       	ldi	r22, 0x03	; 3
    3fc6:	41 e0       	ldi	r20, 0x01	; 1
    3fc8:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN4, OUTPUT);
    3fcc:	82 e0       	ldi	r24, 0x02	; 2
    3fce:	64 e0       	ldi	r22, 0x04	; 4
    3fd0:	41 e0       	ldi	r20, 0x01	; 1
    3fd2:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <DIO_ES_tSetPinDirection>
    3fd6:	03 c0       	rjmp	.+6      	; 0x3fde <DC_Motor_Init+0x4a>
	}else{
		return ES_NOT_OK;
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	8a 83       	std	Y+2, r24	; 0x02
    3fdc:	01 c0       	rjmp	.+2      	; 0x3fe0 <DC_Motor_Init+0x4c>
	}
	return ES_OK;
    3fde:	1a 82       	std	Y+2, r1	; 0x02
    3fe0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	cf 91       	pop	r28
    3fe8:	df 91       	pop	r29
    3fea:	08 95       	ret

00003fec <DC_Motor_Stop>:


ES_t DC_Motor_Stop(DC_MOTOR_Index Motor)
{
    3fec:	df 93       	push	r29
    3fee:	cf 93       	push	r28
    3ff0:	00 d0       	rcall	.+0      	; 0x3ff2 <DC_Motor_Stop+0x6>
    3ff2:	cd b7       	in	r28, 0x3d	; 61
    3ff4:	de b7       	in	r29, 0x3e	; 62
    3ff6:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    3ff8:	89 81       	ldd	r24, Y+1	; 0x01
    3ffa:	88 23       	and	r24, r24
    3ffc:	59 f4       	brne	.+22     	; 0x4014 <DC_Motor_Stop+0x28>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    3ffe:	82 e0       	ldi	r24, 0x02	; 2
    4000:	61 e0       	ldi	r22, 0x01	; 1
    4002:	40 e0       	ldi	r20, 0x00	; 0
    4004:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    4008:	82 e0       	ldi	r24, 0x02	; 2
    400a:	62 e0       	ldi	r22, 0x02	; 2
    400c:	40 e0       	ldi	r20, 0x00	; 0
    400e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    4012:	11 c0       	rjmp	.+34     	; 0x4036 <DC_Motor_Stop+0x4a>
	}else if(Motor == DC_MOTOR_1){
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	81 30       	cpi	r24, 0x01	; 1
    4018:	59 f4       	brne	.+22     	; 0x4030 <DC_Motor_Stop+0x44>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    401a:	82 e0       	ldi	r24, 0x02	; 2
    401c:	63 e0       	ldi	r22, 0x03	; 3
    401e:	40 e0       	ldi	r20, 0x00	; 0
    4020:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    4024:	82 e0       	ldi	r24, 0x02	; 2
    4026:	64 e0       	ldi	r22, 0x04	; 4
    4028:	40 e0       	ldi	r20, 0x00	; 0
    402a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    402e:	03 c0       	rjmp	.+6      	; 0x4036 <DC_Motor_Stop+0x4a>
	}else{
		return ES_NOT_OK;
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	8a 83       	std	Y+2, r24	; 0x02
    4034:	01 c0       	rjmp	.+2      	; 0x4038 <DC_Motor_Stop+0x4c>
	}
	return ES_OK;
    4036:	1a 82       	std	Y+2, r1	; 0x02
    4038:	8a 81       	ldd	r24, Y+2	; 0x02
}
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	cf 91       	pop	r28
    4040:	df 91       	pop	r29
    4042:	08 95       	ret

00004044 <DC_Motor_Move>:


ES_t DC_Motor_Move(DC_MOTOR_Index Motor,DC_MOTOR_Cfg MotorCfg)
{
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	00 d0       	rcall	.+0      	; 0x404a <DC_Motor_Move+0x6>
    404a:	00 d0       	rcall	.+0      	; 0x404c <DC_Motor_Move+0x8>
    404c:	0f 92       	push	r0
    404e:	cd b7       	in	r28, 0x3d	; 61
    4050:	de b7       	in	r29, 0x3e	; 62
    4052:	89 83       	std	Y+1, r24	; 0x01
    4054:	6a 83       	std	Y+2, r22	; 0x02
	switch(MotorCfg){
    4056:	8a 81       	ldd	r24, Y+2	; 0x02
    4058:	28 2f       	mov	r18, r24
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	3d 83       	std	Y+5, r19	; 0x05
    405e:	2c 83       	std	Y+4, r18	; 0x04
    4060:	8c 81       	ldd	r24, Y+4	; 0x04
    4062:	9d 81       	ldd	r25, Y+5	; 0x05
    4064:	00 97       	sbiw	r24, 0x00	; 0
    4066:	31 f0       	breq	.+12     	; 0x4074 <DC_Motor_Move+0x30>
    4068:	2c 81       	ldd	r18, Y+4	; 0x04
    406a:	3d 81       	ldd	r19, Y+5	; 0x05
    406c:	21 30       	cpi	r18, 0x01	; 1
    406e:	31 05       	cpc	r19, r1
    4070:	e9 f0       	breq	.+58     	; 0x40ac <DC_Motor_Move+0x68>
    4072:	38 c0       	rjmp	.+112    	; 0x40e4 <DC_Motor_Move+0xa0>
	case DC_MOTOR_CW:
		if(Motor == DC_MOTOR_0){
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	88 23       	and	r24, r24
    4078:	59 f4       	brne	.+22     	; 0x4090 <DC_Motor_Move+0x4c>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, HIGH);
    407a:	82 e0       	ldi	r24, 0x02	; 2
    407c:	61 e0       	ldi	r22, 0x01	; 1
    407e:	41 e0       	ldi	r20, 0x01	; 1
    4080:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    4084:	82 e0       	ldi	r24, 0x02	; 2
    4086:	62 e0       	ldi	r22, 0x02	; 2
    4088:	40 e0       	ldi	r20, 0x00	; 0
    408a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    408e:	2d c0       	rjmp	.+90     	; 0x40ea <DC_Motor_Move+0xa6>
		}else if(Motor == DC_MOTOR_1){
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	81 30       	cpi	r24, 0x01	; 1
    4094:	51 f5       	brne	.+84     	; 0x40ea <DC_Motor_Move+0xa6>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, HIGH);
    4096:	82 e0       	ldi	r24, 0x02	; 2
    4098:	63 e0       	ldi	r22, 0x03	; 3
    409a:	41 e0       	ldi	r20, 0x01	; 1
    409c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    40a0:	82 e0       	ldi	r24, 0x02	; 2
    40a2:	64 e0       	ldi	r22, 0x04	; 4
    40a4:	40 e0       	ldi	r20, 0x00	; 0
    40a6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    40aa:	1f c0       	rjmp	.+62     	; 0x40ea <DC_Motor_Move+0xa6>
		}
		break;
	case DC_MOTOR_CCW:
		if(Motor == DC_MOTOR_0){
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	88 23       	and	r24, r24
    40b0:	59 f4       	brne	.+22     	; 0x40c8 <DC_Motor_Move+0x84>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    40b2:	82 e0       	ldi	r24, 0x02	; 2
    40b4:	61 e0       	ldi	r22, 0x01	; 1
    40b6:	40 e0       	ldi	r20, 0x00	; 0
    40b8:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, HIGH);
    40bc:	82 e0       	ldi	r24, 0x02	; 2
    40be:	62 e0       	ldi	r22, 0x02	; 2
    40c0:	41 e0       	ldi	r20, 0x01	; 1
    40c2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    40c6:	11 c0       	rjmp	.+34     	; 0x40ea <DC_Motor_Move+0xa6>
		}else if(Motor == DC_MOTOR_1){
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	81 30       	cpi	r24, 0x01	; 1
    40cc:	71 f4       	brne	.+28     	; 0x40ea <DC_Motor_Move+0xa6>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    40ce:	82 e0       	ldi	r24, 0x02	; 2
    40d0:	63 e0       	ldi	r22, 0x03	; 3
    40d2:	40 e0       	ldi	r20, 0x00	; 0
    40d4:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, HIGH);
    40d8:	82 e0       	ldi	r24, 0x02	; 2
    40da:	64 e0       	ldi	r22, 0x04	; 4
    40dc:	41 e0       	ldi	r20, 0x01	; 1
    40de:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_ES_tSetPinValue>
    40e2:	03 c0       	rjmp	.+6      	; 0x40ea <DC_Motor_Move+0xa6>
		}
		break;
	default:
		return ES_NOT_OK;
    40e4:	31 e0       	ldi	r19, 0x01	; 1
    40e6:	3b 83       	std	Y+3, r19	; 0x03
    40e8:	01 c0       	rjmp	.+2      	; 0x40ec <DC_Motor_Move+0xa8>
	}
	return ES_OK;
    40ea:	1b 82       	std	Y+3, r1	; 0x03
    40ec:	8b 81       	ldd	r24, Y+3	; 0x03
}
    40ee:	0f 90       	pop	r0
    40f0:	0f 90       	pop	r0
    40f2:	0f 90       	pop	r0
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	cf 91       	pop	r28
    40fa:	df 91       	pop	r29
    40fc:	08 95       	ret

000040fe <DC_Motor_SetSpeed>:


ES_t DC_Motor_SetSpeed(DC_MOTOR_Index Motor, u8 Speed)
{
    40fe:	df 93       	push	r29
    4100:	cf 93       	push	r28
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	2c 97       	sbiw	r28, 0x0c	; 12
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	cd bf       	out	0x3d, r28	; 61
    4112:	8e 83       	std	Y+6, r24	; 0x06
    4114:	6f 83       	std	Y+7, r22	; 0x07
	TIMER0_Config_t Timer0Cfg = {TIMER0_PHASE_CORRECT_MODE, TIMER0_PRESCALAR_64, OC0_NON_INVERTING, TOIE0_DISABLE, OCIE0_DISABLE};
    4116:	ce 01       	movw	r24, r28
    4118:	01 96       	adiw	r24, 0x01	; 1
    411a:	99 87       	std	Y+9, r25	; 0x09
    411c:	88 87       	std	Y+8, r24	; 0x08
    411e:	ee ec       	ldi	r30, 0xCE	; 206
    4120:	f2 e0       	ldi	r31, 0x02	; 2
    4122:	fb 87       	std	Y+11, r31	; 0x0b
    4124:	ea 87       	std	Y+10, r30	; 0x0a
    4126:	f5 e0       	ldi	r31, 0x05	; 5
    4128:	fc 87       	std	Y+12, r31	; 0x0c
    412a:	ea 85       	ldd	r30, Y+10	; 0x0a
    412c:	fb 85       	ldd	r31, Y+11	; 0x0b
    412e:	00 80       	ld	r0, Z
    4130:	8a 85       	ldd	r24, Y+10	; 0x0a
    4132:	9b 85       	ldd	r25, Y+11	; 0x0b
    4134:	01 96       	adiw	r24, 0x01	; 1
    4136:	9b 87       	std	Y+11, r25	; 0x0b
    4138:	8a 87       	std	Y+10, r24	; 0x0a
    413a:	e8 85       	ldd	r30, Y+8	; 0x08
    413c:	f9 85       	ldd	r31, Y+9	; 0x09
    413e:	00 82       	st	Z, r0
    4140:	88 85       	ldd	r24, Y+8	; 0x08
    4142:	99 85       	ldd	r25, Y+9	; 0x09
    4144:	01 96       	adiw	r24, 0x01	; 1
    4146:	99 87       	std	Y+9, r25	; 0x09
    4148:	88 87       	std	Y+8, r24	; 0x08
    414a:	9c 85       	ldd	r25, Y+12	; 0x0c
    414c:	91 50       	subi	r25, 0x01	; 1
    414e:	9c 87       	std	Y+12, r25	; 0x0c
    4150:	ec 85       	ldd	r30, Y+12	; 0x0c
    4152:	ee 23       	and	r30, r30
    4154:	51 f7       	brne	.-44     	; 0x412a <DC_Motor_SetSpeed+0x2c>
	TIMER0_Init(&Timer0Cfg);
    4156:	ce 01       	movw	r24, r28
    4158:	01 96       	adiw	r24, 0x01	; 1
    415a:	0e 94 75 07 	call	0xeea	; 0xeea <TIMER0_Init>


	switch(Motor)
    415e:	8e 81       	ldd	r24, Y+6	; 0x06
    4160:	88 2f       	mov	r24, r24
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	79 f4       	brne	.+30     	; 0x4186 <DC_Motor_SetSpeed+0x88>
	{
	case DC_MOTOR_0:
		PWM_Set_DutyCycle(Speed);
    4168:	8f 81       	ldd	r24, Y+7	; 0x07
    416a:	88 2f       	mov	r24, r24
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	a0 e0       	ldi	r26, 0x00	; 0
    4170:	b0 e0       	ldi	r27, 0x00	; 0
    4172:	bc 01       	movw	r22, r24
    4174:	cd 01       	movw	r24, r26
    4176:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    417a:	dc 01       	movw	r26, r24
    417c:	cb 01       	movw	r24, r22
    417e:	bc 01       	movw	r22, r24
    4180:	cd 01       	movw	r24, r26
    4182:	0e 94 c8 08 	call	0x1190	; 0x1190 <PWM_Set_DutyCycle>
	}


	return ES_OK;
    4186:	80 e0       	ldi	r24, 0x00	; 0
}
    4188:	2c 96       	adiw	r28, 0x0c	; 12
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	f8 94       	cli
    418e:	de bf       	out	0x3e, r29	; 62
    4190:	0f be       	out	0x3f, r0	; 63
    4192:	cd bf       	out	0x3d, r28	; 61
    4194:	cf 91       	pop	r28
    4196:	df 91       	pop	r29
    4198:	08 95       	ret

0000419a <Enter_IRQ_CallBack>:




void Enter_IRQ_CallBack(void)
{
    419a:	df 93       	push	r29
    419c:	cf 93       	push	r28
    419e:	cd b7       	in	r28, 0x3d	; 61
    41a0:	de b7       	in	r29, 0x3e	; 62
	currentState = STATE_MAIN_SCREEN;
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	80 93 1a 03 	sts	0x031A, r24
}
    41a8:	cf 91       	pop	r28
    41aa:	df 91       	pop	r29
    41ac:	08 95       	ret

000041ae <main>:

int main()
{
    41ae:	0f 93       	push	r16
    41b0:	1f 93       	push	r17
    41b2:	df 93       	push	r29
    41b4:	cf 93       	push	r28
    41b6:	cd b7       	in	r28, 0x3d	; 61
    41b8:	de b7       	in	r29, 0x3e	; 62
    41ba:	cb 58       	subi	r28, 0x8B	; 139
    41bc:	d0 40       	sbci	r29, 0x00	; 0
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	f8 94       	cli
    41c2:	de bf       	out	0x3e, r29	; 62
    41c4:	0f be       	out	0x3f, r0	; 63
    41c6:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
    41c8:	0e 94 ce 11 	call	0x239c	; 0x239c <DIO_ES_tInit>
	Lcd_ES_tInit();
    41cc:	0e 94 45 19 	call	0x328a	; 0x328a <Lcd_ES_tInit>
	Stepper_Init();
    41d0:	0e 94 87 14 	call	0x290e	; 0x290e <Stepper_Init>
	sei();
    41d4:	78 94       	sei


	DC_Motor_Init(DC_MOTOR_0);
    41d6:	80 e0       	ldi	r24, 0x00	; 0
    41d8:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <DC_Motor_Init>

	u8 Value;
	char Option,Option2,Option3,Option4,Option5;
	u8 count=0;
    41dc:	fe 01       	movw	r30, r28
    41de:	ed 57       	subi	r30, 0x7D	; 125
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	10 82       	st	Z, r1
	u8 stepperAngle=0;
    41e4:	fe 01       	movw	r30, r28
    41e6:	ee 57       	subi	r30, 0x7E	; 126
    41e8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ea:	10 82       	st	Z, r1
	int ServoAngle=0;
    41ec:	fe 01       	movw	r30, r28
    41ee:	e0 58       	subi	r30, 0x80	; 128
    41f0:	ff 4f       	sbci	r31, 0xFF	; 255
    41f2:	11 82       	std	Z+1, r1	; 0x01
    41f4:	10 82       	st	Z, r1

	u8 flag=0;
    41f6:	fe 01       	movw	r30, r28
    41f8:	e1 58       	subi	r30, 0x81	; 129
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	10 82       	st	Z, r1

	EXI_TriggerEdge(EX_INT2,RISING_EDGE);
    41fe:	82 e0       	ldi	r24, 0x02	; 2
    4200:	63 e0       	ldi	r22, 0x03	; 3
    4202:	0e 94 84 0c 	call	0x1908	; 0x1908 <EXI_TriggerEdge>
	EXI_ENABLE(EX_INT2);
    4206:	82 e0       	ldi	r24, 0x02	; 2
    4208:	0e 94 16 0c 	call	0x182c	; 0x182c <EXI_ENABLE>
	EXI_Set_CallBack(EX_INT2,Enter_IRQ_CallBack);
    420c:	2d ec       	ldi	r18, 0xCD	; 205
    420e:	30 e2       	ldi	r19, 0x20	; 32
    4210:	82 e0       	ldi	r24, 0x02	; 2
    4212:	b9 01       	movw	r22, r18
    4214:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <EXI_Set_CallBack>


	currentState = STATE_NULL_STATE;
    4218:	10 92 1a 03 	sts	0x031A, r1


	Lcd_ES_tsendString("Enter Password !");
    421c:	80 e6       	ldi	r24, 0x60	; 96
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(1, 5);
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	65 e0       	ldi	r22, 0x05	; 5
    4228:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LCD_ES_tGoTo>

	while(1)
	{
		switch(currentState)
    422c:	80 91 1a 03 	lds	r24, 0x031A
    4230:	28 2f       	mov	r18, r24
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	c6 57       	subi	r28, 0x76	; 118
    4236:	df 4f       	sbci	r29, 0xFF	; 255
    4238:	39 83       	std	Y+1, r19	; 0x01
    423a:	28 83       	st	Y, r18
    423c:	ca 58       	subi	r28, 0x8A	; 138
    423e:	d0 40       	sbci	r29, 0x00	; 0
    4240:	c6 57       	subi	r28, 0x76	; 118
    4242:	df 4f       	sbci	r29, 0xFF	; 255
    4244:	48 81       	ld	r20, Y
    4246:	59 81       	ldd	r21, Y+1	; 0x01
    4248:	ca 58       	subi	r28, 0x8A	; 138
    424a:	d0 40       	sbci	r29, 0x00	; 0
    424c:	43 30       	cpi	r20, 0x03	; 3
    424e:	51 05       	cpc	r21, r1
    4250:	09 f4       	brne	.+2      	; 0x4254 <main+0xa6>
    4252:	e5 c3       	rjmp	.+1994   	; 0x4a1e <main+0x870>
    4254:	c6 57       	subi	r28, 0x76	; 118
    4256:	df 4f       	sbci	r29, 0xFF	; 255
    4258:	88 81       	ld	r24, Y
    425a:	99 81       	ldd	r25, Y+1	; 0x01
    425c:	ca 58       	subi	r28, 0x8A	; 138
    425e:	d0 40       	sbci	r29, 0x00	; 0
    4260:	84 30       	cpi	r24, 0x04	; 4
    4262:	91 05       	cpc	r25, r1
    4264:	f4 f4       	brge	.+60     	; 0x42a2 <main+0xf4>
    4266:	c6 57       	subi	r28, 0x76	; 118
    4268:	df 4f       	sbci	r29, 0xFF	; 255
    426a:	e8 81       	ld	r30, Y
    426c:	f9 81       	ldd	r31, Y+1	; 0x01
    426e:	ca 58       	subi	r28, 0x8A	; 138
    4270:	d0 40       	sbci	r29, 0x00	; 0
    4272:	e1 30       	cpi	r30, 0x01	; 1
    4274:	f1 05       	cpc	r31, r1
    4276:	09 f4       	brne	.+2      	; 0x427a <main+0xcc>
    4278:	ec c0       	rjmp	.+472    	; 0x4452 <main+0x2a4>
    427a:	c6 57       	subi	r28, 0x76	; 118
    427c:	df 4f       	sbci	r29, 0xFF	; 255
    427e:	28 81       	ld	r18, Y
    4280:	39 81       	ldd	r19, Y+1	; 0x01
    4282:	ca 58       	subi	r28, 0x8A	; 138
    4284:	d0 40       	sbci	r29, 0x00	; 0
    4286:	22 30       	cpi	r18, 0x02	; 2
    4288:	31 05       	cpc	r19, r1
    428a:	0c f0       	brlt	.+2      	; 0x428e <main+0xe0>
    428c:	bf c2       	rjmp	.+1406   	; 0x480c <main+0x65e>
    428e:	c6 57       	subi	r28, 0x76	; 118
    4290:	df 4f       	sbci	r29, 0xFF	; 255
    4292:	48 81       	ld	r20, Y
    4294:	59 81       	ldd	r21, Y+1	; 0x01
    4296:	ca 58       	subi	r28, 0x8A	; 138
    4298:	d0 40       	sbci	r29, 0x00	; 0
    429a:	41 15       	cp	r20, r1
    429c:	51 05       	cpc	r21, r1
    429e:	01 f1       	breq	.+64     	; 0x42e0 <main+0x132>
    42a0:	c5 cf       	rjmp	.-118    	; 0x422c <main+0x7e>
    42a2:	c6 57       	subi	r28, 0x76	; 118
    42a4:	df 4f       	sbci	r29, 0xFF	; 255
    42a6:	88 81       	ld	r24, Y
    42a8:	99 81       	ldd	r25, Y+1	; 0x01
    42aa:	ca 58       	subi	r28, 0x8A	; 138
    42ac:	d0 40       	sbci	r29, 0x00	; 0
    42ae:	85 30       	cpi	r24, 0x05	; 5
    42b0:	91 05       	cpc	r25, r1
    42b2:	09 f4       	brne	.+2      	; 0x42b6 <main+0x108>
    42b4:	6b c6       	rjmp	.+3286   	; 0x4f8c <main+0xdde>
    42b6:	c6 57       	subi	r28, 0x76	; 118
    42b8:	df 4f       	sbci	r29, 0xFF	; 255
    42ba:	e8 81       	ld	r30, Y
    42bc:	f9 81       	ldd	r31, Y+1	; 0x01
    42be:	ca 58       	subi	r28, 0x8A	; 138
    42c0:	d0 40       	sbci	r29, 0x00	; 0
    42c2:	e5 30       	cpi	r30, 0x05	; 5
    42c4:	f1 05       	cpc	r31, r1
    42c6:	0c f4       	brge	.+2      	; 0x42ca <main+0x11c>
    42c8:	e7 c5       	rjmp	.+3022   	; 0x4e98 <main+0xcea>
    42ca:	c6 57       	subi	r28, 0x76	; 118
    42cc:	df 4f       	sbci	r29, 0xFF	; 255
    42ce:	28 81       	ld	r18, Y
    42d0:	39 81       	ldd	r19, Y+1	; 0x01
    42d2:	ca 58       	subi	r28, 0x8A	; 138
    42d4:	d0 40       	sbci	r29, 0x00	; 0
    42d6:	26 30       	cpi	r18, 0x06	; 6
    42d8:	31 05       	cpc	r19, r1
    42da:	09 f4       	brne	.+2      	; 0x42de <main+0x130>
    42dc:	64 c7       	rjmp	.+3784   	; 0x51a6 <main+0xff8>
    42de:	a6 cf       	rjmp	.-180    	; 0x422c <main+0x7e>
		{
		case STATE_NULL_STATE:
			DIO_ES_tTOGPin(DIO_U8_PORT_D, DIO_U8_PIN_7);
    42e0:	83 e0       	ldi	r24, 0x03	; 3
    42e2:	67 e0       	ldi	r22, 0x07	; 7
    42e4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <DIO_ES_tTOGPin>
    42e8:	fe 01       	movw	r30, r28
    42ea:	e5 58       	subi	r30, 0x85	; 133
    42ec:	ff 4f       	sbci	r31, 0xFF	; 255
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	aa ef       	ldi	r26, 0xFA	; 250
    42f4:	b3 e4       	ldi	r27, 0x43	; 67
    42f6:	80 83       	st	Z, r24
    42f8:	91 83       	std	Z+1, r25	; 0x01
    42fa:	a2 83       	std	Z+2, r26	; 0x02
    42fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fe:	8e 01       	movw	r16, r28
    4300:	09 58       	subi	r16, 0x89	; 137
    4302:	1f 4f       	sbci	r17, 0xFF	; 255
    4304:	fe 01       	movw	r30, r28
    4306:	e5 58       	subi	r30, 0x85	; 133
    4308:	ff 4f       	sbci	r31, 0xFF	; 255
    430a:	60 81       	ld	r22, Z
    430c:	71 81       	ldd	r23, Z+1	; 0x01
    430e:	82 81       	ldd	r24, Z+2	; 0x02
    4310:	93 81       	ldd	r25, Z+3	; 0x03
    4312:	20 e0       	ldi	r18, 0x00	; 0
    4314:	30 e0       	ldi	r19, 0x00	; 0
    4316:	4a e7       	ldi	r20, 0x7A	; 122
    4318:	55 e4       	ldi	r21, 0x45	; 69
    431a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    431e:	dc 01       	movw	r26, r24
    4320:	cb 01       	movw	r24, r22
    4322:	f8 01       	movw	r30, r16
    4324:	80 83       	st	Z, r24
    4326:	91 83       	std	Z+1, r25	; 0x01
    4328:	a2 83       	std	Z+2, r26	; 0x02
    432a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    432c:	fe 01       	movw	r30, r28
    432e:	e9 58       	subi	r30, 0x89	; 137
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	60 81       	ld	r22, Z
    4334:	71 81       	ldd	r23, Z+1	; 0x01
    4336:	82 81       	ldd	r24, Z+2	; 0x02
    4338:	93 81       	ldd	r25, Z+3	; 0x03
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	40 e8       	ldi	r20, 0x80	; 128
    4340:	5f e3       	ldi	r21, 0x3F	; 63
    4342:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4346:	88 23       	and	r24, r24
    4348:	44 f4       	brge	.+16     	; 0x435a <main+0x1ac>
		__ticks = 1;
    434a:	fe 01       	movw	r30, r28
    434c:	eb 58       	subi	r30, 0x8B	; 139
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	91 83       	std	Z+1, r25	; 0x01
    4356:	80 83       	st	Z, r24
    4358:	64 c0       	rjmp	.+200    	; 0x4422 <main+0x274>
	else if (__tmp > 65535)
    435a:	fe 01       	movw	r30, r28
    435c:	e9 58       	subi	r30, 0x89	; 137
    435e:	ff 4f       	sbci	r31, 0xFF	; 255
    4360:	60 81       	ld	r22, Z
    4362:	71 81       	ldd	r23, Z+1	; 0x01
    4364:	82 81       	ldd	r24, Z+2	; 0x02
    4366:	93 81       	ldd	r25, Z+3	; 0x03
    4368:	20 e0       	ldi	r18, 0x00	; 0
    436a:	3f ef       	ldi	r19, 0xFF	; 255
    436c:	4f e7       	ldi	r20, 0x7F	; 127
    436e:	57 e4       	ldi	r21, 0x47	; 71
    4370:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4374:	18 16       	cp	r1, r24
    4376:	0c f0       	brlt	.+2      	; 0x437a <main+0x1cc>
    4378:	43 c0       	rjmp	.+134    	; 0x4400 <main+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    437a:	fe 01       	movw	r30, r28
    437c:	e5 58       	subi	r30, 0x85	; 133
    437e:	ff 4f       	sbci	r31, 0xFF	; 255
    4380:	60 81       	ld	r22, Z
    4382:	71 81       	ldd	r23, Z+1	; 0x01
    4384:	82 81       	ldd	r24, Z+2	; 0x02
    4386:	93 81       	ldd	r25, Z+3	; 0x03
    4388:	20 e0       	ldi	r18, 0x00	; 0
    438a:	30 e0       	ldi	r19, 0x00	; 0
    438c:	40 e2       	ldi	r20, 0x20	; 32
    438e:	51 e4       	ldi	r21, 0x41	; 65
    4390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4394:	dc 01       	movw	r26, r24
    4396:	cb 01       	movw	r24, r22
    4398:	8e 01       	movw	r16, r28
    439a:	0b 58       	subi	r16, 0x8B	; 139
    439c:	1f 4f       	sbci	r17, 0xFF	; 255
    439e:	bc 01       	movw	r22, r24
    43a0:	cd 01       	movw	r24, r26
    43a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	f8 01       	movw	r30, r16
    43ac:	91 83       	std	Z+1, r25	; 0x01
    43ae:	80 83       	st	Z, r24
    43b0:	1f c0       	rjmp	.+62     	; 0x43f0 <main+0x242>
    43b2:	fe 01       	movw	r30, r28
    43b4:	ed 58       	subi	r30, 0x8D	; 141
    43b6:	ff 4f       	sbci	r31, 0xFF	; 255
    43b8:	80 e9       	ldi	r24, 0x90	; 144
    43ba:	91 e0       	ldi	r25, 0x01	; 1
    43bc:	91 83       	std	Z+1, r25	; 0x01
    43be:	80 83       	st	Z, r24
    43c0:	fe 01       	movw	r30, r28
    43c2:	ed 58       	subi	r30, 0x8D	; 141
    43c4:	ff 4f       	sbci	r31, 0xFF	; 255
    43c6:	80 81       	ld	r24, Z
    43c8:	91 81       	ldd	r25, Z+1	; 0x01
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	f1 f7       	brne	.-4      	; 0x43ca <main+0x21c>
    43ce:	fe 01       	movw	r30, r28
    43d0:	ed 58       	subi	r30, 0x8D	; 141
    43d2:	ff 4f       	sbci	r31, 0xFF	; 255
    43d4:	91 83       	std	Z+1, r25	; 0x01
    43d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d8:	de 01       	movw	r26, r28
    43da:	ab 58       	subi	r26, 0x8B	; 139
    43dc:	bf 4f       	sbci	r27, 0xFF	; 255
    43de:	fe 01       	movw	r30, r28
    43e0:	eb 58       	subi	r30, 0x8B	; 139
    43e2:	ff 4f       	sbci	r31, 0xFF	; 255
    43e4:	80 81       	ld	r24, Z
    43e6:	91 81       	ldd	r25, Z+1	; 0x01
    43e8:	01 97       	sbiw	r24, 0x01	; 1
    43ea:	11 96       	adiw	r26, 0x01	; 1
    43ec:	9c 93       	st	X, r25
    43ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43f0:	fe 01       	movw	r30, r28
    43f2:	eb 58       	subi	r30, 0x8B	; 139
    43f4:	ff 4f       	sbci	r31, 0xFF	; 255
    43f6:	80 81       	ld	r24, Z
    43f8:	91 81       	ldd	r25, Z+1	; 0x01
    43fa:	00 97       	sbiw	r24, 0x00	; 0
    43fc:	d1 f6       	brne	.-76     	; 0x43b2 <main+0x204>
    43fe:	16 cf       	rjmp	.-468    	; 0x422c <main+0x7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4400:	8e 01       	movw	r16, r28
    4402:	0b 58       	subi	r16, 0x8B	; 139
    4404:	1f 4f       	sbci	r17, 0xFF	; 255
    4406:	fe 01       	movw	r30, r28
    4408:	e9 58       	subi	r30, 0x89	; 137
    440a:	ff 4f       	sbci	r31, 0xFF	; 255
    440c:	60 81       	ld	r22, Z
    440e:	71 81       	ldd	r23, Z+1	; 0x01
    4410:	82 81       	ldd	r24, Z+2	; 0x02
    4412:	93 81       	ldd	r25, Z+3	; 0x03
    4414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4418:	dc 01       	movw	r26, r24
    441a:	cb 01       	movw	r24, r22
    441c:	f8 01       	movw	r30, r16
    441e:	91 83       	std	Z+1, r25	; 0x01
    4420:	80 83       	st	Z, r24
    4422:	de 01       	movw	r26, r28
    4424:	af 58       	subi	r26, 0x8F	; 143
    4426:	bf 4f       	sbci	r27, 0xFF	; 255
    4428:	fe 01       	movw	r30, r28
    442a:	eb 58       	subi	r30, 0x8B	; 139
    442c:	ff 4f       	sbci	r31, 0xFF	; 255
    442e:	80 81       	ld	r24, Z
    4430:	91 81       	ldd	r25, Z+1	; 0x01
    4432:	11 96       	adiw	r26, 0x01	; 1
    4434:	9c 93       	st	X, r25
    4436:	8e 93       	st	-X, r24
    4438:	fe 01       	movw	r30, r28
    443a:	ef 58       	subi	r30, 0x8F	; 143
    443c:	ff 4f       	sbci	r31, 0xFF	; 255
    443e:	80 81       	ld	r24, Z
    4440:	91 81       	ldd	r25, Z+1	; 0x01
    4442:	01 97       	sbiw	r24, 0x01	; 1
    4444:	f1 f7       	brne	.-4      	; 0x4442 <main+0x294>
    4446:	fe 01       	movw	r30, r28
    4448:	ef 58       	subi	r30, 0x8F	; 143
    444a:	ff 4f       	sbci	r31, 0xFF	; 255
    444c:	91 83       	std	Z+1, r25	; 0x01
    444e:	80 83       	st	Z, r24
    4450:	ed ce       	rjmp	.-550    	; 0x422c <main+0x7e>
			_delay_ms(500);
			break;


		case STATE_MAIN_SCREEN:
			KPD_ES_tGetKeyPressed(&Value);
    4452:	ce 01       	movw	r24, r28
    4454:	8c 57       	subi	r24, 0x7C	; 124
    4456:	9f 4f       	sbci	r25, 0xFF	; 255
    4458:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <KPD_ES_tGetKeyPressed>
			if(Value != KPD_U8_NOT_PRESSED){
    445c:	fe 01       	movw	r30, r28
    445e:	ec 57       	subi	r30, 0x7C	; 124
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	80 81       	ld	r24, Z
    4464:	8f 3f       	cpi	r24, 0xFF	; 255
    4466:	09 f4       	brne	.+2      	; 0x446a <main+0x2bc>
    4468:	e1 ce       	rjmp	.-574    	; 0x422c <main+0x7e>

				Lcd_ES_tsendChar('*');
    446a:	8a e2       	ldi	r24, 0x2A	; 42
    446c:	0e 94 94 1a 	call	0x3528	; 0x3528 <Lcd_ES_tsendChar>
				input[indexz] = Value; // Store input in array
    4470:	80 91 f5 02 	lds	r24, 0x02F5
    4474:	88 2f       	mov	r24, r24
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	fe 01       	movw	r30, r28
    447a:	ec 57       	subi	r30, 0x7C	; 124
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	20 81       	ld	r18, Z
    4480:	fc 01       	movw	r30, r24
    4482:	e0 51       	subi	r30, 0x10	; 16
    4484:	fd 4f       	sbci	r31, 0xFD	; 253
    4486:	20 83       	st	Z, r18
				indexz++;
    4488:	80 91 f5 02 	lds	r24, 0x02F5
    448c:	8f 5f       	subi	r24, 0xFF	; 255
    448e:	80 93 f5 02 	sts	0x02F5, r24
				if (indexz >= 4) { // Check if password entered
    4492:	80 91 f5 02 	lds	r24, 0x02F5
    4496:	84 30       	cpi	r24, 0x04	; 4
    4498:	08 f4       	brcc	.+2      	; 0x449c <main+0x2ee>
    449a:	c8 ce       	rjmp	.-624    	; 0x422c <main+0x7e>
					if (strcmp(input, password) == 0) {
    449c:	80 ef       	ldi	r24, 0xF0	; 240
    449e:	92 e0       	ldi	r25, 0x02	; 2
    44a0:	2c ea       	ldi	r18, 0xAC	; 172
    44a2:	32 e0       	ldi	r19, 0x02	; 2
    44a4:	b9 01       	movw	r22, r18
    44a6:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <strcmp>
    44aa:	00 97       	sbiw	r24, 0x00	; 0
    44ac:	09 f0       	breq	.+2      	; 0x44b0 <main+0x302>
    44ae:	c6 c0       	rjmp	.+396    	; 0x463c <main+0x48e>
						// Password is correct, perform action
						lcd_ES_tclear();
    44b0:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <lcd_ES_tclear>
						Lcd_ES_tsendString("Welcome to Motor");
    44b4:	81 e7       	ldi	r24, 0x71	; 113
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 0);
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	60 e0       	ldi	r22, 0x00	; 0
    44c0:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LCD_ES_tGoTo>
						Lcd_ES_tsendString("Dash board");
    44c4:	82 e8       	ldi	r24, 0x82	; 130
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
    44cc:	fe 01       	movw	r30, r28
    44ce:	e3 59       	subi	r30, 0x93	; 147
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	80 e0       	ldi	r24, 0x00	; 0
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	aa ef       	ldi	r26, 0xFA	; 250
    44d8:	b4 e4       	ldi	r27, 0x44	; 68
    44da:	80 83       	st	Z, r24
    44dc:	91 83       	std	Z+1, r25	; 0x01
    44de:	a2 83       	std	Z+2, r26	; 0x02
    44e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44e2:	8e 01       	movw	r16, r28
    44e4:	07 59       	subi	r16, 0x97	; 151
    44e6:	1f 4f       	sbci	r17, 0xFF	; 255
    44e8:	fe 01       	movw	r30, r28
    44ea:	e3 59       	subi	r30, 0x93	; 147
    44ec:	ff 4f       	sbci	r31, 0xFF	; 255
    44ee:	60 81       	ld	r22, Z
    44f0:	71 81       	ldd	r23, Z+1	; 0x01
    44f2:	82 81       	ldd	r24, Z+2	; 0x02
    44f4:	93 81       	ldd	r25, Z+3	; 0x03
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	4a e7       	ldi	r20, 0x7A	; 122
    44fc:	55 e4       	ldi	r21, 0x45	; 69
    44fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	f8 01       	movw	r30, r16
    4508:	80 83       	st	Z, r24
    450a:	91 83       	std	Z+1, r25	; 0x01
    450c:	a2 83       	std	Z+2, r26	; 0x02
    450e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4510:	fe 01       	movw	r30, r28
    4512:	e7 59       	subi	r30, 0x97	; 151
    4514:	ff 4f       	sbci	r31, 0xFF	; 255
    4516:	60 81       	ld	r22, Z
    4518:	71 81       	ldd	r23, Z+1	; 0x01
    451a:	82 81       	ldd	r24, Z+2	; 0x02
    451c:	93 81       	ldd	r25, Z+3	; 0x03
    451e:	20 e0       	ldi	r18, 0x00	; 0
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	40 e8       	ldi	r20, 0x80	; 128
    4524:	5f e3       	ldi	r21, 0x3F	; 63
    4526:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    452a:	88 23       	and	r24, r24
    452c:	44 f4       	brge	.+16     	; 0x453e <main+0x390>
		__ticks = 1;
    452e:	fe 01       	movw	r30, r28
    4530:	e9 59       	subi	r30, 0x99	; 153
    4532:	ff 4f       	sbci	r31, 0xFF	; 255
    4534:	81 e0       	ldi	r24, 0x01	; 1
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	91 83       	std	Z+1, r25	; 0x01
    453a:	80 83       	st	Z, r24
    453c:	64 c0       	rjmp	.+200    	; 0x4606 <main+0x458>
	else if (__tmp > 65535)
    453e:	fe 01       	movw	r30, r28
    4540:	e7 59       	subi	r30, 0x97	; 151
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	60 81       	ld	r22, Z
    4546:	71 81       	ldd	r23, Z+1	; 0x01
    4548:	82 81       	ldd	r24, Z+2	; 0x02
    454a:	93 81       	ldd	r25, Z+3	; 0x03
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	3f ef       	ldi	r19, 0xFF	; 255
    4550:	4f e7       	ldi	r20, 0x7F	; 127
    4552:	57 e4       	ldi	r21, 0x47	; 71
    4554:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4558:	18 16       	cp	r1, r24
    455a:	0c f0       	brlt	.+2      	; 0x455e <main+0x3b0>
    455c:	43 c0       	rjmp	.+134    	; 0x45e4 <main+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    455e:	fe 01       	movw	r30, r28
    4560:	e3 59       	subi	r30, 0x93	; 147
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	60 81       	ld	r22, Z
    4566:	71 81       	ldd	r23, Z+1	; 0x01
    4568:	82 81       	ldd	r24, Z+2	; 0x02
    456a:	93 81       	ldd	r25, Z+3	; 0x03
    456c:	20 e0       	ldi	r18, 0x00	; 0
    456e:	30 e0       	ldi	r19, 0x00	; 0
    4570:	40 e2       	ldi	r20, 0x20	; 32
    4572:	51 e4       	ldi	r21, 0x41	; 65
    4574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4578:	dc 01       	movw	r26, r24
    457a:	cb 01       	movw	r24, r22
    457c:	8e 01       	movw	r16, r28
    457e:	09 59       	subi	r16, 0x99	; 153
    4580:	1f 4f       	sbci	r17, 0xFF	; 255
    4582:	bc 01       	movw	r22, r24
    4584:	cd 01       	movw	r24, r26
    4586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    458a:	dc 01       	movw	r26, r24
    458c:	cb 01       	movw	r24, r22
    458e:	f8 01       	movw	r30, r16
    4590:	91 83       	std	Z+1, r25	; 0x01
    4592:	80 83       	st	Z, r24
    4594:	1f c0       	rjmp	.+62     	; 0x45d4 <main+0x426>
    4596:	fe 01       	movw	r30, r28
    4598:	eb 59       	subi	r30, 0x9B	; 155
    459a:	ff 4f       	sbci	r31, 0xFF	; 255
    459c:	80 e9       	ldi	r24, 0x90	; 144
    459e:	91 e0       	ldi	r25, 0x01	; 1
    45a0:	91 83       	std	Z+1, r25	; 0x01
    45a2:	80 83       	st	Z, r24
    45a4:	fe 01       	movw	r30, r28
    45a6:	eb 59       	subi	r30, 0x9B	; 155
    45a8:	ff 4f       	sbci	r31, 0xFF	; 255
    45aa:	80 81       	ld	r24, Z
    45ac:	91 81       	ldd	r25, Z+1	; 0x01
    45ae:	01 97       	sbiw	r24, 0x01	; 1
    45b0:	f1 f7       	brne	.-4      	; 0x45ae <main+0x400>
    45b2:	fe 01       	movw	r30, r28
    45b4:	eb 59       	subi	r30, 0x9B	; 155
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	91 83       	std	Z+1, r25	; 0x01
    45ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45bc:	de 01       	movw	r26, r28
    45be:	a9 59       	subi	r26, 0x99	; 153
    45c0:	bf 4f       	sbci	r27, 0xFF	; 255
    45c2:	fe 01       	movw	r30, r28
    45c4:	e9 59       	subi	r30, 0x99	; 153
    45c6:	ff 4f       	sbci	r31, 0xFF	; 255
    45c8:	80 81       	ld	r24, Z
    45ca:	91 81       	ldd	r25, Z+1	; 0x01
    45cc:	01 97       	sbiw	r24, 0x01	; 1
    45ce:	11 96       	adiw	r26, 0x01	; 1
    45d0:	9c 93       	st	X, r25
    45d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45d4:	fe 01       	movw	r30, r28
    45d6:	e9 59       	subi	r30, 0x99	; 153
    45d8:	ff 4f       	sbci	r31, 0xFF	; 255
    45da:	80 81       	ld	r24, Z
    45dc:	91 81       	ldd	r25, Z+1	; 0x01
    45de:	00 97       	sbiw	r24, 0x00	; 0
    45e0:	d1 f6       	brne	.-76     	; 0x4596 <main+0x3e8>
    45e2:	28 c0       	rjmp	.+80     	; 0x4634 <main+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45e4:	8e 01       	movw	r16, r28
    45e6:	09 59       	subi	r16, 0x99	; 153
    45e8:	1f 4f       	sbci	r17, 0xFF	; 255
    45ea:	fe 01       	movw	r30, r28
    45ec:	e7 59       	subi	r30, 0x97	; 151
    45ee:	ff 4f       	sbci	r31, 0xFF	; 255
    45f0:	60 81       	ld	r22, Z
    45f2:	71 81       	ldd	r23, Z+1	; 0x01
    45f4:	82 81       	ldd	r24, Z+2	; 0x02
    45f6:	93 81       	ldd	r25, Z+3	; 0x03
    45f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	f8 01       	movw	r30, r16
    4602:	91 83       	std	Z+1, r25	; 0x01
    4604:	80 83       	st	Z, r24
    4606:	de 01       	movw	r26, r28
    4608:	ad 59       	subi	r26, 0x9D	; 157
    460a:	bf 4f       	sbci	r27, 0xFF	; 255
    460c:	fe 01       	movw	r30, r28
    460e:	e9 59       	subi	r30, 0x99	; 153
    4610:	ff 4f       	sbci	r31, 0xFF	; 255
    4612:	80 81       	ld	r24, Z
    4614:	91 81       	ldd	r25, Z+1	; 0x01
    4616:	11 96       	adiw	r26, 0x01	; 1
    4618:	9c 93       	st	X, r25
    461a:	8e 93       	st	-X, r24
    461c:	fe 01       	movw	r30, r28
    461e:	ed 59       	subi	r30, 0x9D	; 157
    4620:	ff 4f       	sbci	r31, 0xFF	; 255
    4622:	80 81       	ld	r24, Z
    4624:	91 81       	ldd	r25, Z+1	; 0x01
    4626:	01 97       	sbiw	r24, 0x01	; 1
    4628:	f1 f7       	brne	.-4      	; 0x4626 <main+0x478>
    462a:	fe 01       	movw	r30, r28
    462c:	ed 59       	subi	r30, 0x9D	; 157
    462e:	ff 4f       	sbci	r31, 0xFF	; 255
    4630:	91 83       	std	Z+1, r25	; 0x01
    4632:	80 83       	st	Z, r24
						_delay_ms(2000);
						currentState = STATE_MOTOR_OPTIONS;
    4634:	82 e0       	ldi	r24, 0x02	; 2
    4636:	80 93 1a 03 	sts	0x031A, r24
    463a:	f8 cd       	rjmp	.-1040   	; 0x422c <main+0x7e>
					}
					else {
						// Password is incorrect, reset input
						lcd_ES_tclear();
    463c:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <lcd_ES_tclear>
						Lcd_ES_tsendString("Wrong Password");
    4640:	8d e8       	ldi	r24, 0x8D	; 141
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
						memset(input, '\0', sizeof(input));
    4648:	80 ef       	ldi	r24, 0xF0	; 240
    464a:	92 e0       	ldi	r25, 0x02	; 2
    464c:	60 e0       	ldi	r22, 0x00	; 0
    464e:	70 e0       	ldi	r23, 0x00	; 0
    4650:	45 e0       	ldi	r20, 0x05	; 5
    4652:	50 e0       	ldi	r21, 0x00	; 0
    4654:	0e 94 e5 29 	call	0x53ca	; 0x53ca <memset>
						indexz = 0;
    4658:	10 92 f5 02 	sts	0x02F5, r1
    465c:	fe 01       	movw	r30, r28
    465e:	e1 5a       	subi	r30, 0xA1	; 161
    4660:	ff 4f       	sbci	r31, 0xFF	; 255
    4662:	80 e0       	ldi	r24, 0x00	; 0
    4664:	90 e8       	ldi	r25, 0x80	; 128
    4666:	ab eb       	ldi	r26, 0xBB	; 187
    4668:	b4 e4       	ldi	r27, 0x44	; 68
    466a:	80 83       	st	Z, r24
    466c:	91 83       	std	Z+1, r25	; 0x01
    466e:	a2 83       	std	Z+2, r26	; 0x02
    4670:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4672:	8e 01       	movw	r16, r28
    4674:	05 5a       	subi	r16, 0xA5	; 165
    4676:	1f 4f       	sbci	r17, 0xFF	; 255
    4678:	fe 01       	movw	r30, r28
    467a:	e1 5a       	subi	r30, 0xA1	; 161
    467c:	ff 4f       	sbci	r31, 0xFF	; 255
    467e:	60 81       	ld	r22, Z
    4680:	71 81       	ldd	r23, Z+1	; 0x01
    4682:	82 81       	ldd	r24, Z+2	; 0x02
    4684:	93 81       	ldd	r25, Z+3	; 0x03
    4686:	20 e0       	ldi	r18, 0x00	; 0
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	4a e7       	ldi	r20, 0x7A	; 122
    468c:	55 e4       	ldi	r21, 0x45	; 69
    468e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4692:	dc 01       	movw	r26, r24
    4694:	cb 01       	movw	r24, r22
    4696:	f8 01       	movw	r30, r16
    4698:	80 83       	st	Z, r24
    469a:	91 83       	std	Z+1, r25	; 0x01
    469c:	a2 83       	std	Z+2, r26	; 0x02
    469e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46a0:	fe 01       	movw	r30, r28
    46a2:	e5 5a       	subi	r30, 0xA5	; 165
    46a4:	ff 4f       	sbci	r31, 0xFF	; 255
    46a6:	60 81       	ld	r22, Z
    46a8:	71 81       	ldd	r23, Z+1	; 0x01
    46aa:	82 81       	ldd	r24, Z+2	; 0x02
    46ac:	93 81       	ldd	r25, Z+3	; 0x03
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	40 e8       	ldi	r20, 0x80	; 128
    46b4:	5f e3       	ldi	r21, 0x3F	; 63
    46b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46ba:	88 23       	and	r24, r24
    46bc:	44 f4       	brge	.+16     	; 0x46ce <main+0x520>
		__ticks = 1;
    46be:	fe 01       	movw	r30, r28
    46c0:	e7 5a       	subi	r30, 0xA7	; 167
    46c2:	ff 4f       	sbci	r31, 0xFF	; 255
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	91 83       	std	Z+1, r25	; 0x01
    46ca:	80 83       	st	Z, r24
    46cc:	64 c0       	rjmp	.+200    	; 0x4796 <main+0x5e8>
	else if (__tmp > 65535)
    46ce:	fe 01       	movw	r30, r28
    46d0:	e5 5a       	subi	r30, 0xA5	; 165
    46d2:	ff 4f       	sbci	r31, 0xFF	; 255
    46d4:	60 81       	ld	r22, Z
    46d6:	71 81       	ldd	r23, Z+1	; 0x01
    46d8:	82 81       	ldd	r24, Z+2	; 0x02
    46da:	93 81       	ldd	r25, Z+3	; 0x03
    46dc:	20 e0       	ldi	r18, 0x00	; 0
    46de:	3f ef       	ldi	r19, 0xFF	; 255
    46e0:	4f e7       	ldi	r20, 0x7F	; 127
    46e2:	57 e4       	ldi	r21, 0x47	; 71
    46e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46e8:	18 16       	cp	r1, r24
    46ea:	0c f0       	brlt	.+2      	; 0x46ee <main+0x540>
    46ec:	43 c0       	rjmp	.+134    	; 0x4774 <main+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46ee:	fe 01       	movw	r30, r28
    46f0:	e1 5a       	subi	r30, 0xA1	; 161
    46f2:	ff 4f       	sbci	r31, 0xFF	; 255
    46f4:	60 81       	ld	r22, Z
    46f6:	71 81       	ldd	r23, Z+1	; 0x01
    46f8:	82 81       	ldd	r24, Z+2	; 0x02
    46fa:	93 81       	ldd	r25, Z+3	; 0x03
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	40 e2       	ldi	r20, 0x20	; 32
    4702:	51 e4       	ldi	r21, 0x41	; 65
    4704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4708:	dc 01       	movw	r26, r24
    470a:	cb 01       	movw	r24, r22
    470c:	8e 01       	movw	r16, r28
    470e:	07 5a       	subi	r16, 0xA7	; 167
    4710:	1f 4f       	sbci	r17, 0xFF	; 255
    4712:	bc 01       	movw	r22, r24
    4714:	cd 01       	movw	r24, r26
    4716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    471a:	dc 01       	movw	r26, r24
    471c:	cb 01       	movw	r24, r22
    471e:	f8 01       	movw	r30, r16
    4720:	91 83       	std	Z+1, r25	; 0x01
    4722:	80 83       	st	Z, r24
    4724:	1f c0       	rjmp	.+62     	; 0x4764 <main+0x5b6>
    4726:	fe 01       	movw	r30, r28
    4728:	e9 5a       	subi	r30, 0xA9	; 169
    472a:	ff 4f       	sbci	r31, 0xFF	; 255
    472c:	80 e9       	ldi	r24, 0x90	; 144
    472e:	91 e0       	ldi	r25, 0x01	; 1
    4730:	91 83       	std	Z+1, r25	; 0x01
    4732:	80 83       	st	Z, r24
    4734:	fe 01       	movw	r30, r28
    4736:	e9 5a       	subi	r30, 0xA9	; 169
    4738:	ff 4f       	sbci	r31, 0xFF	; 255
    473a:	80 81       	ld	r24, Z
    473c:	91 81       	ldd	r25, Z+1	; 0x01
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	f1 f7       	brne	.-4      	; 0x473e <main+0x590>
    4742:	fe 01       	movw	r30, r28
    4744:	e9 5a       	subi	r30, 0xA9	; 169
    4746:	ff 4f       	sbci	r31, 0xFF	; 255
    4748:	91 83       	std	Z+1, r25	; 0x01
    474a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    474c:	de 01       	movw	r26, r28
    474e:	a7 5a       	subi	r26, 0xA7	; 167
    4750:	bf 4f       	sbci	r27, 0xFF	; 255
    4752:	fe 01       	movw	r30, r28
    4754:	e7 5a       	subi	r30, 0xA7	; 167
    4756:	ff 4f       	sbci	r31, 0xFF	; 255
    4758:	80 81       	ld	r24, Z
    475a:	91 81       	ldd	r25, Z+1	; 0x01
    475c:	01 97       	sbiw	r24, 0x01	; 1
    475e:	11 96       	adiw	r26, 0x01	; 1
    4760:	9c 93       	st	X, r25
    4762:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4764:	fe 01       	movw	r30, r28
    4766:	e7 5a       	subi	r30, 0xA7	; 167
    4768:	ff 4f       	sbci	r31, 0xFF	; 255
    476a:	80 81       	ld	r24, Z
    476c:	91 81       	ldd	r25, Z+1	; 0x01
    476e:	00 97       	sbiw	r24, 0x00	; 0
    4770:	d1 f6       	brne	.-76     	; 0x4726 <main+0x578>
    4772:	27 c0       	rjmp	.+78     	; 0x47c2 <main+0x614>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4774:	8e 01       	movw	r16, r28
    4776:	07 5a       	subi	r16, 0xA7	; 167
    4778:	1f 4f       	sbci	r17, 0xFF	; 255
    477a:	fe 01       	movw	r30, r28
    477c:	e5 5a       	subi	r30, 0xA5	; 165
    477e:	ff 4f       	sbci	r31, 0xFF	; 255
    4780:	60 81       	ld	r22, Z
    4782:	71 81       	ldd	r23, Z+1	; 0x01
    4784:	82 81       	ldd	r24, Z+2	; 0x02
    4786:	93 81       	ldd	r25, Z+3	; 0x03
    4788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    478c:	dc 01       	movw	r26, r24
    478e:	cb 01       	movw	r24, r22
    4790:	f8 01       	movw	r30, r16
    4792:	91 83       	std	Z+1, r25	; 0x01
    4794:	80 83       	st	Z, r24
    4796:	de 01       	movw	r26, r28
    4798:	ab 5a       	subi	r26, 0xAB	; 171
    479a:	bf 4f       	sbci	r27, 0xFF	; 255
    479c:	fe 01       	movw	r30, r28
    479e:	e7 5a       	subi	r30, 0xA7	; 167
    47a0:	ff 4f       	sbci	r31, 0xFF	; 255
    47a2:	80 81       	ld	r24, Z
    47a4:	91 81       	ldd	r25, Z+1	; 0x01
    47a6:	8d 93       	st	X+, r24
    47a8:	9c 93       	st	X, r25
    47aa:	fe 01       	movw	r30, r28
    47ac:	eb 5a       	subi	r30, 0xAB	; 171
    47ae:	ff 4f       	sbci	r31, 0xFF	; 255
    47b0:	80 81       	ld	r24, Z
    47b2:	91 81       	ldd	r25, Z+1	; 0x01
    47b4:	01 97       	sbiw	r24, 0x01	; 1
    47b6:	f1 f7       	brne	.-4      	; 0x47b4 <main+0x606>
    47b8:	fe 01       	movw	r30, r28
    47ba:	eb 5a       	subi	r30, 0xAB	; 171
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	91 83       	std	Z+1, r25	; 0x01
    47c0:	80 83       	st	Z, r24
						_delay_ms(1500);
						count++;
    47c2:	de 01       	movw	r26, r28
    47c4:	ad 57       	subi	r26, 0x7D	; 125
    47c6:	bf 4f       	sbci	r27, 0xFF	; 255
    47c8:	fe 01       	movw	r30, r28
    47ca:	ed 57       	subi	r30, 0x7D	; 125
    47cc:	ff 4f       	sbci	r31, 0xFF	; 255
    47ce:	80 81       	ld	r24, Z
    47d0:	8f 5f       	subi	r24, 0xFF	; 255
    47d2:	8c 93       	st	X, r24
						lcd_ES_tclear();
    47d4:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <lcd_ES_tclear>
						Lcd_ES_tsendString("Try again");
    47d8:	8c e9       	ldi	r24, 0x9C	; 156
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 5);
    47e0:	81 e0       	ldi	r24, 0x01	; 1
    47e2:	65 e0       	ldi	r22, 0x05	; 5
    47e4:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LCD_ES_tGoTo>
						if(count == 3){
    47e8:	fe 01       	movw	r30, r28
    47ea:	ed 57       	subi	r30, 0x7D	; 125
    47ec:	ff 4f       	sbci	r31, 0xFF	; 255
    47ee:	80 81       	ld	r24, Z
    47f0:	83 30       	cpi	r24, 0x03	; 3
    47f2:	09 f0       	breq	.+2      	; 0x47f6 <main+0x648>
    47f4:	1b cd       	rjmp	.-1482   	; 0x422c <main+0x7e>
							lcd_ES_tclear();
    47f6:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <lcd_ES_tclear>
							Lcd_ES_tsendString("Blocked !!!");
    47fa:	86 ea       	ldi	r24, 0xA6	; 166
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
							count=0;
    4802:	fe 01       	movw	r30, r28
    4804:	ed 57       	subi	r30, 0x7D	; 125
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	10 82       	st	Z, r1
    480a:	10 cd       	rjmp	.-1504   	; 0x422c <main+0x7e>

			break;


		case STATE_MOTOR_OPTIONS:
			if (!gettingMotorOption) {
    480c:	80 91 08 03 	lds	r24, 0x0308
    4810:	88 23       	and	r24, r24
    4812:	c9 f4       	brne	.+50     	; 0x4846 <main+0x698>
				lcd_ES_tclear();
    4814:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <lcd_ES_tclear>
				Lcd_ES_tsendString("1- DC Motor");
    4818:	82 eb       	ldi	r24, 0xB2	; 178
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(1, 0);
    4820:	81 e0       	ldi	r24, 0x01	; 1
    4822:	60 e0       	ldi	r22, 0x00	; 0
    4824:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LCD_ES_tGoTo>
				Lcd_ES_tsendString("2- Stepper");
    4828:	8e eb       	ldi	r24, 0xBE	; 190
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(2, 0);
    4830:	82 e0       	ldi	r24, 0x02	; 2
    4832:	60 e0       	ldi	r22, 0x00	; 0
    4834:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LCD_ES_tGoTo>
				Lcd_ES_tsendString("3- Servo Motor");
    4838:	89 ec       	ldi	r24, 0xC9	; 201
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
				gettingMotorOption = 1;
    4840:	81 e0       	ldi	r24, 0x01	; 1
    4842:	80 93 08 03 	sts	0x0308, r24
			}

			KPD_ES_tGetKeyPressed(&Option);
    4846:	ce 01       	movw	r24, r28
    4848:	8b 57       	subi	r24, 0x7B	; 123
    484a:	9f 4f       	sbci	r25, 0xFF	; 255
    484c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <KPD_ES_tGetKeyPressed>
			if (Option != KPD_U8_NOT_PRESSED) {
    4850:	fe 01       	movw	r30, r28
    4852:	eb 57       	subi	r30, 0x7B	; 123
    4854:	ff 4f       	sbci	r31, 0xFF	; 255
    4856:	80 81       	ld	r24, Z
    4858:	8f 3f       	cpi	r24, 0xFF	; 255
    485a:	09 f4       	brne	.+2      	; 0x485e <main+0x6b0>
    485c:	e7 cc       	rjmp	.-1586   	; 0x422c <main+0x7e>
				if (Option == '1') {  // DC Motor
    485e:	fe 01       	movw	r30, r28
    4860:	eb 57       	subi	r30, 0x7B	; 123
    4862:	ff 4f       	sbci	r31, 0xFF	; 255
    4864:	80 81       	ld	r24, Z
    4866:	81 33       	cpi	r24, 0x31	; 49
    4868:	31 f4       	brne	.+12     	; 0x4876 <main+0x6c8>
					gettingMotorOption = 0;
    486a:	10 92 08 03 	sts	0x0308, r1
					currentState = STATE_DC_MOTOR_MOVE;
    486e:	83 e0       	ldi	r24, 0x03	; 3
    4870:	80 93 1a 03 	sts	0x031A, r24
    4874:	db cc       	rjmp	.-1610   	; 0x422c <main+0x7e>
				} else if (Option == '2') {  // Stepper Motor
    4876:	fe 01       	movw	r30, r28
    4878:	eb 57       	subi	r30, 0x7B	; 123
    487a:	ff 4f       	sbci	r31, 0xFF	; 255
    487c:	80 81       	ld	r24, Z
    487e:	82 33       	cpi	r24, 0x32	; 50
    4880:	21 f4       	brne	.+8      	; 0x488a <main+0x6dc>
					currentState = STATE_STEPPER_MOVE;
    4882:	84 e0       	ldi	r24, 0x04	; 4
    4884:	80 93 1a 03 	sts	0x031A, r24
    4888:	d1 cc       	rjmp	.-1630   	; 0x422c <main+0x7e>
				}else if (Option == '3') {  // Stepper Motor
    488a:	fe 01       	movw	r30, r28
    488c:	eb 57       	subi	r30, 0x7B	; 123
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	80 81       	ld	r24, Z
    4892:	83 33       	cpi	r24, 0x33	; 51
    4894:	21 f4       	brne	.+8      	; 0x489e <main+0x6f0>
					currentState = STATE_SERVO_MOVE;
    4896:	85 e0       	ldi	r24, 0x05	; 5
    4898:	80 93 1a 03 	sts	0x031A, r24
    489c:	c7 cc       	rjmp	.-1650   	; 0x422c <main+0x7e>
				}else {
					lcd_ES_tclear();
    489e:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <lcd_ES_tclear>
					Lcd_ES_tsendString("Invalid Option");
    48a2:	88 ed       	ldi	r24, 0xD8	; 216
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
    48aa:	fe 01       	movw	r30, r28
    48ac:	ef 5a       	subi	r30, 0xAF	; 175
    48ae:	ff 4f       	sbci	r31, 0xFF	; 255
    48b0:	80 e0       	ldi	r24, 0x00	; 0
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	aa ef       	ldi	r26, 0xFA	; 250
    48b6:	b4 e4       	ldi	r27, 0x44	; 68
    48b8:	80 83       	st	Z, r24
    48ba:	91 83       	std	Z+1, r25	; 0x01
    48bc:	a2 83       	std	Z+2, r26	; 0x02
    48be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48c0:	8e 01       	movw	r16, r28
    48c2:	03 5b       	subi	r16, 0xB3	; 179
    48c4:	1f 4f       	sbci	r17, 0xFF	; 255
    48c6:	fe 01       	movw	r30, r28
    48c8:	ef 5a       	subi	r30, 0xAF	; 175
    48ca:	ff 4f       	sbci	r31, 0xFF	; 255
    48cc:	60 81       	ld	r22, Z
    48ce:	71 81       	ldd	r23, Z+1	; 0x01
    48d0:	82 81       	ldd	r24, Z+2	; 0x02
    48d2:	93 81       	ldd	r25, Z+3	; 0x03
    48d4:	20 e0       	ldi	r18, 0x00	; 0
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	4a e7       	ldi	r20, 0x7A	; 122
    48da:	55 e4       	ldi	r21, 0x45	; 69
    48dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	f8 01       	movw	r30, r16
    48e6:	80 83       	st	Z, r24
    48e8:	91 83       	std	Z+1, r25	; 0x01
    48ea:	a2 83       	std	Z+2, r26	; 0x02
    48ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48ee:	fe 01       	movw	r30, r28
    48f0:	e3 5b       	subi	r30, 0xB3	; 179
    48f2:	ff 4f       	sbci	r31, 0xFF	; 255
    48f4:	60 81       	ld	r22, Z
    48f6:	71 81       	ldd	r23, Z+1	; 0x01
    48f8:	82 81       	ldd	r24, Z+2	; 0x02
    48fa:	93 81       	ldd	r25, Z+3	; 0x03
    48fc:	20 e0       	ldi	r18, 0x00	; 0
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	40 e8       	ldi	r20, 0x80	; 128
    4902:	5f e3       	ldi	r21, 0x3F	; 63
    4904:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4908:	88 23       	and	r24, r24
    490a:	44 f4       	brge	.+16     	; 0x491c <main+0x76e>
		__ticks = 1;
    490c:	fe 01       	movw	r30, r28
    490e:	e5 5b       	subi	r30, 0xB5	; 181
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	81 e0       	ldi	r24, 0x01	; 1
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	91 83       	std	Z+1, r25	; 0x01
    4918:	80 83       	st	Z, r24
    491a:	64 c0       	rjmp	.+200    	; 0x49e4 <main+0x836>
	else if (__tmp > 65535)
    491c:	fe 01       	movw	r30, r28
    491e:	e3 5b       	subi	r30, 0xB3	; 179
    4920:	ff 4f       	sbci	r31, 0xFF	; 255
    4922:	60 81       	ld	r22, Z
    4924:	71 81       	ldd	r23, Z+1	; 0x01
    4926:	82 81       	ldd	r24, Z+2	; 0x02
    4928:	93 81       	ldd	r25, Z+3	; 0x03
    492a:	20 e0       	ldi	r18, 0x00	; 0
    492c:	3f ef       	ldi	r19, 0xFF	; 255
    492e:	4f e7       	ldi	r20, 0x7F	; 127
    4930:	57 e4       	ldi	r21, 0x47	; 71
    4932:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4936:	18 16       	cp	r1, r24
    4938:	0c f0       	brlt	.+2      	; 0x493c <main+0x78e>
    493a:	43 c0       	rjmp	.+134    	; 0x49c2 <main+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    493c:	fe 01       	movw	r30, r28
    493e:	ef 5a       	subi	r30, 0xAF	; 175
    4940:	ff 4f       	sbci	r31, 0xFF	; 255
    4942:	60 81       	ld	r22, Z
    4944:	71 81       	ldd	r23, Z+1	; 0x01
    4946:	82 81       	ldd	r24, Z+2	; 0x02
    4948:	93 81       	ldd	r25, Z+3	; 0x03
    494a:	20 e0       	ldi	r18, 0x00	; 0
    494c:	30 e0       	ldi	r19, 0x00	; 0
    494e:	40 e2       	ldi	r20, 0x20	; 32
    4950:	51 e4       	ldi	r21, 0x41	; 65
    4952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4956:	dc 01       	movw	r26, r24
    4958:	cb 01       	movw	r24, r22
    495a:	8e 01       	movw	r16, r28
    495c:	05 5b       	subi	r16, 0xB5	; 181
    495e:	1f 4f       	sbci	r17, 0xFF	; 255
    4960:	bc 01       	movw	r22, r24
    4962:	cd 01       	movw	r24, r26
    4964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4968:	dc 01       	movw	r26, r24
    496a:	cb 01       	movw	r24, r22
    496c:	f8 01       	movw	r30, r16
    496e:	91 83       	std	Z+1, r25	; 0x01
    4970:	80 83       	st	Z, r24
    4972:	1f c0       	rjmp	.+62     	; 0x49b2 <main+0x804>
    4974:	fe 01       	movw	r30, r28
    4976:	e7 5b       	subi	r30, 0xB7	; 183
    4978:	ff 4f       	sbci	r31, 0xFF	; 255
    497a:	80 e9       	ldi	r24, 0x90	; 144
    497c:	91 e0       	ldi	r25, 0x01	; 1
    497e:	91 83       	std	Z+1, r25	; 0x01
    4980:	80 83       	st	Z, r24
    4982:	fe 01       	movw	r30, r28
    4984:	e7 5b       	subi	r30, 0xB7	; 183
    4986:	ff 4f       	sbci	r31, 0xFF	; 255
    4988:	80 81       	ld	r24, Z
    498a:	91 81       	ldd	r25, Z+1	; 0x01
    498c:	01 97       	sbiw	r24, 0x01	; 1
    498e:	f1 f7       	brne	.-4      	; 0x498c <main+0x7de>
    4990:	fe 01       	movw	r30, r28
    4992:	e7 5b       	subi	r30, 0xB7	; 183
    4994:	ff 4f       	sbci	r31, 0xFF	; 255
    4996:	91 83       	std	Z+1, r25	; 0x01
    4998:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    499a:	de 01       	movw	r26, r28
    499c:	a5 5b       	subi	r26, 0xB5	; 181
    499e:	bf 4f       	sbci	r27, 0xFF	; 255
    49a0:	fe 01       	movw	r30, r28
    49a2:	e5 5b       	subi	r30, 0xB5	; 181
    49a4:	ff 4f       	sbci	r31, 0xFF	; 255
    49a6:	80 81       	ld	r24, Z
    49a8:	91 81       	ldd	r25, Z+1	; 0x01
    49aa:	01 97       	sbiw	r24, 0x01	; 1
    49ac:	11 96       	adiw	r26, 0x01	; 1
    49ae:	9c 93       	st	X, r25
    49b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49b2:	fe 01       	movw	r30, r28
    49b4:	e5 5b       	subi	r30, 0xB5	; 181
    49b6:	ff 4f       	sbci	r31, 0xFF	; 255
    49b8:	80 81       	ld	r24, Z
    49ba:	91 81       	ldd	r25, Z+1	; 0x01
    49bc:	00 97       	sbiw	r24, 0x00	; 0
    49be:	d1 f6       	brne	.-76     	; 0x4974 <main+0x7c6>
    49c0:	28 c0       	rjmp	.+80     	; 0x4a12 <main+0x864>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49c2:	8e 01       	movw	r16, r28
    49c4:	05 5b       	subi	r16, 0xB5	; 181
    49c6:	1f 4f       	sbci	r17, 0xFF	; 255
    49c8:	fe 01       	movw	r30, r28
    49ca:	e3 5b       	subi	r30, 0xB3	; 179
    49cc:	ff 4f       	sbci	r31, 0xFF	; 255
    49ce:	60 81       	ld	r22, Z
    49d0:	71 81       	ldd	r23, Z+1	; 0x01
    49d2:	82 81       	ldd	r24, Z+2	; 0x02
    49d4:	93 81       	ldd	r25, Z+3	; 0x03
    49d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49da:	dc 01       	movw	r26, r24
    49dc:	cb 01       	movw	r24, r22
    49de:	f8 01       	movw	r30, r16
    49e0:	91 83       	std	Z+1, r25	; 0x01
    49e2:	80 83       	st	Z, r24
    49e4:	de 01       	movw	r26, r28
    49e6:	a9 5b       	subi	r26, 0xB9	; 185
    49e8:	bf 4f       	sbci	r27, 0xFF	; 255
    49ea:	fe 01       	movw	r30, r28
    49ec:	e5 5b       	subi	r30, 0xB5	; 181
    49ee:	ff 4f       	sbci	r31, 0xFF	; 255
    49f0:	80 81       	ld	r24, Z
    49f2:	91 81       	ldd	r25, Z+1	; 0x01
    49f4:	11 96       	adiw	r26, 0x01	; 1
    49f6:	9c 93       	st	X, r25
    49f8:	8e 93       	st	-X, r24
    49fa:	fe 01       	movw	r30, r28
    49fc:	e9 5b       	subi	r30, 0xB9	; 185
    49fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4a00:	80 81       	ld	r24, Z
    4a02:	91 81       	ldd	r25, Z+1	; 0x01
    4a04:	01 97       	sbiw	r24, 0x01	; 1
    4a06:	f1 f7       	brne	.-4      	; 0x4a04 <main+0x856>
    4a08:	fe 01       	movw	r30, r28
    4a0a:	e9 5b       	subi	r30, 0xB9	; 185
    4a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0e:	91 83       	std	Z+1, r25	; 0x01
    4a10:	80 83       	st	Z, r24
					_delay_ms(2000);
					gettingMotorOption=0;
    4a12:	10 92 08 03 	sts	0x0308, r1
					currentState = STATE_MOTOR_OPTIONS;
    4a16:	82 e0       	ldi	r24, 0x02	; 2
    4a18:	80 93 1a 03 	sts	0x031A, r24
    4a1c:	07 cc       	rjmp	.-2034   	; 0x422c <main+0x7e>
				}
			}
			break;

		case STATE_DC_MOTOR_MOVE:
			if(!flag)
    4a1e:	fe 01       	movw	r30, r28
    4a20:	e1 58       	subi	r30, 0x81	; 129
    4a22:	ff 4f       	sbci	r31, 0xFF	; 255
    4a24:	80 81       	ld	r24, Z
    4a26:	88 23       	and	r24, r24
    4a28:	09 f0       	breq	.+2      	; 0x4a2c <main+0x87e>
    4a2a:	60 c0       	rjmp	.+192    	; 0x4aec <main+0x93e>
			{
				if(!gettingSpeedOption){
    4a2c:	80 91 0b 03 	lds	r24, 0x030B
    4a30:	88 23       	and	r24, r24
    4a32:	49 f4       	brne	.+18     	; 0x4a46 <main+0x898>
					lcd_ES_tclear();
    4a34:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <lcd_ES_tclear>
					Lcd_ES_tsendString("Speed(0-99): ");
    4a38:	87 ee       	ldi	r24, 0xE7	; 231
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
					gettingSpeedOption = 1;
    4a40:	81 e0       	ldi	r24, 0x01	; 1
    4a42:	80 93 0b 03 	sts	0x030B, r24
				}
				KPD_ES_tGetKeyPressed(&Option5);
    4a46:	ce 01       	movw	r24, r28
    4a48:	87 57       	subi	r24, 0x77	; 119
    4a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a4c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <KPD_ES_tGetKeyPressed>
				if(Option5 != KPD_U8_NOT_PRESSED){
    4a50:	fe 01       	movw	r30, r28
    4a52:	e7 57       	subi	r30, 0x77	; 119
    4a54:	ff 4f       	sbci	r31, 0xFF	; 255
    4a56:	80 81       	ld	r24, Z
    4a58:	8f 3f       	cpi	r24, 0xFF	; 255
    4a5a:	09 f4       	brne	.+2      	; 0x4a5e <main+0x8b0>
    4a5c:	e7 cb       	rjmp	.-2098   	; 0x422c <main+0x7e>
					LCD_ES_tGoTo(1, 0);
    4a5e:	81 e0       	ldi	r24, 0x01	; 1
    4a60:	60 e0       	ldi	r22, 0x00	; 0
    4a62:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LCD_ES_tGoTo>
					Lcd_ES_tsendChar(Option5);
    4a66:	fe 01       	movw	r30, r28
    4a68:	e7 57       	subi	r30, 0x77	; 119
    4a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6c:	80 81       	ld	r24, Z
    4a6e:	0e 94 94 1a 	call	0x3528	; 0x3528 <Lcd_ES_tsendChar>
					inputSpeed[indexSpeed] = Option5 - '0';
    4a72:	80 91 06 03 	lds	r24, 0x0306
    4a76:	28 2f       	mov	r18, r24
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	fe 01       	movw	r30, r28
    4a7c:	e7 57       	subi	r30, 0x77	; 119
    4a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a80:	80 81       	ld	r24, Z
    4a82:	80 53       	subi	r24, 0x30	; 48
    4a84:	f9 01       	movw	r30, r18
    4a86:	ee 5f       	subi	r30, 0xFE	; 254
    4a88:	fc 4f       	sbci	r31, 0xFC	; 252
    4a8a:	80 83       	st	Z, r24
					indexSpeed++;
    4a8c:	80 91 06 03 	lds	r24, 0x0306
    4a90:	8f 5f       	subi	r24, 0xFF	; 255
    4a92:	80 93 06 03 	sts	0x0306, r24
					if(indexSpeed>=2)
    4a96:	80 91 06 03 	lds	r24, 0x0306
    4a9a:	82 30       	cpi	r24, 0x02	; 2
    4a9c:	08 f4       	brcc	.+2      	; 0x4aa0 <main+0x8f2>
    4a9e:	c6 cb       	rjmp	.-2164   	; 0x422c <main+0x7e>
					{
						Speed = (inputSpeed[0] * 10) + inputSpeed[1];
    4aa0:	80 91 02 03 	lds	r24, 0x0302
    4aa4:	88 2f       	mov	r24, r24
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	9c 01       	movw	r18, r24
    4aaa:	22 0f       	add	r18, r18
    4aac:	33 1f       	adc	r19, r19
    4aae:	c9 01       	movw	r24, r18
    4ab0:	88 0f       	add	r24, r24
    4ab2:	99 1f       	adc	r25, r25
    4ab4:	88 0f       	add	r24, r24
    4ab6:	99 1f       	adc	r25, r25
    4ab8:	82 0f       	add	r24, r18
    4aba:	93 1f       	adc	r25, r19
    4abc:	98 2f       	mov	r25, r24
    4abe:	80 91 03 03 	lds	r24, 0x0303
    4ac2:	89 0f       	add	r24, r25
    4ac4:	80 93 07 03 	sts	0x0307, r24
						memset(inputSpeed, '\0', sizeof(inputSteper));
    4ac8:	82 e0       	ldi	r24, 0x02	; 2
    4aca:	93 e0       	ldi	r25, 0x03	; 3
    4acc:	60 e0       	ldi	r22, 0x00	; 0
    4ace:	70 e0       	ldi	r23, 0x00	; 0
    4ad0:	45 e0       	ldi	r20, 0x05	; 5
    4ad2:	50 e0       	ldi	r21, 0x00	; 0
    4ad4:	0e 94 e5 29 	call	0x53ca	; 0x53ca <memset>
						indexSpeed = 0;
    4ad8:	10 92 06 03 	sts	0x0306, r1
						gettingSpeedOption = 0;
    4adc:	10 92 0b 03 	sts	0x030B, r1
						flag = 1;
    4ae0:	fe 01       	movw	r30, r28
    4ae2:	e1 58       	subi	r30, 0x81	; 129
    4ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
    4ae8:	80 83       	st	Z, r24
    4aea:	a0 cb       	rjmp	.-2240   	; 0x422c <main+0x7e>
					}
				}
			}else
			{
				if (!gettingMovingOption) {
    4aec:	80 91 09 03 	lds	r24, 0x0309
    4af0:	88 23       	and	r24, r24
    4af2:	89 f4       	brne	.+34     	; 0x4b16 <main+0x968>
					lcd_ES_tclear();
    4af4:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <lcd_ES_tclear>
					Lcd_ES_tsendString("1- Rotate CW");
    4af8:	85 ef       	ldi	r24, 0xF5	; 245
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
					LCD_ES_tGoTo(1, 0);
    4b00:	81 e0       	ldi	r24, 0x01	; 1
    4b02:	60 e0       	ldi	r22, 0x00	; 0
    4b04:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LCD_ES_tGoTo>
					Lcd_ES_tsendString("2- Rotate CCW");
    4b08:	82 e0       	ldi	r24, 0x02	; 2
    4b0a:	91 e0       	ldi	r25, 0x01	; 1
    4b0c:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
					gettingMovingOption = 1;
    4b10:	81 e0       	ldi	r24, 0x01	; 1
    4b12:	80 93 09 03 	sts	0x0309, r24
				}
				KPD_ES_tGetKeyPressed(&Option2);
    4b16:	ce 01       	movw	r24, r28
    4b18:	8a 57       	subi	r24, 0x7A	; 122
    4b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b1c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <KPD_ES_tGetKeyPressed>
				if (Option2 != KPD_U8_NOT_PRESSED) {
    4b20:	fe 01       	movw	r30, r28
    4b22:	ea 57       	subi	r30, 0x7A	; 122
    4b24:	ff 4f       	sbci	r31, 0xFF	; 255
    4b26:	80 81       	ld	r24, Z
    4b28:	8f 3f       	cpi	r24, 0xFF	; 255
    4b2a:	09 f4       	brne	.+2      	; 0x4b2e <main+0x980>
    4b2c:	b2 c1       	rjmp	.+868    	; 0x4e92 <main+0xce4>
					if (Option2 == '1') {
    4b2e:	fe 01       	movw	r30, r28
    4b30:	ea 57       	subi	r30, 0x7A	; 122
    4b32:	ff 4f       	sbci	r31, 0xFF	; 255
    4b34:	80 81       	ld	r24, Z
    4b36:	81 33       	cpi	r24, 0x31	; 49
    4b38:	09 f0       	breq	.+2      	; 0x4b3c <main+0x98e>
    4b3a:	9c c0       	rjmp	.+312    	; 0x4c74 <main+0xac6>
						DC_Motor_SetSpeed(DC_MOTOR_0,Speed);
    4b3c:	90 91 07 03 	lds	r25, 0x0307
    4b40:	80 e0       	ldi	r24, 0x00	; 0
    4b42:	69 2f       	mov	r22, r25
    4b44:	0e 94 7f 20 	call	0x40fe	; 0x40fe <DC_Motor_SetSpeed>
						DC_Motor_Move(DC_MOTOR_0, DC_MOTOR_CW);
    4b48:	80 e0       	ldi	r24, 0x00	; 0
    4b4a:	60 e0       	ldi	r22, 0x00	; 0
    4b4c:	0e 94 22 20 	call	0x4044	; 0x4044 <DC_Motor_Move>
    4b50:	fe 01       	movw	r30, r28
    4b52:	ed 5b       	subi	r30, 0xBD	; 189
    4b54:	ff 4f       	sbci	r31, 0xFF	; 255
    4b56:	80 e0       	ldi	r24, 0x00	; 0
    4b58:	90 e8       	ldi	r25, 0x80	; 128
    4b5a:	ab e3       	ldi	r26, 0x3B	; 59
    4b5c:	b5 e4       	ldi	r27, 0x45	; 69
    4b5e:	80 83       	st	Z, r24
    4b60:	91 83       	std	Z+1, r25	; 0x01
    4b62:	a2 83       	std	Z+2, r26	; 0x02
    4b64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b66:	8e 01       	movw	r16, r28
    4b68:	01 5c       	subi	r16, 0xC1	; 193
    4b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b6c:	fe 01       	movw	r30, r28
    4b6e:	ed 5b       	subi	r30, 0xBD	; 189
    4b70:	ff 4f       	sbci	r31, 0xFF	; 255
    4b72:	60 81       	ld	r22, Z
    4b74:	71 81       	ldd	r23, Z+1	; 0x01
    4b76:	82 81       	ldd	r24, Z+2	; 0x02
    4b78:	93 81       	ldd	r25, Z+3	; 0x03
    4b7a:	20 e0       	ldi	r18, 0x00	; 0
    4b7c:	30 e0       	ldi	r19, 0x00	; 0
    4b7e:	4a e7       	ldi	r20, 0x7A	; 122
    4b80:	55 e4       	ldi	r21, 0x45	; 69
    4b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b86:	dc 01       	movw	r26, r24
    4b88:	cb 01       	movw	r24, r22
    4b8a:	f8 01       	movw	r30, r16
    4b8c:	80 83       	st	Z, r24
    4b8e:	91 83       	std	Z+1, r25	; 0x01
    4b90:	a2 83       	std	Z+2, r26	; 0x02
    4b92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b94:	fe 01       	movw	r30, r28
    4b96:	ff 96       	adiw	r30, 0x3f	; 63
    4b98:	60 81       	ld	r22, Z
    4b9a:	71 81       	ldd	r23, Z+1	; 0x01
    4b9c:	82 81       	ldd	r24, Z+2	; 0x02
    4b9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	40 e8       	ldi	r20, 0x80	; 128
    4ba6:	5f e3       	ldi	r21, 0x3F	; 63
    4ba8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bac:	88 23       	and	r24, r24
    4bae:	2c f4       	brge	.+10     	; 0x4bba <main+0xa0c>
		__ticks = 1;
    4bb0:	81 e0       	ldi	r24, 0x01	; 1
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	9e af       	std	Y+62, r25	; 0x3e
    4bb6:	8d af       	std	Y+61, r24	; 0x3d
    4bb8:	46 c0       	rjmp	.+140    	; 0x4c46 <main+0xa98>
	else if (__tmp > 65535)
    4bba:	fe 01       	movw	r30, r28
    4bbc:	ff 96       	adiw	r30, 0x3f	; 63
    4bbe:	60 81       	ld	r22, Z
    4bc0:	71 81       	ldd	r23, Z+1	; 0x01
    4bc2:	82 81       	ldd	r24, Z+2	; 0x02
    4bc4:	93 81       	ldd	r25, Z+3	; 0x03
    4bc6:	20 e0       	ldi	r18, 0x00	; 0
    4bc8:	3f ef       	ldi	r19, 0xFF	; 255
    4bca:	4f e7       	ldi	r20, 0x7F	; 127
    4bcc:	57 e4       	ldi	r21, 0x47	; 71
    4bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bd2:	18 16       	cp	r1, r24
    4bd4:	64 f5       	brge	.+88     	; 0x4c2e <main+0xa80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bd6:	fe 01       	movw	r30, r28
    4bd8:	ed 5b       	subi	r30, 0xBD	; 189
    4bda:	ff 4f       	sbci	r31, 0xFF	; 255
    4bdc:	60 81       	ld	r22, Z
    4bde:	71 81       	ldd	r23, Z+1	; 0x01
    4be0:	82 81       	ldd	r24, Z+2	; 0x02
    4be2:	93 81       	ldd	r25, Z+3	; 0x03
    4be4:	20 e0       	ldi	r18, 0x00	; 0
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	40 e2       	ldi	r20, 0x20	; 32
    4bea:	51 e4       	ldi	r21, 0x41	; 65
    4bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	cb 01       	movw	r24, r22
    4bf4:	bc 01       	movw	r22, r24
    4bf6:	cd 01       	movw	r24, r26
    4bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	cb 01       	movw	r24, r22
    4c00:	9e af       	std	Y+62, r25	; 0x3e
    4c02:	8d af       	std	Y+61, r24	; 0x3d
    4c04:	0f c0       	rjmp	.+30     	; 0x4c24 <main+0xa76>
    4c06:	80 e9       	ldi	r24, 0x90	; 144
    4c08:	91 e0       	ldi	r25, 0x01	; 1
    4c0a:	9c af       	std	Y+60, r25	; 0x3c
    4c0c:	8b af       	std	Y+59, r24	; 0x3b
    4c0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4c10:	9c ad       	ldd	r25, Y+60	; 0x3c
    4c12:	01 97       	sbiw	r24, 0x01	; 1
    4c14:	f1 f7       	brne	.-4      	; 0x4c12 <main+0xa64>
    4c16:	9c af       	std	Y+60, r25	; 0x3c
    4c18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c1e:	01 97       	sbiw	r24, 0x01	; 1
    4c20:	9e af       	std	Y+62, r25	; 0x3e
    4c22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c24:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c26:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c28:	00 97       	sbiw	r24, 0x00	; 0
    4c2a:	69 f7       	brne	.-38     	; 0x4c06 <main+0xa58>
    4c2c:	16 c0       	rjmp	.+44     	; 0x4c5a <main+0xaac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c2e:	fe 01       	movw	r30, r28
    4c30:	ff 96       	adiw	r30, 0x3f	; 63
    4c32:	60 81       	ld	r22, Z
    4c34:	71 81       	ldd	r23, Z+1	; 0x01
    4c36:	82 81       	ldd	r24, Z+2	; 0x02
    4c38:	93 81       	ldd	r25, Z+3	; 0x03
    4c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c3e:	dc 01       	movw	r26, r24
    4c40:	cb 01       	movw	r24, r22
    4c42:	9e af       	std	Y+62, r25	; 0x3e
    4c44:	8d af       	std	Y+61, r24	; 0x3d
    4c46:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c48:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c4a:	9a af       	std	Y+58, r25	; 0x3a
    4c4c:	89 af       	std	Y+57, r24	; 0x39
    4c4e:	89 ad       	ldd	r24, Y+57	; 0x39
    4c50:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c52:	01 97       	sbiw	r24, 0x01	; 1
    4c54:	f1 f7       	brne	.-4      	; 0x4c52 <main+0xaa4>
    4c56:	9a af       	std	Y+58, r25	; 0x3a
    4c58:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(3000);
						DC_Motor_Stop(DC_MOTOR_0);
    4c5a:	80 e0       	ldi	r24, 0x00	; 0
    4c5c:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <DC_Motor_Stop>
						gettingMovingOption = 0;
    4c60:	10 92 09 03 	sts	0x0309, r1
						flag = 0; // Reset the flag after direction selection
    4c64:	fe 01       	movw	r30, r28
    4c66:	e1 58       	subi	r30, 0x81	; 129
    4c68:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6a:	10 82       	st	Z, r1
						currentState = STATE_MOTOR_OPTIONS;
    4c6c:	82 e0       	ldi	r24, 0x02	; 2
    4c6e:	80 93 1a 03 	sts	0x031A, r24
    4c72:	0f c1       	rjmp	.+542    	; 0x4e92 <main+0xce4>
					} else if (Option2 == '2') {
    4c74:	fe 01       	movw	r30, r28
    4c76:	ea 57       	subi	r30, 0x7A	; 122
    4c78:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7a:	80 81       	ld	r24, Z
    4c7c:	82 33       	cpi	r24, 0x32	; 50
    4c7e:	09 f0       	breq	.+2      	; 0x4c82 <main+0xad4>
    4c80:	89 c0       	rjmp	.+274    	; 0x4d94 <main+0xbe6>
						DC_Motor_SetSpeed(DC_MOTOR_0,Speed);
    4c82:	90 91 07 03 	lds	r25, 0x0307
    4c86:	80 e0       	ldi	r24, 0x00	; 0
    4c88:	69 2f       	mov	r22, r25
    4c8a:	0e 94 7f 20 	call	0x40fe	; 0x40fe <DC_Motor_SetSpeed>
						DC_Motor_Move(DC_MOTOR_0, DC_MOTOR_CCW);
    4c8e:	80 e0       	ldi	r24, 0x00	; 0
    4c90:	61 e0       	ldi	r22, 0x01	; 1
    4c92:	0e 94 22 20 	call	0x4044	; 0x4044 <DC_Motor_Move>
    4c96:	80 e0       	ldi	r24, 0x00	; 0
    4c98:	90 e8       	ldi	r25, 0x80	; 128
    4c9a:	ab e3       	ldi	r26, 0x3B	; 59
    4c9c:	b5 e4       	ldi	r27, 0x45	; 69
    4c9e:	8d ab       	std	Y+53, r24	; 0x35
    4ca0:	9e ab       	std	Y+54, r25	; 0x36
    4ca2:	af ab       	std	Y+55, r26	; 0x37
    4ca4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ca6:	6d a9       	ldd	r22, Y+53	; 0x35
    4ca8:	7e a9       	ldd	r23, Y+54	; 0x36
    4caa:	8f a9       	ldd	r24, Y+55	; 0x37
    4cac:	98 ad       	ldd	r25, Y+56	; 0x38
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	4a e7       	ldi	r20, 0x7A	; 122
    4cb4:	55 e4       	ldi	r21, 0x45	; 69
    4cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cba:	dc 01       	movw	r26, r24
    4cbc:	cb 01       	movw	r24, r22
    4cbe:	89 ab       	std	Y+49, r24	; 0x31
    4cc0:	9a ab       	std	Y+50, r25	; 0x32
    4cc2:	ab ab       	std	Y+51, r26	; 0x33
    4cc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4cc6:	69 a9       	ldd	r22, Y+49	; 0x31
    4cc8:	7a a9       	ldd	r23, Y+50	; 0x32
    4cca:	8b a9       	ldd	r24, Y+51	; 0x33
    4ccc:	9c a9       	ldd	r25, Y+52	; 0x34
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	40 e8       	ldi	r20, 0x80	; 128
    4cd4:	5f e3       	ldi	r21, 0x3F	; 63
    4cd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cda:	88 23       	and	r24, r24
    4cdc:	2c f4       	brge	.+10     	; 0x4ce8 <main+0xb3a>
		__ticks = 1;
    4cde:	81 e0       	ldi	r24, 0x01	; 1
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	98 ab       	std	Y+48, r25	; 0x30
    4ce4:	8f a7       	std	Y+47, r24	; 0x2f
    4ce6:	3f c0       	rjmp	.+126    	; 0x4d66 <main+0xbb8>
	else if (__tmp > 65535)
    4ce8:	69 a9       	ldd	r22, Y+49	; 0x31
    4cea:	7a a9       	ldd	r23, Y+50	; 0x32
    4cec:	8b a9       	ldd	r24, Y+51	; 0x33
    4cee:	9c a9       	ldd	r25, Y+52	; 0x34
    4cf0:	20 e0       	ldi	r18, 0x00	; 0
    4cf2:	3f ef       	ldi	r19, 0xFF	; 255
    4cf4:	4f e7       	ldi	r20, 0x7F	; 127
    4cf6:	57 e4       	ldi	r21, 0x47	; 71
    4cf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cfc:	18 16       	cp	r1, r24
    4cfe:	4c f5       	brge	.+82     	; 0x4d52 <main+0xba4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d00:	6d a9       	ldd	r22, Y+53	; 0x35
    4d02:	7e a9       	ldd	r23, Y+54	; 0x36
    4d04:	8f a9       	ldd	r24, Y+55	; 0x37
    4d06:	98 ad       	ldd	r25, Y+56	; 0x38
    4d08:	20 e0       	ldi	r18, 0x00	; 0
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	40 e2       	ldi	r20, 0x20	; 32
    4d0e:	51 e4       	ldi	r21, 0x41	; 65
    4d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d14:	dc 01       	movw	r26, r24
    4d16:	cb 01       	movw	r24, r22
    4d18:	bc 01       	movw	r22, r24
    4d1a:	cd 01       	movw	r24, r26
    4d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
    4d24:	98 ab       	std	Y+48, r25	; 0x30
    4d26:	8f a7       	std	Y+47, r24	; 0x2f
    4d28:	0f c0       	rjmp	.+30     	; 0x4d48 <main+0xb9a>
    4d2a:	80 e9       	ldi	r24, 0x90	; 144
    4d2c:	91 e0       	ldi	r25, 0x01	; 1
    4d2e:	9e a7       	std	Y+46, r25	; 0x2e
    4d30:	8d a7       	std	Y+45, r24	; 0x2d
    4d32:	8d a5       	ldd	r24, Y+45	; 0x2d
    4d34:	9e a5       	ldd	r25, Y+46	; 0x2e
    4d36:	01 97       	sbiw	r24, 0x01	; 1
    4d38:	f1 f7       	brne	.-4      	; 0x4d36 <main+0xb88>
    4d3a:	9e a7       	std	Y+46, r25	; 0x2e
    4d3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d40:	98 a9       	ldd	r25, Y+48	; 0x30
    4d42:	01 97       	sbiw	r24, 0x01	; 1
    4d44:	98 ab       	std	Y+48, r25	; 0x30
    4d46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d48:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d4a:	98 a9       	ldd	r25, Y+48	; 0x30
    4d4c:	00 97       	sbiw	r24, 0x00	; 0
    4d4e:	69 f7       	brne	.-38     	; 0x4d2a <main+0xb7c>
    4d50:	14 c0       	rjmp	.+40     	; 0x4d7a <main+0xbcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d52:	69 a9       	ldd	r22, Y+49	; 0x31
    4d54:	7a a9       	ldd	r23, Y+50	; 0x32
    4d56:	8b a9       	ldd	r24, Y+51	; 0x33
    4d58:	9c a9       	ldd	r25, Y+52	; 0x34
    4d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	cb 01       	movw	r24, r22
    4d62:	98 ab       	std	Y+48, r25	; 0x30
    4d64:	8f a7       	std	Y+47, r24	; 0x2f
    4d66:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d68:	98 a9       	ldd	r25, Y+48	; 0x30
    4d6a:	9c a7       	std	Y+44, r25	; 0x2c
    4d6c:	8b a7       	std	Y+43, r24	; 0x2b
    4d6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d70:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d72:	01 97       	sbiw	r24, 0x01	; 1
    4d74:	f1 f7       	brne	.-4      	; 0x4d72 <main+0xbc4>
    4d76:	9c a7       	std	Y+44, r25	; 0x2c
    4d78:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(3000);
						DC_Motor_Stop(DC_MOTOR_0);
    4d7a:	80 e0       	ldi	r24, 0x00	; 0
    4d7c:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <DC_Motor_Stop>
						gettingMovingOption = 0;
    4d80:	10 92 09 03 	sts	0x0309, r1
						flag = 0; // Reset the flag after direction selection
    4d84:	fe 01       	movw	r30, r28
    4d86:	e1 58       	subi	r30, 0x81	; 129
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	10 82       	st	Z, r1
						currentState = STATE_MOTOR_OPTIONS;
    4d8c:	82 e0       	ldi	r24, 0x02	; 2
    4d8e:	80 93 1a 03 	sts	0x031A, r24
    4d92:	7f c0       	rjmp	.+254    	; 0x4e92 <main+0xce4>
					} else {
						lcd_ES_tclear();
    4d94:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <lcd_ES_tclear>
						Lcd_ES_tsendString("Invalid Option");
    4d98:	88 ed       	ldi	r24, 0xD8	; 216
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
    4da0:	80 e0       	ldi	r24, 0x00	; 0
    4da2:	90 e0       	ldi	r25, 0x00	; 0
    4da4:	aa ef       	ldi	r26, 0xFA	; 250
    4da6:	b4 e4       	ldi	r27, 0x44	; 68
    4da8:	8f a3       	std	Y+39, r24	; 0x27
    4daa:	98 a7       	std	Y+40, r25	; 0x28
    4dac:	a9 a7       	std	Y+41, r26	; 0x29
    4dae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4db0:	6f a1       	ldd	r22, Y+39	; 0x27
    4db2:	78 a5       	ldd	r23, Y+40	; 0x28
    4db4:	89 a5       	ldd	r24, Y+41	; 0x29
    4db6:	9a a5       	ldd	r25, Y+42	; 0x2a
    4db8:	20 e0       	ldi	r18, 0x00	; 0
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	4a e7       	ldi	r20, 0x7A	; 122
    4dbe:	55 e4       	ldi	r21, 0x45	; 69
    4dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dc4:	dc 01       	movw	r26, r24
    4dc6:	cb 01       	movw	r24, r22
    4dc8:	8b a3       	std	Y+35, r24	; 0x23
    4dca:	9c a3       	std	Y+36, r25	; 0x24
    4dcc:	ad a3       	std	Y+37, r26	; 0x25
    4dce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4dd0:	6b a1       	ldd	r22, Y+35	; 0x23
    4dd2:	7c a1       	ldd	r23, Y+36	; 0x24
    4dd4:	8d a1       	ldd	r24, Y+37	; 0x25
    4dd6:	9e a1       	ldd	r25, Y+38	; 0x26
    4dd8:	20 e0       	ldi	r18, 0x00	; 0
    4dda:	30 e0       	ldi	r19, 0x00	; 0
    4ddc:	40 e8       	ldi	r20, 0x80	; 128
    4dde:	5f e3       	ldi	r21, 0x3F	; 63
    4de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4de4:	88 23       	and	r24, r24
    4de6:	2c f4       	brge	.+10     	; 0x4df2 <main+0xc44>
		__ticks = 1;
    4de8:	81 e0       	ldi	r24, 0x01	; 1
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	9a a3       	std	Y+34, r25	; 0x22
    4dee:	89 a3       	std	Y+33, r24	; 0x21
    4df0:	3f c0       	rjmp	.+126    	; 0x4e70 <main+0xcc2>
	else if (__tmp > 65535)
    4df2:	6b a1       	ldd	r22, Y+35	; 0x23
    4df4:	7c a1       	ldd	r23, Y+36	; 0x24
    4df6:	8d a1       	ldd	r24, Y+37	; 0x25
    4df8:	9e a1       	ldd	r25, Y+38	; 0x26
    4dfa:	20 e0       	ldi	r18, 0x00	; 0
    4dfc:	3f ef       	ldi	r19, 0xFF	; 255
    4dfe:	4f e7       	ldi	r20, 0x7F	; 127
    4e00:	57 e4       	ldi	r21, 0x47	; 71
    4e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e06:	18 16       	cp	r1, r24
    4e08:	4c f5       	brge	.+82     	; 0x4e5c <main+0xcae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e0a:	6f a1       	ldd	r22, Y+39	; 0x27
    4e0c:	78 a5       	ldd	r23, Y+40	; 0x28
    4e0e:	89 a5       	ldd	r24, Y+41	; 0x29
    4e10:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e12:	20 e0       	ldi	r18, 0x00	; 0
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	40 e2       	ldi	r20, 0x20	; 32
    4e18:	51 e4       	ldi	r21, 0x41	; 65
    4e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e1e:	dc 01       	movw	r26, r24
    4e20:	cb 01       	movw	r24, r22
    4e22:	bc 01       	movw	r22, r24
    4e24:	cd 01       	movw	r24, r26
    4e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e2a:	dc 01       	movw	r26, r24
    4e2c:	cb 01       	movw	r24, r22
    4e2e:	9a a3       	std	Y+34, r25	; 0x22
    4e30:	89 a3       	std	Y+33, r24	; 0x21
    4e32:	0f c0       	rjmp	.+30     	; 0x4e52 <main+0xca4>
    4e34:	80 e9       	ldi	r24, 0x90	; 144
    4e36:	91 e0       	ldi	r25, 0x01	; 1
    4e38:	98 a3       	std	Y+32, r25	; 0x20
    4e3a:	8f 8f       	std	Y+31, r24	; 0x1f
    4e3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4e3e:	98 a1       	ldd	r25, Y+32	; 0x20
    4e40:	01 97       	sbiw	r24, 0x01	; 1
    4e42:	f1 f7       	brne	.-4      	; 0x4e40 <main+0xc92>
    4e44:	98 a3       	std	Y+32, r25	; 0x20
    4e46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e48:	89 a1       	ldd	r24, Y+33	; 0x21
    4e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    4e4c:	01 97       	sbiw	r24, 0x01	; 1
    4e4e:	9a a3       	std	Y+34, r25	; 0x22
    4e50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e52:	89 a1       	ldd	r24, Y+33	; 0x21
    4e54:	9a a1       	ldd	r25, Y+34	; 0x22
    4e56:	00 97       	sbiw	r24, 0x00	; 0
    4e58:	69 f7       	brne	.-38     	; 0x4e34 <main+0xc86>
    4e5a:	14 c0       	rjmp	.+40     	; 0x4e84 <main+0xcd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e5c:	6b a1       	ldd	r22, Y+35	; 0x23
    4e5e:	7c a1       	ldd	r23, Y+36	; 0x24
    4e60:	8d a1       	ldd	r24, Y+37	; 0x25
    4e62:	9e a1       	ldd	r25, Y+38	; 0x26
    4e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e68:	dc 01       	movw	r26, r24
    4e6a:	cb 01       	movw	r24, r22
    4e6c:	9a a3       	std	Y+34, r25	; 0x22
    4e6e:	89 a3       	std	Y+33, r24	; 0x21
    4e70:	89 a1       	ldd	r24, Y+33	; 0x21
    4e72:	9a a1       	ldd	r25, Y+34	; 0x22
    4e74:	9e 8f       	std	Y+30, r25	; 0x1e
    4e76:	8d 8f       	std	Y+29, r24	; 0x1d
    4e78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e7c:	01 97       	sbiw	r24, 0x01	; 1
    4e7e:	f1 f7       	brne	.-4      	; 0x4e7c <main+0xcce>
    4e80:	9e 8f       	std	Y+30, r25	; 0x1e
    4e82:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(2000);
						flag = 0; // Reset the flag after direction selection
    4e84:	fe 01       	movw	r30, r28
    4e86:	e1 58       	subi	r30, 0x81	; 129
    4e88:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8a:	10 82       	st	Z, r1
						currentState = STATE_DC_MOTOR_MOVE;
    4e8c:	83 e0       	ldi	r24, 0x03	; 3
    4e8e:	80 93 1a 03 	sts	0x031A, r24
					}
				}
				TIMER0_Stop();
    4e92:	0e 94 4f 08 	call	0x109e	; 0x109e <TIMER0_Stop>
    4e96:	ca c9       	rjmp	.-3180   	; 0x422c <main+0x7e>
			break;



		case STATE_STEPPER_MOVE:
			if (!gettingStepperOption) {
    4e98:	80 91 0a 03 	lds	r24, 0x030A
    4e9c:	88 23       	and	r24, r24
    4e9e:	49 f4       	brne	.+18     	; 0x4eb2 <main+0xd04>
				lcd_ES_tclear();
    4ea0:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <lcd_ES_tclear>
				Lcd_ES_tsendString("Angle(3dig) :");
    4ea4:	80 e1       	ldi	r24, 0x10	; 16
    4ea6:	91 e0       	ldi	r25, 0x01	; 1
    4ea8:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
				gettingStepperOption = 1;
    4eac:	81 e0       	ldi	r24, 0x01	; 1
    4eae:	80 93 0a 03 	sts	0x030A, r24
			}
			KPD_ES_tGetKeyPressed(&Option3);
    4eb2:	ce 01       	movw	r24, r28
    4eb4:	89 57       	subi	r24, 0x79	; 121
    4eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    4eb8:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <KPD_ES_tGetKeyPressed>
			if (Option3 != KPD_U8_NOT_PRESSED) {
    4ebc:	fe 01       	movw	r30, r28
    4ebe:	e9 57       	subi	r30, 0x79	; 121
    4ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec2:	80 81       	ld	r24, Z
    4ec4:	8f 3f       	cpi	r24, 0xFF	; 255
    4ec6:	09 f4       	brne	.+2      	; 0x4eca <main+0xd1c>
    4ec8:	b1 c9       	rjmp	.-3230   	; 0x422c <main+0x7e>
				LCD_ES_tGoTo(1, indexStepper);
    4eca:	90 91 fb 02 	lds	r25, 0x02FB
    4ece:	81 e0       	ldi	r24, 0x01	; 1
    4ed0:	69 2f       	mov	r22, r25
    4ed2:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LCD_ES_tGoTo>
				Lcd_ES_tsendChar(Option3);
    4ed6:	fe 01       	movw	r30, r28
    4ed8:	e9 57       	subi	r30, 0x79	; 121
    4eda:	ff 4f       	sbci	r31, 0xFF	; 255
    4edc:	80 81       	ld	r24, Z
    4ede:	0e 94 94 1a 	call	0x3528	; 0x3528 <Lcd_ES_tsendChar>
				inputSteper[indexStepper] = Option3 - '0'; // Convert character to integer
    4ee2:	80 91 fb 02 	lds	r24, 0x02FB
    4ee6:	28 2f       	mov	r18, r24
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	fe 01       	movw	r30, r28
    4eec:	e9 57       	subi	r30, 0x79	; 121
    4eee:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef0:	80 81       	ld	r24, Z
    4ef2:	80 53       	subi	r24, 0x30	; 48
    4ef4:	f9 01       	movw	r30, r18
    4ef6:	ea 50       	subi	r30, 0x0A	; 10
    4ef8:	fd 4f       	sbci	r31, 0xFD	; 253
    4efa:	80 83       	st	Z, r24
				indexStepper++;
    4efc:	80 91 fb 02 	lds	r24, 0x02FB
    4f00:	8f 5f       	subi	r24, 0xFF	; 255
    4f02:	80 93 fb 02 	sts	0x02FB, r24
				if (indexStepper >= 3) { // Use indexStepper instead of indexz
    4f06:	80 91 fb 02 	lds	r24, 0x02FB
    4f0a:	83 30       	cpi	r24, 0x03	; 3
    4f0c:	08 f4       	brcc	.+2      	; 0x4f10 <main+0xd62>
    4f0e:	8e c9       	rjmp	.-3300   	; 0x422c <main+0x7e>
					stepperAngle = (inputSteper[0] * 100) + (inputSteper[1] * 10) + inputSteper[2];
    4f10:	80 91 f6 02 	lds	r24, 0x02F6
    4f14:	28 2f       	mov	r18, r24
    4f16:	30 e0       	ldi	r19, 0x00	; 0
    4f18:	84 e6       	ldi	r24, 0x64	; 100
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	ac 01       	movw	r20, r24
    4f1e:	24 9f       	mul	r18, r20
    4f20:	c0 01       	movw	r24, r0
    4f22:	25 9f       	mul	r18, r21
    4f24:	90 0d       	add	r25, r0
    4f26:	34 9f       	mul	r19, r20
    4f28:	90 0d       	add	r25, r0
    4f2a:	11 24       	eor	r1, r1
    4f2c:	48 2f       	mov	r20, r24
    4f2e:	80 91 f7 02 	lds	r24, 0x02F7
    4f32:	88 2f       	mov	r24, r24
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	9c 01       	movw	r18, r24
    4f38:	22 0f       	add	r18, r18
    4f3a:	33 1f       	adc	r19, r19
    4f3c:	c9 01       	movw	r24, r18
    4f3e:	88 0f       	add	r24, r24
    4f40:	99 1f       	adc	r25, r25
    4f42:	88 0f       	add	r24, r24
    4f44:	99 1f       	adc	r25, r25
    4f46:	82 0f       	add	r24, r18
    4f48:	93 1f       	adc	r25, r19
    4f4a:	94 2f       	mov	r25, r20
    4f4c:	98 0f       	add	r25, r24
    4f4e:	80 91 f8 02 	lds	r24, 0x02F8
    4f52:	fe 01       	movw	r30, r28
    4f54:	ee 57       	subi	r30, 0x7E	; 126
    4f56:	ff 4f       	sbci	r31, 0xFF	; 255
    4f58:	89 0f       	add	r24, r25
    4f5a:	80 83       	st	Z, r24
					Stepper_Rotate(stepperAngle);
    4f5c:	fe 01       	movw	r30, r28
    4f5e:	ee 57       	subi	r30, 0x7E	; 126
    4f60:	ff 4f       	sbci	r31, 0xFF	; 255
    4f62:	80 81       	ld	r24, Z
    4f64:	0e 94 b6 14 	call	0x296c	; 0x296c <Stepper_Rotate>
					memset(inputSteper, '\0', sizeof(inputSteper));
    4f68:	86 ef       	ldi	r24, 0xF6	; 246
    4f6a:	92 e0       	ldi	r25, 0x02	; 2
    4f6c:	60 e0       	ldi	r22, 0x00	; 0
    4f6e:	70 e0       	ldi	r23, 0x00	; 0
    4f70:	45 e0       	ldi	r20, 0x05	; 5
    4f72:	50 e0       	ldi	r21, 0x00	; 0
    4f74:	0e 94 e5 29 	call	0x53ca	; 0x53ca <memset>
					indexStepper = 0;
    4f78:	10 92 fb 02 	sts	0x02FB, r1
					gettingStepperOption = 0;
    4f7c:	10 92 0a 03 	sts	0x030A, r1
					gettingMotorOption=0;
    4f80:	10 92 08 03 	sts	0x0308, r1
					currentState = STATE_MOTOR_OPTIONS;
    4f84:	82 e0       	ldi	r24, 0x02	; 2
    4f86:	80 93 1a 03 	sts	0x031A, r24
    4f8a:	50 c9       	rjmp	.-3424   	; 0x422c <main+0x7e>
			}
			break;


		case STATE_SERVO_MOVE:
			if (!gettingServoOption) {
    4f8c:	80 91 0c 03 	lds	r24, 0x030C
    4f90:	88 23       	and	r24, r24
    4f92:	49 f4       	brne	.+18     	; 0x4fa6 <main+0xdf8>
				lcd_ES_tclear();
    4f94:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <lcd_ES_tclear>
				Lcd_ES_tsendString("Signed angle :");
    4f98:	8e e1       	ldi	r24, 0x1E	; 30
    4f9a:	91 e0       	ldi	r25, 0x01	; 1
    4f9c:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
				gettingServoOption = 1;
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	80 93 0c 03 	sts	0x030C, r24
			}
			KPD_ES_tGetKeyPressed(&Option4);
    4fa6:	ce 01       	movw	r24, r28
    4fa8:	88 57       	subi	r24, 0x78	; 120
    4faa:	9f 4f       	sbci	r25, 0xFF	; 255
    4fac:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <KPD_ES_tGetKeyPressed>
			if (Option4 != KPD_U8_NOT_PRESSED) {
    4fb0:	fe 01       	movw	r30, r28
    4fb2:	e8 57       	subi	r30, 0x78	; 120
    4fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb6:	80 81       	ld	r24, Z
    4fb8:	8f 3f       	cpi	r24, 0xFF	; 255
    4fba:	09 f4       	brne	.+2      	; 0x4fbe <main+0xe10>
    4fbc:	37 c9       	rjmp	.-3474   	; 0x422c <main+0x7e>
				LCD_ES_tGoTo(1, indexServo);
    4fbe:	90 91 01 03 	lds	r25, 0x0301
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	69 2f       	mov	r22, r25
    4fc6:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <LCD_ES_tGoTo>
				Lcd_ES_tsendChar(Option4);
    4fca:	fe 01       	movw	r30, r28
    4fcc:	e8 57       	subi	r30, 0x78	; 120
    4fce:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd0:	80 81       	ld	r24, Z
    4fd2:	0e 94 94 1a 	call	0x3528	; 0x3528 <Lcd_ES_tsendChar>
				if(indexServo == 0)
    4fd6:	80 91 01 03 	lds	r24, 0x0301
    4fda:	88 23       	and	r24, r24
    4fdc:	31 f4       	brne	.+12     	; 0x4fea <main+0xe3c>
					Sign = Option4;
    4fde:	fe 01       	movw	r30, r28
    4fe0:	e8 57       	subi	r30, 0x78	; 120
    4fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe4:	80 81       	ld	r24, Z
    4fe6:	80 93 ef 02 	sts	0x02EF, r24
				inputServo[indexServo] = Option4 - '0'; // Convert character to integer
    4fea:	80 91 01 03 	lds	r24, 0x0301
    4fee:	28 2f       	mov	r18, r24
    4ff0:	30 e0       	ldi	r19, 0x00	; 0
    4ff2:	fe 01       	movw	r30, r28
    4ff4:	e8 57       	subi	r30, 0x78	; 120
    4ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff8:	80 81       	ld	r24, Z
    4ffa:	80 53       	subi	r24, 0x30	; 48
    4ffc:	f9 01       	movw	r30, r18
    4ffe:	e4 50       	subi	r30, 0x04	; 4
    5000:	fd 4f       	sbci	r31, 0xFD	; 253
    5002:	80 83       	st	Z, r24
				indexServo++;
    5004:	80 91 01 03 	lds	r24, 0x0301
    5008:	8f 5f       	subi	r24, 0xFF	; 255
    500a:	80 93 01 03 	sts	0x0301, r24
				if (indexServo >= 3) { // Use indexStepper instead of indexz
    500e:	80 91 01 03 	lds	r24, 0x0301
    5012:	83 30       	cpi	r24, 0x03	; 3
    5014:	08 f4       	brcc	.+2      	; 0x5018 <main+0xe6a>
    5016:	0a c9       	rjmp	.-3564   	; 0x422c <main+0x7e>
					if(Sign == '+'){
    5018:	80 91 ef 02 	lds	r24, 0x02EF
    501c:	8b 32       	cpi	r24, 0x2B	; 43
    501e:	d1 f4       	brne	.+52     	; 0x5054 <main+0xea6>
						ServoAngle = +((inputServo[1] * 10) + inputServo[2]);
    5020:	80 91 fd 02 	lds	r24, 0x02FD
    5024:	88 2f       	mov	r24, r24
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	9c 01       	movw	r18, r24
    502a:	22 0f       	add	r18, r18
    502c:	33 1f       	adc	r19, r19
    502e:	c9 01       	movw	r24, r18
    5030:	88 0f       	add	r24, r24
    5032:	99 1f       	adc	r25, r25
    5034:	88 0f       	add	r24, r24
    5036:	99 1f       	adc	r25, r25
    5038:	28 0f       	add	r18, r24
    503a:	39 1f       	adc	r19, r25
    503c:	80 91 fe 02 	lds	r24, 0x02FE
    5040:	88 2f       	mov	r24, r24
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	fe 01       	movw	r30, r28
    5046:	e0 58       	subi	r30, 0x80	; 128
    5048:	ff 4f       	sbci	r31, 0xFF	; 255
    504a:	82 0f       	add	r24, r18
    504c:	93 1f       	adc	r25, r19
    504e:	91 83       	std	Z+1, r25	; 0x01
    5050:	80 83       	st	Z, r24
    5052:	1c c0       	rjmp	.+56     	; 0x508c <main+0xede>
					}else{
						ServoAngle = -((inputServo[1] * 10) + inputServo[2]);
    5054:	80 91 fd 02 	lds	r24, 0x02FD
    5058:	88 2f       	mov	r24, r24
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	9c 01       	movw	r18, r24
    505e:	22 0f       	add	r18, r18
    5060:	33 1f       	adc	r19, r19
    5062:	c9 01       	movw	r24, r18
    5064:	88 0f       	add	r24, r24
    5066:	99 1f       	adc	r25, r25
    5068:	88 0f       	add	r24, r24
    506a:	99 1f       	adc	r25, r25
    506c:	82 0f       	add	r24, r18
    506e:	93 1f       	adc	r25, r19
    5070:	90 95       	com	r25
    5072:	81 95       	neg	r24
    5074:	9f 4f       	sbci	r25, 0xFF	; 255
    5076:	20 91 fe 02 	lds	r18, 0x02FE
    507a:	22 2f       	mov	r18, r18
    507c:	30 e0       	ldi	r19, 0x00	; 0
    507e:	fe 01       	movw	r30, r28
    5080:	e0 58       	subi	r30, 0x80	; 128
    5082:	ff 4f       	sbci	r31, 0xFF	; 255
    5084:	82 1b       	sub	r24, r18
    5086:	93 0b       	sbc	r25, r19
    5088:	91 83       	std	Z+1, r25	; 0x01
    508a:	80 83       	st	Z, r24
					}
					Servo_Turn(ServoAngle);
    508c:	fe 01       	movw	r30, r28
    508e:	e0 58       	subi	r30, 0x80	; 128
    5090:	ff 4f       	sbci	r31, 0xFF	; 255
    5092:	80 81       	ld	r24, Z
    5094:	91 81       	ldd	r25, Z+1	; 0x01
    5096:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <Servo_Turn>

					memset(inputServo, '\0', sizeof(inputServo));
    509a:	8c ef       	ldi	r24, 0xFC	; 252
    509c:	92 e0       	ldi	r25, 0x02	; 2
    509e:	60 e0       	ldi	r22, 0x00	; 0
    50a0:	70 e0       	ldi	r23, 0x00	; 0
    50a2:	45 e0       	ldi	r20, 0x05	; 5
    50a4:	50 e0       	ldi	r21, 0x00	; 0
    50a6:	0e 94 e5 29 	call	0x53ca	; 0x53ca <memset>
					indexServo = 0;
    50aa:	10 92 01 03 	sts	0x0301, r1
    50ae:	80 e0       	ldi	r24, 0x00	; 0
    50b0:	90 e0       	ldi	r25, 0x00	; 0
    50b2:	aa e7       	ldi	r26, 0x7A	; 122
    50b4:	b4 e4       	ldi	r27, 0x44	; 68
    50b6:	89 8f       	std	Y+25, r24	; 0x19
    50b8:	9a 8f       	std	Y+26, r25	; 0x1a
    50ba:	ab 8f       	std	Y+27, r26	; 0x1b
    50bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50be:	69 8d       	ldd	r22, Y+25	; 0x19
    50c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50c6:	20 e0       	ldi	r18, 0x00	; 0
    50c8:	30 e0       	ldi	r19, 0x00	; 0
    50ca:	4a e7       	ldi	r20, 0x7A	; 122
    50cc:	55 e4       	ldi	r21, 0x45	; 69
    50ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d2:	dc 01       	movw	r26, r24
    50d4:	cb 01       	movw	r24, r22
    50d6:	8d 8b       	std	Y+21, r24	; 0x15
    50d8:	9e 8b       	std	Y+22, r25	; 0x16
    50da:	af 8b       	std	Y+23, r26	; 0x17
    50dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    50de:	6d 89       	ldd	r22, Y+21	; 0x15
    50e0:	7e 89       	ldd	r23, Y+22	; 0x16
    50e2:	8f 89       	ldd	r24, Y+23	; 0x17
    50e4:	98 8d       	ldd	r25, Y+24	; 0x18
    50e6:	20 e0       	ldi	r18, 0x00	; 0
    50e8:	30 e0       	ldi	r19, 0x00	; 0
    50ea:	40 e8       	ldi	r20, 0x80	; 128
    50ec:	5f e3       	ldi	r21, 0x3F	; 63
    50ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50f2:	88 23       	and	r24, r24
    50f4:	2c f4       	brge	.+10     	; 0x5100 <main+0xf52>
		__ticks = 1;
    50f6:	81 e0       	ldi	r24, 0x01	; 1
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	9c 8b       	std	Y+20, r25	; 0x14
    50fc:	8b 8b       	std	Y+19, r24	; 0x13
    50fe:	3f c0       	rjmp	.+126    	; 0x517e <main+0xfd0>
	else if (__tmp > 65535)
    5100:	6d 89       	ldd	r22, Y+21	; 0x15
    5102:	7e 89       	ldd	r23, Y+22	; 0x16
    5104:	8f 89       	ldd	r24, Y+23	; 0x17
    5106:	98 8d       	ldd	r25, Y+24	; 0x18
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	3f ef       	ldi	r19, 0xFF	; 255
    510c:	4f e7       	ldi	r20, 0x7F	; 127
    510e:	57 e4       	ldi	r21, 0x47	; 71
    5110:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5114:	18 16       	cp	r1, r24
    5116:	4c f5       	brge	.+82     	; 0x516a <main+0xfbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5118:	69 8d       	ldd	r22, Y+25	; 0x19
    511a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    511c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    511e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5120:	20 e0       	ldi	r18, 0x00	; 0
    5122:	30 e0       	ldi	r19, 0x00	; 0
    5124:	40 e2       	ldi	r20, 0x20	; 32
    5126:	51 e4       	ldi	r21, 0x41	; 65
    5128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    512c:	dc 01       	movw	r26, r24
    512e:	cb 01       	movw	r24, r22
    5130:	bc 01       	movw	r22, r24
    5132:	cd 01       	movw	r24, r26
    5134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5138:	dc 01       	movw	r26, r24
    513a:	cb 01       	movw	r24, r22
    513c:	9c 8b       	std	Y+20, r25	; 0x14
    513e:	8b 8b       	std	Y+19, r24	; 0x13
    5140:	0f c0       	rjmp	.+30     	; 0x5160 <main+0xfb2>
    5142:	80 e9       	ldi	r24, 0x90	; 144
    5144:	91 e0       	ldi	r25, 0x01	; 1
    5146:	9a 8b       	std	Y+18, r25	; 0x12
    5148:	89 8b       	std	Y+17, r24	; 0x11
    514a:	89 89       	ldd	r24, Y+17	; 0x11
    514c:	9a 89       	ldd	r25, Y+18	; 0x12
    514e:	01 97       	sbiw	r24, 0x01	; 1
    5150:	f1 f7       	brne	.-4      	; 0x514e <main+0xfa0>
    5152:	9a 8b       	std	Y+18, r25	; 0x12
    5154:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5156:	8b 89       	ldd	r24, Y+19	; 0x13
    5158:	9c 89       	ldd	r25, Y+20	; 0x14
    515a:	01 97       	sbiw	r24, 0x01	; 1
    515c:	9c 8b       	std	Y+20, r25	; 0x14
    515e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5160:	8b 89       	ldd	r24, Y+19	; 0x13
    5162:	9c 89       	ldd	r25, Y+20	; 0x14
    5164:	00 97       	sbiw	r24, 0x00	; 0
    5166:	69 f7       	brne	.-38     	; 0x5142 <main+0xf94>
    5168:	14 c0       	rjmp	.+40     	; 0x5192 <main+0xfe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    516a:	6d 89       	ldd	r22, Y+21	; 0x15
    516c:	7e 89       	ldd	r23, Y+22	; 0x16
    516e:	8f 89       	ldd	r24, Y+23	; 0x17
    5170:	98 8d       	ldd	r25, Y+24	; 0x18
    5172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5176:	dc 01       	movw	r26, r24
    5178:	cb 01       	movw	r24, r22
    517a:	9c 8b       	std	Y+20, r25	; 0x14
    517c:	8b 8b       	std	Y+19, r24	; 0x13
    517e:	8b 89       	ldd	r24, Y+19	; 0x13
    5180:	9c 89       	ldd	r25, Y+20	; 0x14
    5182:	98 8b       	std	Y+16, r25	; 0x10
    5184:	8f 87       	std	Y+15, r24	; 0x0f
    5186:	8f 85       	ldd	r24, Y+15	; 0x0f
    5188:	98 89       	ldd	r25, Y+16	; 0x10
    518a:	01 97       	sbiw	r24, 0x01	; 1
    518c:	f1 f7       	brne	.-4      	; 0x518a <main+0xfdc>
    518e:	98 8b       	std	Y+16, r25	; 0x10
    5190:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					Servo_Stop();
    5192:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <Servo_Stop>
					gettingServoOption = 0;
    5196:	10 92 0c 03 	sts	0x030C, r1
					gettingMotorOption=0;
    519a:	10 92 08 03 	sts	0x0308, r1
					currentState = STATE_MOTOR_OPTIONS;
    519e:	82 e0       	ldi	r24, 0x02	; 2
    51a0:	80 93 1a 03 	sts	0x031A, r24
    51a4:	43 c8       	rjmp	.-3962   	; 0x422c <main+0x7e>
			break;



		case STATE_EXIT:
			lcd_ES_tclear();
    51a6:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <lcd_ES_tclear>
			Lcd_ES_tsendString("Exit System :)");
    51aa:	8d e2       	ldi	r24, 0x2D	; 45
    51ac:	91 e0       	ldi	r25, 0x01	; 1
    51ae:	0e 94 43 1b 	call	0x3686	; 0x3686 <Lcd_ES_tsendString>
    51b2:	80 e0       	ldi	r24, 0x00	; 0
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	aa e7       	ldi	r26, 0x7A	; 122
    51b8:	b4 e4       	ldi	r27, 0x44	; 68
    51ba:	8b 87       	std	Y+11, r24	; 0x0b
    51bc:	9c 87       	std	Y+12, r25	; 0x0c
    51be:	ad 87       	std	Y+13, r26	; 0x0d
    51c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    51c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    51c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    51c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    51ca:	20 e0       	ldi	r18, 0x00	; 0
    51cc:	30 e0       	ldi	r19, 0x00	; 0
    51ce:	4a e7       	ldi	r20, 0x7A	; 122
    51d0:	55 e4       	ldi	r21, 0x45	; 69
    51d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51d6:	dc 01       	movw	r26, r24
    51d8:	cb 01       	movw	r24, r22
    51da:	8f 83       	std	Y+7, r24	; 0x07
    51dc:	98 87       	std	Y+8, r25	; 0x08
    51de:	a9 87       	std	Y+9, r26	; 0x09
    51e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51e2:	6f 81       	ldd	r22, Y+7	; 0x07
    51e4:	78 85       	ldd	r23, Y+8	; 0x08
    51e6:	89 85       	ldd	r24, Y+9	; 0x09
    51e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    51ea:	20 e0       	ldi	r18, 0x00	; 0
    51ec:	30 e0       	ldi	r19, 0x00	; 0
    51ee:	40 e8       	ldi	r20, 0x80	; 128
    51f0:	5f e3       	ldi	r21, 0x3F	; 63
    51f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51f6:	88 23       	and	r24, r24
    51f8:	2c f4       	brge	.+10     	; 0x5204 <main+0x1056>
		__ticks = 1;
    51fa:	81 e0       	ldi	r24, 0x01	; 1
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	9e 83       	std	Y+6, r25	; 0x06
    5200:	8d 83       	std	Y+5, r24	; 0x05
    5202:	3f c0       	rjmp	.+126    	; 0x5282 <main+0x10d4>
	else if (__tmp > 65535)
    5204:	6f 81       	ldd	r22, Y+7	; 0x07
    5206:	78 85       	ldd	r23, Y+8	; 0x08
    5208:	89 85       	ldd	r24, Y+9	; 0x09
    520a:	9a 85       	ldd	r25, Y+10	; 0x0a
    520c:	20 e0       	ldi	r18, 0x00	; 0
    520e:	3f ef       	ldi	r19, 0xFF	; 255
    5210:	4f e7       	ldi	r20, 0x7F	; 127
    5212:	57 e4       	ldi	r21, 0x47	; 71
    5214:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5218:	18 16       	cp	r1, r24
    521a:	4c f5       	brge	.+82     	; 0x526e <main+0x10c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    521c:	6b 85       	ldd	r22, Y+11	; 0x0b
    521e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5220:	8d 85       	ldd	r24, Y+13	; 0x0d
    5222:	9e 85       	ldd	r25, Y+14	; 0x0e
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	30 e0       	ldi	r19, 0x00	; 0
    5228:	40 e2       	ldi	r20, 0x20	; 32
    522a:	51 e4       	ldi	r21, 0x41	; 65
    522c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5230:	dc 01       	movw	r26, r24
    5232:	cb 01       	movw	r24, r22
    5234:	bc 01       	movw	r22, r24
    5236:	cd 01       	movw	r24, r26
    5238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    523c:	dc 01       	movw	r26, r24
    523e:	cb 01       	movw	r24, r22
    5240:	9e 83       	std	Y+6, r25	; 0x06
    5242:	8d 83       	std	Y+5, r24	; 0x05
    5244:	0f c0       	rjmp	.+30     	; 0x5264 <main+0x10b6>
    5246:	80 e9       	ldi	r24, 0x90	; 144
    5248:	91 e0       	ldi	r25, 0x01	; 1
    524a:	9c 83       	std	Y+4, r25	; 0x04
    524c:	8b 83       	std	Y+3, r24	; 0x03
    524e:	8b 81       	ldd	r24, Y+3	; 0x03
    5250:	9c 81       	ldd	r25, Y+4	; 0x04
    5252:	01 97       	sbiw	r24, 0x01	; 1
    5254:	f1 f7       	brne	.-4      	; 0x5252 <main+0x10a4>
    5256:	9c 83       	std	Y+4, r25	; 0x04
    5258:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    525a:	8d 81       	ldd	r24, Y+5	; 0x05
    525c:	9e 81       	ldd	r25, Y+6	; 0x06
    525e:	01 97       	sbiw	r24, 0x01	; 1
    5260:	9e 83       	std	Y+6, r25	; 0x06
    5262:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5264:	8d 81       	ldd	r24, Y+5	; 0x05
    5266:	9e 81       	ldd	r25, Y+6	; 0x06
    5268:	00 97       	sbiw	r24, 0x00	; 0
    526a:	69 f7       	brne	.-38     	; 0x5246 <main+0x1098>
    526c:	14 c0       	rjmp	.+40     	; 0x5296 <main+0x10e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    526e:	6f 81       	ldd	r22, Y+7	; 0x07
    5270:	78 85       	ldd	r23, Y+8	; 0x08
    5272:	89 85       	ldd	r24, Y+9	; 0x09
    5274:	9a 85       	ldd	r25, Y+10	; 0x0a
    5276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    527a:	dc 01       	movw	r26, r24
    527c:	cb 01       	movw	r24, r22
    527e:	9e 83       	std	Y+6, r25	; 0x06
    5280:	8d 83       	std	Y+5, r24	; 0x05
    5282:	8d 81       	ldd	r24, Y+5	; 0x05
    5284:	9e 81       	ldd	r25, Y+6	; 0x06
    5286:	9a 83       	std	Y+2, r25	; 0x02
    5288:	89 83       	std	Y+1, r24	; 0x01
    528a:	89 81       	ldd	r24, Y+1	; 0x01
    528c:	9a 81       	ldd	r25, Y+2	; 0x02
    528e:	01 97       	sbiw	r24, 0x01	; 1
    5290:	f1 f7       	brne	.-4      	; 0x528e <main+0x10e0>
    5292:	9a 83       	std	Y+2, r25	; 0x02
    5294:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			return 0;
    5296:	80 e0       	ldi	r24, 0x00	; 0
    5298:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	return 0;
}
    529a:	c5 57       	subi	r28, 0x75	; 117
    529c:	df 4f       	sbci	r29, 0xFF	; 255
    529e:	0f b6       	in	r0, 0x3f	; 63
    52a0:	f8 94       	cli
    52a2:	de bf       	out	0x3e, r29	; 62
    52a4:	0f be       	out	0x3f, r0	; 63
    52a6:	cd bf       	out	0x3d, r28	; 61
    52a8:	cf 91       	pop	r28
    52aa:	df 91       	pop	r29
    52ac:	1f 91       	pop	r17
    52ae:	0f 91       	pop	r16
    52b0:	08 95       	ret

000052b2 <__mulsi3>:
    52b2:	62 9f       	mul	r22, r18
    52b4:	d0 01       	movw	r26, r0
    52b6:	73 9f       	mul	r23, r19
    52b8:	f0 01       	movw	r30, r0
    52ba:	82 9f       	mul	r24, r18
    52bc:	e0 0d       	add	r30, r0
    52be:	f1 1d       	adc	r31, r1
    52c0:	64 9f       	mul	r22, r20
    52c2:	e0 0d       	add	r30, r0
    52c4:	f1 1d       	adc	r31, r1
    52c6:	92 9f       	mul	r25, r18
    52c8:	f0 0d       	add	r31, r0
    52ca:	83 9f       	mul	r24, r19
    52cc:	f0 0d       	add	r31, r0
    52ce:	74 9f       	mul	r23, r20
    52d0:	f0 0d       	add	r31, r0
    52d2:	65 9f       	mul	r22, r21
    52d4:	f0 0d       	add	r31, r0
    52d6:	99 27       	eor	r25, r25
    52d8:	72 9f       	mul	r23, r18
    52da:	b0 0d       	add	r27, r0
    52dc:	e1 1d       	adc	r30, r1
    52de:	f9 1f       	adc	r31, r25
    52e0:	63 9f       	mul	r22, r19
    52e2:	b0 0d       	add	r27, r0
    52e4:	e1 1d       	adc	r30, r1
    52e6:	f9 1f       	adc	r31, r25
    52e8:	bd 01       	movw	r22, r26
    52ea:	cf 01       	movw	r24, r30
    52ec:	11 24       	eor	r1, r1
    52ee:	08 95       	ret

000052f0 <__udivmodhi4>:
    52f0:	aa 1b       	sub	r26, r26
    52f2:	bb 1b       	sub	r27, r27
    52f4:	51 e1       	ldi	r21, 0x11	; 17
    52f6:	07 c0       	rjmp	.+14     	; 0x5306 <__udivmodhi4_ep>

000052f8 <__udivmodhi4_loop>:
    52f8:	aa 1f       	adc	r26, r26
    52fa:	bb 1f       	adc	r27, r27
    52fc:	a6 17       	cp	r26, r22
    52fe:	b7 07       	cpc	r27, r23
    5300:	10 f0       	brcs	.+4      	; 0x5306 <__udivmodhi4_ep>
    5302:	a6 1b       	sub	r26, r22
    5304:	b7 0b       	sbc	r27, r23

00005306 <__udivmodhi4_ep>:
    5306:	88 1f       	adc	r24, r24
    5308:	99 1f       	adc	r25, r25
    530a:	5a 95       	dec	r21
    530c:	a9 f7       	brne	.-22     	; 0x52f8 <__udivmodhi4_loop>
    530e:	80 95       	com	r24
    5310:	90 95       	com	r25
    5312:	bc 01       	movw	r22, r24
    5314:	cd 01       	movw	r24, r26
    5316:	08 95       	ret

00005318 <__udivmodsi4>:
    5318:	a1 e2       	ldi	r26, 0x21	; 33
    531a:	1a 2e       	mov	r1, r26
    531c:	aa 1b       	sub	r26, r26
    531e:	bb 1b       	sub	r27, r27
    5320:	fd 01       	movw	r30, r26
    5322:	0d c0       	rjmp	.+26     	; 0x533e <__udivmodsi4_ep>

00005324 <__udivmodsi4_loop>:
    5324:	aa 1f       	adc	r26, r26
    5326:	bb 1f       	adc	r27, r27
    5328:	ee 1f       	adc	r30, r30
    532a:	ff 1f       	adc	r31, r31
    532c:	a2 17       	cp	r26, r18
    532e:	b3 07       	cpc	r27, r19
    5330:	e4 07       	cpc	r30, r20
    5332:	f5 07       	cpc	r31, r21
    5334:	20 f0       	brcs	.+8      	; 0x533e <__udivmodsi4_ep>
    5336:	a2 1b       	sub	r26, r18
    5338:	b3 0b       	sbc	r27, r19
    533a:	e4 0b       	sbc	r30, r20
    533c:	f5 0b       	sbc	r31, r21

0000533e <__udivmodsi4_ep>:
    533e:	66 1f       	adc	r22, r22
    5340:	77 1f       	adc	r23, r23
    5342:	88 1f       	adc	r24, r24
    5344:	99 1f       	adc	r25, r25
    5346:	1a 94       	dec	r1
    5348:	69 f7       	brne	.-38     	; 0x5324 <__udivmodsi4_loop>
    534a:	60 95       	com	r22
    534c:	70 95       	com	r23
    534e:	80 95       	com	r24
    5350:	90 95       	com	r25
    5352:	9b 01       	movw	r18, r22
    5354:	ac 01       	movw	r20, r24
    5356:	bd 01       	movw	r22, r26
    5358:	cf 01       	movw	r24, r30
    535a:	08 95       	ret

0000535c <__prologue_saves__>:
    535c:	2f 92       	push	r2
    535e:	3f 92       	push	r3
    5360:	4f 92       	push	r4
    5362:	5f 92       	push	r5
    5364:	6f 92       	push	r6
    5366:	7f 92       	push	r7
    5368:	8f 92       	push	r8
    536a:	9f 92       	push	r9
    536c:	af 92       	push	r10
    536e:	bf 92       	push	r11
    5370:	cf 92       	push	r12
    5372:	df 92       	push	r13
    5374:	ef 92       	push	r14
    5376:	ff 92       	push	r15
    5378:	0f 93       	push	r16
    537a:	1f 93       	push	r17
    537c:	cf 93       	push	r28
    537e:	df 93       	push	r29
    5380:	cd b7       	in	r28, 0x3d	; 61
    5382:	de b7       	in	r29, 0x3e	; 62
    5384:	ca 1b       	sub	r28, r26
    5386:	db 0b       	sbc	r29, r27
    5388:	0f b6       	in	r0, 0x3f	; 63
    538a:	f8 94       	cli
    538c:	de bf       	out	0x3e, r29	; 62
    538e:	0f be       	out	0x3f, r0	; 63
    5390:	cd bf       	out	0x3d, r28	; 61
    5392:	09 94       	ijmp

00005394 <__epilogue_restores__>:
    5394:	2a 88       	ldd	r2, Y+18	; 0x12
    5396:	39 88       	ldd	r3, Y+17	; 0x11
    5398:	48 88       	ldd	r4, Y+16	; 0x10
    539a:	5f 84       	ldd	r5, Y+15	; 0x0f
    539c:	6e 84       	ldd	r6, Y+14	; 0x0e
    539e:	7d 84       	ldd	r7, Y+13	; 0x0d
    53a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    53a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    53a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    53a6:	b9 84       	ldd	r11, Y+9	; 0x09
    53a8:	c8 84       	ldd	r12, Y+8	; 0x08
    53aa:	df 80       	ldd	r13, Y+7	; 0x07
    53ac:	ee 80       	ldd	r14, Y+6	; 0x06
    53ae:	fd 80       	ldd	r15, Y+5	; 0x05
    53b0:	0c 81       	ldd	r16, Y+4	; 0x04
    53b2:	1b 81       	ldd	r17, Y+3	; 0x03
    53b4:	aa 81       	ldd	r26, Y+2	; 0x02
    53b6:	b9 81       	ldd	r27, Y+1	; 0x01
    53b8:	ce 0f       	add	r28, r30
    53ba:	d1 1d       	adc	r29, r1
    53bc:	0f b6       	in	r0, 0x3f	; 63
    53be:	f8 94       	cli
    53c0:	de bf       	out	0x3e, r29	; 62
    53c2:	0f be       	out	0x3f, r0	; 63
    53c4:	cd bf       	out	0x3d, r28	; 61
    53c6:	ed 01       	movw	r28, r26
    53c8:	08 95       	ret

000053ca <memset>:
    53ca:	dc 01       	movw	r26, r24
    53cc:	01 c0       	rjmp	.+2      	; 0x53d0 <memset+0x6>
    53ce:	6d 93       	st	X+, r22
    53d0:	41 50       	subi	r20, 0x01	; 1
    53d2:	50 40       	sbci	r21, 0x00	; 0
    53d4:	e0 f7       	brcc	.-8      	; 0x53ce <memset+0x4>
    53d6:	08 95       	ret

000053d8 <strcmp>:
    53d8:	fb 01       	movw	r30, r22
    53da:	dc 01       	movw	r26, r24
    53dc:	8d 91       	ld	r24, X+
    53de:	01 90       	ld	r0, Z+
    53e0:	80 19       	sub	r24, r0
    53e2:	01 10       	cpse	r0, r1
    53e4:	d9 f3       	breq	.-10     	; 0x53dc <strcmp+0x4>
    53e6:	99 0b       	sbc	r25, r25
    53e8:	08 95       	ret

000053ea <_exit>:
    53ea:	f8 94       	cli

000053ec <__stop_program>:
    53ec:	ff cf       	rjmp	.-2      	; 0x53ec <__stop_program>
