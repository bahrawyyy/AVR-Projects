
Motors_Dashboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000566e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000274  00800060  0000566e  00005702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  008002d4  008002d4  00005976  2**0
                  ALLOC
  3 .stab         00005d3c  00000000  00000000  00005978  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000047aa  00000000  00000000  0000b6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000fe5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0001001e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00010232  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00012844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00013d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00015020  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00015200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00015507  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015f21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__vector_1>
       8:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__vector_2>
       c:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__vector_10>
      2c:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f6 e5       	ldi	r31, 0x56	; 86
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 31       	cpi	r26, 0x1D	; 29
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 22 	call	0x442e	; 0x442e <main>
      8a:	0c 94 35 2b 	jmp	0x566a	; 0x566a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e3       	ldi	r26, 0x3C	; 60
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0a 2b 	jmp	0x5614	; 0x5614 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ee 2a 	jmp	0x55dc	; 0x55dc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e3       	ldi	r24, 0x3C	; 60
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0a 2b 	jmp	0x5614	; 0x5614 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e3       	ldi	r22, 0x3C	; 60
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fa 2a 	jmp	0x55f4	; 0x55f4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 16 2b 	jmp	0x562c	; 0x562c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f7 2a 	jmp	0x55ee	; 0x55ee <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 13 2b 	jmp	0x5626	; 0x5626 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 fe 2a 	jmp	0x55fc	; 0x55fc <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 1a 2b 	jmp	0x5634	; 0x5634 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ec 5b       	subi	r30, 0xBC	; 188
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TIMER0_Init>:
volatile u8 Global_Delay_Status=0;



ES_t TIMER0_Init(TIMER0_Config_t *TIME0_Cfg)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2a 97       	sbiw	r28, 0x0a	; 10
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	9b 83       	std	Y+3, r25	; 0x03
     f00:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	89 83       	std	Y+1, r24	; 0x01
	if(TIME0_Cfg == NULLPTR){
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	19 f4       	brne	.+6      	; 0xf14 <TIMER0_Init+0x2a>
		RetValue = ES_NOT_OK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	bb c0       	rjmp	.+374    	; 0x108a <TIMER0_Init+0x1a0>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer0_Cfg = *TIME0_Cfg;
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	9b 81       	ldd	r25, Y+3	; 0x03
     f18:	2d e0       	ldi	r18, 0x0D	; 13
     f1a:	33 e0       	ldi	r19, 0x03	; 3
     f1c:	3f 83       	std	Y+7, r19	; 0x07
     f1e:	2e 83       	std	Y+6, r18	; 0x06
     f20:	99 87       	std	Y+9, r25	; 0x09
     f22:	88 87       	std	Y+8, r24	; 0x08
     f24:	35 e0       	ldi	r19, 0x05	; 5
     f26:	3a 87       	std	Y+10, r19	; 0x0a
     f28:	e8 85       	ldd	r30, Y+8	; 0x08
     f2a:	f9 85       	ldd	r31, Y+9	; 0x09
     f2c:	00 80       	ld	r0, Z
     f2e:	28 85       	ldd	r18, Y+8	; 0x08
     f30:	39 85       	ldd	r19, Y+9	; 0x09
     f32:	2f 5f       	subi	r18, 0xFF	; 255
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	39 87       	std	Y+9, r19	; 0x09
     f38:	28 87       	std	Y+8, r18	; 0x08
     f3a:	ee 81       	ldd	r30, Y+6	; 0x06
     f3c:	ff 81       	ldd	r31, Y+7	; 0x07
     f3e:	00 82       	st	Z, r0
     f40:	2e 81       	ldd	r18, Y+6	; 0x06
     f42:	3f 81       	ldd	r19, Y+7	; 0x07
     f44:	2f 5f       	subi	r18, 0xFF	; 255
     f46:	3f 4f       	sbci	r19, 0xFF	; 255
     f48:	3f 83       	std	Y+7, r19	; 0x07
     f4a:	2e 83       	std	Y+6, r18	; 0x06
     f4c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f4e:	31 50       	subi	r19, 0x01	; 1
     f50:	3a 87       	std	Y+10, r19	; 0x0a
     f52:	8a 85       	ldd	r24, Y+10	; 0x0a
     f54:	88 23       	and	r24, r24
     f56:	41 f7       	brne	.-48     	; 0xf28 <TIMER0_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME0_Cfg->mode >= TIMER0_NORMAL_MODE) && (TIME0_Cfg->mode <= TIMER0_FAST_PWM_MODE))
     f58:	ea 81       	ldd	r30, Y+2	; 0x02
     f5a:	fb 81       	ldd	r31, Y+3	; 0x03
     f5c:	80 81       	ld	r24, Z
     f5e:	84 30       	cpi	r24, 0x04	; 4
     f60:	08 f0       	brcs	.+2      	; 0xf64 <TIMER0_Init+0x7a>
     f62:	5e c0       	rjmp	.+188    	; 0x1020 <TIMER0_Init+0x136>
		{
			RetValue = ES_OK;
     f64:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME0_Cfg->mode)
     f66:	ea 81       	ldd	r30, Y+2	; 0x02
     f68:	fb 81       	ldd	r31, Y+3	; 0x03
     f6a:	80 81       	ld	r24, Z
     f6c:	e8 2f       	mov	r30, r24
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	fd 83       	std	Y+5, r31	; 0x05
     f72:	ec 83       	std	Y+4, r30	; 0x04
     f74:	2c 81       	ldd	r18, Y+4	; 0x04
     f76:	3d 81       	ldd	r19, Y+5	; 0x05
     f78:	21 30       	cpi	r18, 0x01	; 1
     f7a:	31 05       	cpc	r19, r1
     f7c:	21 f1       	breq	.+72     	; 0xfc6 <TIMER0_Init+0xdc>
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	91 05       	cpc	r25, r1
     f86:	2c f4       	brge	.+10     	; 0xf92 <TIMER0_Init+0xa8>
     f88:	ec 81       	ldd	r30, Y+4	; 0x04
     f8a:	fd 81       	ldd	r31, Y+5	; 0x05
     f8c:	30 97       	sbiw	r30, 0x00	; 0
     f8e:	61 f0       	breq	.+24     	; 0xfa8 <TIMER0_Init+0xbe>
     f90:	49 c0       	rjmp	.+146    	; 0x1024 <TIMER0_Init+0x13a>
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	31 05       	cpc	r19, r1
     f9a:	21 f1       	breq	.+72     	; 0xfe4 <TIMER0_Init+0xfa>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	71 f1       	breq	.+92     	; 0x1002 <TIMER0_Init+0x118>
     fa6:	3e c0       	rjmp	.+124    	; 0x1024 <TIMER0_Init+0x13a>
			{
			case TIMER0_NORMAL_MODE:
				CLR_BIT(TCCR0,WGM00);
     fa8:	a3 e5       	ldi	r26, 0x53	; 83
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e3 e5       	ldi	r30, 0x53	; 83
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 7b       	andi	r24, 0xBF	; 191
     fb4:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
     fb6:	a3 e5       	ldi	r26, 0x53	; 83
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e3 e5       	ldi	r30, 0x53	; 83
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	87 7f       	andi	r24, 0xF7	; 247
     fc2:	8c 93       	st	X, r24
     fc4:	2f c0       	rjmp	.+94     	; 0x1024 <TIMER0_Init+0x13a>
				break;
			case TIMER0_PHASE_CORRECT_MODE:
				SET_BIT(TCCR0,WGM00);
     fc6:	a3 e5       	ldi	r26, 0x53	; 83
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e3 e5       	ldi	r30, 0x53	; 83
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 64       	ori	r24, 0x40	; 64
     fd2:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
     fd4:	a3 e5       	ldi	r26, 0x53	; 83
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e3 e5       	ldi	r30, 0x53	; 83
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	87 7f       	andi	r24, 0xF7	; 247
     fe0:	8c 93       	st	X, r24
     fe2:	20 c0       	rjmp	.+64     	; 0x1024 <TIMER0_Init+0x13a>
				break;
			case TIMER0_CTC_MODE:
				CLR_BIT(TCCR0,WGM00);
     fe4:	a3 e5       	ldi	r26, 0x53	; 83
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e3 e5       	ldi	r30, 0x53	; 83
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8f 7b       	andi	r24, 0xBF	; 191
     ff0:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
     ff2:	a3 e5       	ldi	r26, 0x53	; 83
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e3 e5       	ldi	r30, 0x53	; 83
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	88 60       	ori	r24, 0x08	; 8
     ffe:	8c 93       	st	X, r24
    1000:	11 c0       	rjmp	.+34     	; 0x1024 <TIMER0_Init+0x13a>
				break;
			case TIMER0_FAST_PWM_MODE:
				SET_BIT(TCCR0,WGM00);
    1002:	a3 e5       	ldi	r26, 0x53	; 83
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e3 e5       	ldi	r30, 0x53	; 83
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	80 64       	ori	r24, 0x40	; 64
    100e:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    1010:	a3 e5       	ldi	r26, 0x53	; 83
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e3 e5       	ldi	r30, 0x53	; 83
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 60       	ori	r24, 0x08	; 8
    101c:	8c 93       	st	X, r24
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <TIMER0_Init+0x13a>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME0_Cfg->prescalar >= TIMER0_STOP) && (TIME0_Cfg->prescalar <= EXTERNAL_RISING))
    1024:	ea 81       	ldd	r30, Y+2	; 0x02
    1026:	fb 81       	ldd	r31, Y+3	; 0x03
    1028:	81 81       	ldd	r24, Z+1	; 0x01
    102a:	88 30       	cpi	r24, 0x08	; 8
    102c:	58 f4       	brcc	.+22     	; 0x1044 <TIMER0_Init+0x15a>
		{
			TCCR0 |= TIME0_Cfg->prescalar;
    102e:	a3 e5       	ldi	r26, 0x53	; 83
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e3 e5       	ldi	r30, 0x53	; 83
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	90 81       	ld	r25, Z
    1038:	ea 81       	ldd	r30, Y+2	; 0x02
    103a:	fb 81       	ldd	r31, Y+3	; 0x03
    103c:	81 81       	ldd	r24, Z+1	; 0x01
    103e:	89 2b       	or	r24, r25
    1040:	8c 93       	st	X, r24
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <TIMER0_Init+0x15e>
		}else{
			RetValue = ES_NOT_OK;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_0 OC0 Pin
		TCCR0 |= (TIME0_Cfg->oc0_mode << COM00);
    1048:	a3 e5       	ldi	r26, 0x53	; 83
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e3 e5       	ldi	r30, 0x53	; 83
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	28 2f       	mov	r18, r24
    1054:	ea 81       	ldd	r30, Y+2	; 0x02
    1056:	fb 81       	ldd	r31, Y+3	; 0x03
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	82 95       	swap	r24
    1060:	92 95       	swap	r25
    1062:	90 7f       	andi	r25, 0xF0	; 240
    1064:	98 27       	eor	r25, r24
    1066:	80 7f       	andi	r24, 0xF0	; 240
    1068:	98 27       	eor	r25, r24
    106a:	82 2b       	or	r24, r18
    106c:	8c 93       	st	X, r24


		// Timer_0 Interrupts
		TIMSK |= (TIME0_Cfg->OVF_Interrupt) | (TIME0_Cfg->OCM_Interrupt);
    106e:	a9 e5       	ldi	r26, 0x59	; 89
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e9 e5       	ldi	r30, 0x59	; 89
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	20 81       	ld	r18, Z
    1078:	ea 81       	ldd	r30, Y+2	; 0x02
    107a:	fb 81       	ldd	r31, Y+3	; 0x03
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	ea 81       	ldd	r30, Y+2	; 0x02
    1080:	fb 81       	ldd	r31, Y+3	; 0x03
    1082:	84 81       	ldd	r24, Z+4	; 0x04
    1084:	89 2b       	or	r24, r25
    1086:	82 2b       	or	r24, r18
    1088:	8c 93       	st	X, r24



	}

	return RetValue;
    108a:	89 81       	ldd	r24, Y+1	; 0x01

}
    108c:	2a 96       	adiw	r28, 0x0a	; 10
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <TIMER0_Stop>:
ES_t TIMER0_Stop(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR0,CS00);
    10a6:	a3 e5       	ldi	r26, 0x53	; 83
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e3 e5       	ldi	r30, 0x53	; 83
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8e 7f       	andi	r24, 0xFE	; 254
    10b2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
    10b4:	a3 e5       	ldi	r26, 0x53	; 83
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e3 e5       	ldi	r30, 0x53	; 83
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8d 7f       	andi	r24, 0xFD	; 253
    10c0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    10c2:	a3 e5       	ldi	r26, 0x53	; 83
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e3 e5       	ldi	r30, 0x53	; 83
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8b 7f       	andi	r24, 0xFB	; 251
    10ce:	8c 93       	st	X, r24
	return ES_OK;
    10d0:	80 e0       	ldi	r24, 0x00	; 0
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <TIMER0_GetCompareValue>:

ES_t TIMER0_GetCompareValue(u8 *CM_Value)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <TIMER0_GetCompareValue+0x6>
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
	*CM_Value = OCR0;
    10e6:	ec e5       	ldi	r30, 0x5C	; 92
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	e9 81       	ldd	r30, Y+1	; 0x01
    10ee:	fa 81       	ldd	r31, Y+2	; 0x02
    10f0:	80 83       	st	Z, r24

	return ES_OK;
    10f2:	80 e0       	ldi	r24, 0x00	; 0

}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <TIMER0_SetCompareValue>:
ES_t TIMER0_SetCompareValue(u8 CM_Value)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	0f 92       	push	r0
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = CM_Value;
    110a:	ec e5       	ldi	r30, 0x5C	; 92
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	80 83       	st	Z, r24

	return ES_OK;
    1112:	80 e0       	ldi	r24, 0x00	; 0

}
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <TIMER0_GetCounterValue>:

ES_t TIMER0_GetCounterValue(u8 *TCNT_Value)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <TIMER0_GetCounterValue+0x6>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01

	*TCNT_Value = TCNT0;
    112a:	e2 e5       	ldi	r30, 0x52	; 82
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	e9 81       	ldd	r30, Y+1	; 0x01
    1132:	fa 81       	ldd	r31, Y+2	; 0x02
    1134:	80 83       	st	Z, r24


	return ES_OK;
    1136:	80 e0       	ldi	r24, 0x00	; 0
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <TIMER0_SetCounterValue>:


ES_t TIMER0_SetCounterValue(u8 TCNT_Value)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	0f 92       	push	r0
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = TCNT_Value;
    114e:	e2 e5       	ldi	r30, 0x52	; 82
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	80 83       	st	Z, r24

	return ES_OK;
    1156:	80 e0       	ldi	r24, 0x00	; 0

}
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <TIMER0_GetOVF_Flag>:

// In case of larger than 255
ES_t TIMER0_GetOVF_Flag(u8 *OVF_Value)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <TIMER0_GetOVF_Flag+0x6>
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	9a 83       	std	Y+2, r25	; 0x02
    116c:	89 83       	std	Y+1, r24	; 0x01

	*OVF_Value = OVF_Number;
    116e:	80 91 d9 02 	lds	r24, 0x02D9
    1172:	90 91 da 02 	lds	r25, 0x02DA
    1176:	a0 91 db 02 	lds	r26, 0x02DB
    117a:	b0 91 dc 02 	lds	r27, 0x02DC
    117e:	e9 81       	ldd	r30, Y+1	; 0x01
    1180:	fa 81       	ldd	r31, Y+2	; 0x02
    1182:	80 83       	st	Z, r24
	return ES_OK;
    1184:	80 e0       	ldi	r24, 0x00	; 0

}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <PWM_Set_DutyCycle>:



ES_t PWM_Set_DutyCycle(float dutyCycle)
{
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <PWM_Set_DutyCycle+0xa>
    119a:	00 d0       	rcall	.+0      	; 0x119c <PWM_Set_DutyCycle+0xc>
    119c:	0f 92       	push	r0
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	6a 83       	std	Y+2, r22	; 0x02
    11a4:	7b 83       	std	Y+3, r23	; 0x03
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	9d 83       	std	Y+5, r25	; 0x05

	ES_t RetValue;

	if((Global_Timer0_Cfg.mode == TIMER0_FAST_PWM_MODE) || (Global_Timer0_Cfg.mode == TIMER0_PHASE_CORRECT_MODE))
    11aa:	80 91 0d 03 	lds	r24, 0x030D
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	29 f0       	breq	.+10     	; 0x11bc <PWM_Set_DutyCycle+0x2c>
    11b2:	80 91 0d 03 	lds	r24, 0x030D
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	09 f0       	breq	.+2      	; 0x11bc <PWM_Set_DutyCycle+0x2c>
    11ba:	57 c0       	rjmp	.+174    	; 0x126a <PWM_Set_DutyCycle+0xda>
	{
		if(Global_Timer0_Cfg.oc0_mode == OC0_NON_INVERTING)
    11bc:	80 91 0f 03 	lds	r24, 0x030F
    11c0:	82 30       	cpi	r24, 0x02	; 2
    11c2:	11 f5       	brne	.+68     	; 0x1208 <PWM_Set_DutyCycle+0x78>
		{
			OCR0 = (u8)((dutyCycle/100.0)*256) - 1;
    11c4:	0c e5       	ldi	r16, 0x5C	; 92
    11c6:	10 e0       	ldi	r17, 0x00	; 0
    11c8:	6a 81       	ldd	r22, Y+2	; 0x02
    11ca:	7b 81       	ldd	r23, Y+3	; 0x03
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	48 ec       	ldi	r20, 0xC8	; 200
    11d6:	52 e4       	ldi	r21, 0x42	; 66
    11d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	53 e4       	ldi	r21, 0x43	; 67
    11ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	81 50       	subi	r24, 0x01	; 1
    1202:	f8 01       	movw	r30, r16
    1204:	80 83       	st	Z, r24
    1206:	2f c0       	rjmp	.+94     	; 0x1266 <PWM_Set_DutyCycle+0xd6>

		}else if(Global_Timer0_Cfg.oc0_mode == OC0_INVERTING)
    1208:	80 91 0f 03 	lds	r24, 0x030F
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	59 f5       	brne	.+86     	; 0x1266 <PWM_Set_DutyCycle+0xd6>
		{
			OCR0 = (u8)(256-((256*dutyCycle)/100.0)) - 1;
    1210:	0c e5       	ldi	r16, 0x5C	; 92
    1212:	10 e0       	ldi	r17, 0x00	; 0
    1214:	6a 81       	ldd	r22, Y+2	; 0x02
    1216:	7b 81       	ldd	r23, Y+3	; 0x03
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	53 e4       	ldi	r21, 0x43	; 67
    1224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	48 ec       	ldi	r20, 0xC8	; 200
    1236:	52 ec       	ldi	r21, 0xC2	; 194
    1238:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	53 e4       	ldi	r21, 0x43	; 67
    124c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	81 50       	subi	r24, 0x01	; 1
    1262:	f8 01       	movw	r30, r16
    1264:	80 83       	st	Z, r24
		}
		RetValue = ES_OK;
    1266:	19 82       	std	Y+1, r1	; 0x01
    1268:	02 c0       	rjmp	.+4      	; 0x126e <PWM_Set_DutyCycle+0xde>
	}else{
		RetValue = ES_NOT_OK;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
	}
	return RetValue;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	08 95       	ret

00001284 <Timer0_Set_Delay_ms>:




void Timer0_Set_Delay_ms(u32 delay_ms)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	67 97       	sbiw	r28, 0x17	; 23
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	6d 87       	std	Y+13, r22	; 0x0d
    129a:	7e 87       	std	Y+14, r23	; 0x0e
    129c:	8f 87       	std	Y+15, r24	; 0x0f
    129e:	98 8b       	std	Y+16, r25	; 0x10
	TIMER0_Config_t Timer0Cfg = {TIMER0_NORMAL_MODE, TIMER0_PRESCALAR_1024, OC0_DISCONNECTED, TOIE0_ENABLE, OCIE0_DISABLE};
    12a0:	9e 01       	movw	r18, r28
    12a2:	28 5f       	subi	r18, 0xF8	; 248
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	3c 8b       	std	Y+20, r19	; 0x14
    12a8:	2b 8b       	std	Y+19, r18	; 0x13
    12aa:	81 eb       	ldi	r24, 0xB1	; 177
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	9e 8b       	std	Y+22, r25	; 0x16
    12b0:	8d 8b       	std	Y+21, r24	; 0x15
    12b2:	95 e0       	ldi	r25, 0x05	; 5
    12b4:	9f 8b       	std	Y+23, r25	; 0x17
    12b6:	ed 89       	ldd	r30, Y+21	; 0x15
    12b8:	fe 89       	ldd	r31, Y+22	; 0x16
    12ba:	00 80       	ld	r0, Z
    12bc:	2d 89       	ldd	r18, Y+21	; 0x15
    12be:	3e 89       	ldd	r19, Y+22	; 0x16
    12c0:	2f 5f       	subi	r18, 0xFF	; 255
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	3e 8b       	std	Y+22, r19	; 0x16
    12c6:	2d 8b       	std	Y+21, r18	; 0x15
    12c8:	eb 89       	ldd	r30, Y+19	; 0x13
    12ca:	fc 89       	ldd	r31, Y+20	; 0x14
    12cc:	00 82       	st	Z, r0
    12ce:	2b 89       	ldd	r18, Y+19	; 0x13
    12d0:	3c 89       	ldd	r19, Y+20	; 0x14
    12d2:	2f 5f       	subi	r18, 0xFF	; 255
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	3c 8b       	std	Y+20, r19	; 0x14
    12d8:	2b 8b       	std	Y+19, r18	; 0x13
    12da:	3f 89       	ldd	r19, Y+23	; 0x17
    12dc:	31 50       	subi	r19, 0x01	; 1
    12de:	3f 8b       	std	Y+23, r19	; 0x17
    12e0:	8f 89       	ldd	r24, Y+23	; 0x17
    12e2:	88 23       	and	r24, r24
    12e4:	41 f7       	brne	.-48     	; 0x12b6 <Timer0_Set_Delay_ms+0x32>
	TIMER0_Init(&Timer0Cfg);
    12e6:	ce 01       	movw	r24, r28
    12e8:	08 96       	adiw	r24, 0x08	; 8
    12ea:	0e 94 75 07 	call	0xeea	; 0xeea <TIMER0_Init>

	u16 prescalar = 0;
    12ee:	1f 82       	std	Y+7, r1	; 0x07
    12f0:	1e 82       	std	Y+6, r1	; 0x06
	switch(Timer0Cfg.prescalar){
    12f2:	89 85       	ldd	r24, Y+9	; 0x09
    12f4:	e8 2f       	mov	r30, r24
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	fa 8b       	std	Y+18, r31	; 0x12
    12fa:	e9 8b       	std	Y+17, r30	; 0x11
    12fc:	29 89       	ldd	r18, Y+17	; 0x11
    12fe:	3a 89       	ldd	r19, Y+18	; 0x12
    1300:	23 30       	cpi	r18, 0x03	; 3
    1302:	31 05       	cpc	r19, r1
    1304:	49 f1       	breq	.+82     	; 0x1358 <Timer0_Set_Delay_ms+0xd4>
    1306:	89 89       	ldd	r24, Y+17	; 0x11
    1308:	9a 89       	ldd	r25, Y+18	; 0x12
    130a:	84 30       	cpi	r24, 0x04	; 4
    130c:	91 05       	cpc	r25, r1
    130e:	7c f4       	brge	.+30     	; 0x132e <Timer0_Set_Delay_ms+0xaa>
    1310:	e9 89       	ldd	r30, Y+17	; 0x11
    1312:	fa 89       	ldd	r31, Y+18	; 0x12
    1314:	e1 30       	cpi	r30, 0x01	; 1
    1316:	f1 05       	cpc	r31, r1
    1318:	49 f1       	breq	.+82     	; 0x136c <Timer0_Set_Delay_ms+0xe8>
    131a:	29 89       	ldd	r18, Y+17	; 0x11
    131c:	3a 89       	ldd	r19, Y+18	; 0x12
    131e:	22 30       	cpi	r18, 0x02	; 2
    1320:	31 05       	cpc	r19, r1
    1322:	fc f4       	brge	.+62     	; 0x1362 <Timer0_Set_Delay_ms+0xde>
    1324:	89 89       	ldd	r24, Y+17	; 0x11
    1326:	9a 89       	ldd	r25, Y+18	; 0x12
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	29 f1       	breq	.+74     	; 0x1376 <Timer0_Set_Delay_ms+0xf2>
    132c:	26 c0       	rjmp	.+76     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
    132e:	e9 89       	ldd	r30, Y+17	; 0x11
    1330:	fa 89       	ldd	r31, Y+18	; 0x12
    1332:	e5 30       	cpi	r30, 0x05	; 5
    1334:	f1 05       	cpc	r31, r1
    1336:	31 f0       	breq	.+12     	; 0x1344 <Timer0_Set_Delay_ms+0xc0>
    1338:	29 89       	ldd	r18, Y+17	; 0x11
    133a:	3a 89       	ldd	r19, Y+18	; 0x12
    133c:	25 30       	cpi	r18, 0x05	; 5
    133e:	31 05       	cpc	r19, r1
    1340:	34 f0       	brlt	.+12     	; 0x134e <Timer0_Set_Delay_ms+0xca>
    1342:	1b c0       	rjmp	.+54     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
	case TIMER0_PRESCALAR_1024:
		prescalar = 1024;
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	94 e0       	ldi	r25, 0x04	; 4
    1348:	9f 83       	std	Y+7, r25	; 0x07
    134a:	8e 83       	std	Y+6, r24	; 0x06
    134c:	16 c0       	rjmp	.+44     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_256:
		prescalar = 256;
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	9f 83       	std	Y+7, r25	; 0x07
    1354:	8e 83       	std	Y+6, r24	; 0x06
    1356:	11 c0       	rjmp	.+34     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_64:
		prescalar = 64;
    1358:	80 e4       	ldi	r24, 0x40	; 64
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9f 83       	std	Y+7, r25	; 0x07
    135e:	8e 83       	std	Y+6, r24	; 0x06
    1360:	0c c0       	rjmp	.+24     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_8:
		prescalar = 8;
    1362:	88 e0       	ldi	r24, 0x08	; 8
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9f 83       	std	Y+7, r25	; 0x07
    1368:	8e 83       	std	Y+6, r24	; 0x06
    136a:	07 c0       	rjmp	.+14     	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_1:
		prescalar = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9f 83       	std	Y+7, r25	; 0x07
    1372:	8e 83       	std	Y+6, r24	; 0x06
    1374:	02 c0       	rjmp	.+4      	; 0x137a <Timer0_Set_Delay_ms+0xf6>
		break;
	case EXTERNAL_FALLING:
	case EXTERNAL_RISING:
		break;
	case TIMER0_STOP:
		prescalar = 0;
    1376:	1f 82       	std	Y+7, r1	; 0x07
    1378:	1e 82       	std	Y+6, r1	; 0x06
		break;
	}

	u32 CountsNum = (u32)((F_CPU / (prescalar * 1000UL)) * (delay_ms));
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	9f 81       	ldd	r25, Y+7	; 0x07
    137e:	cc 01       	movw	r24, r24
    1380:	a0 e0       	ldi	r26, 0x00	; 0
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	28 ee       	ldi	r18, 0xE8	; 232
    1386:	33 e0       	ldi	r19, 0x03	; 3
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 99 2a 	call	0x5532	; 0x5532 <__mulsi3>
    1394:	9b 01       	movw	r18, r22
    1396:	ac 01       	movw	r20, r24
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	94 e2       	ldi	r25, 0x24	; 36
    139c:	a4 ef       	ldi	r26, 0xF4	; 244
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__udivmodsi4>
    13a8:	da 01       	movw	r26, r20
    13aa:	c9 01       	movw	r24, r18
    13ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    13ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    13b0:	4f 85       	ldd	r20, Y+15	; 0x0f
    13b2:	58 89       	ldd	r21, Y+16	; 0x10
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 99 2a 	call	0x5532	; 0x5532 <__mulsi3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	9b 83       	std	Y+3, r25	; 0x03
    13c4:	ac 83       	std	Y+4, r26	; 0x04
    13c6:	bd 83       	std	Y+5, r27	; 0x05
	OVF_Number = (u32)(CountsNum / 256);
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	9b 81       	ldd	r25, Y+3	; 0x03
    13cc:	ac 81       	ldd	r26, Y+4	; 0x04
    13ce:	bd 81       	ldd	r27, Y+5	; 0x05
    13d0:	89 2f       	mov	r24, r25
    13d2:	9a 2f       	mov	r25, r26
    13d4:	ab 2f       	mov	r26, r27
    13d6:	bb 27       	eor	r27, r27
    13d8:	80 93 d9 02 	sts	0x02D9, r24
    13dc:	90 93 da 02 	sts	0x02DA, r25
    13e0:	a0 93 db 02 	sts	0x02DB, r26
    13e4:	b0 93 dc 02 	sts	0x02DC, r27
	u8 RestCounts = CountsNum % 256;
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	89 83       	std	Y+1, r24	; 0x01



	TIMER0_SetCounterValue(0);
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	0e 94 a1 08 	call	0x1142	; 0x1142 <TIMER0_SetCounterValue>

	while(OVF_Number > 0);
    13f2:	80 91 d9 02 	lds	r24, 0x02D9
    13f6:	90 91 da 02 	lds	r25, 0x02DA
    13fa:	a0 91 db 02 	lds	r26, 0x02DB
    13fe:	b0 91 dc 02 	lds	r27, 0x02DC
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	a1 05       	cpc	r26, r1
    1406:	b1 05       	cpc	r27, r1
    1408:	a1 f7       	brne	.-24     	; 0x13f2 <Timer0_Set_Delay_ms+0x16e>

	while(TCNT0 < RestCounts);
    140a:	e2 e5       	ldi	r30, 0x52	; 82
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	90 81       	ld	r25, Z
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	98 17       	cp	r25, r24
    1414:	d0 f3       	brcs	.-12     	; 0x140a <Timer0_Set_Delay_ms+0x186>

	TIMER0_Stop();
    1416:	0e 94 4f 08 	call	0x109e	; 0x109e <TIMER0_Stop>

	// Disable Timer0 overflow interrupt
	TIMSK &= ~(1 << TOIE0);
    141a:	a9 e5       	ldi	r26, 0x59	; 89
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 e5       	ldi	r30, 0x59	; 89
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8e 7f       	andi	r24, 0xFE	; 254
    1426:	8c 93       	st	X, r24
}
    1428:	67 96       	adiw	r28, 0x17	; 23
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <Timer0_OVF_SetCallBack>:


void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <Timer0_OVF_SetCallBack+0x6>
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	9a 83       	std	Y+2, r25	; 0x02
    1446:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = Local_ptr_toFunc;
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	90 93 d5 02 	sts	0x02D5, r25
    1450:	80 93 d4 02 	sts	0x02D4, r24


}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <Timer0_OCM_SetCallBack>:
void Timer0_OCM_SetCallBack(void (*Local_ptr_toFunc))
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <Timer0_OCM_SetCallBack+0x6>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	9a 83       	std	Y+2, r25	; 0x02
    146a:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OCM_Fptr = Local_ptr_toFunc;
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	9a 81       	ldd	r25, Y+2	; 0x02
    1470:	90 93 d7 02 	sts	0x02D7, r25
    1474:	80 93 d6 02 	sts	0x02D6, r24
}
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <TIMER1_Init>:

// ===========================================================


ES_t TIMER1_Init(TIMER1_Config_t *TIME1_Cfg)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	2a 97       	sbiw	r28, 0x0a	; 10
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	9b 83       	std	Y+3, r25	; 0x03
    1498:	8a 83       	std	Y+2, r24	; 0x02
	ES_t RetValue = ES_NOT_OK;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
	if(TIME1_Cfg == NULLPTR){
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	9b 81       	ldd	r25, Y+3	; 0x03
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	19 f4       	brne	.+6      	; 0x14ac <TIMER1_Init+0x2a>
		RetValue = ES_NOT_OK;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	ea c0       	rjmp	.+468    	; 0x1680 <TIMER1_Init+0x1fe>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer1_Cfg = *TIME1_Cfg;
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	22 e1       	ldi	r18, 0x12	; 18
    14b2:	33 e0       	ldi	r19, 0x03	; 3
    14b4:	3f 83       	std	Y+7, r19	; 0x07
    14b6:	2e 83       	std	Y+6, r18	; 0x06
    14b8:	99 87       	std	Y+9, r25	; 0x09
    14ba:	88 87       	std	Y+8, r24	; 0x08
    14bc:	38 e0       	ldi	r19, 0x08	; 8
    14be:	3a 87       	std	Y+10, r19	; 0x0a
    14c0:	e8 85       	ldd	r30, Y+8	; 0x08
    14c2:	f9 85       	ldd	r31, Y+9	; 0x09
    14c4:	00 80       	ld	r0, Z
    14c6:	28 85       	ldd	r18, Y+8	; 0x08
    14c8:	39 85       	ldd	r19, Y+9	; 0x09
    14ca:	2f 5f       	subi	r18, 0xFF	; 255
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	39 87       	std	Y+9, r19	; 0x09
    14d0:	28 87       	std	Y+8, r18	; 0x08
    14d2:	ee 81       	ldd	r30, Y+6	; 0x06
    14d4:	ff 81       	ldd	r31, Y+7	; 0x07
    14d6:	00 82       	st	Z, r0
    14d8:	2e 81       	ldd	r18, Y+6	; 0x06
    14da:	3f 81       	ldd	r19, Y+7	; 0x07
    14dc:	2f 5f       	subi	r18, 0xFF	; 255
    14de:	3f 4f       	sbci	r19, 0xFF	; 255
    14e0:	3f 83       	std	Y+7, r19	; 0x07
    14e2:	2e 83       	std	Y+6, r18	; 0x06
    14e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    14e6:	31 50       	subi	r19, 0x01	; 1
    14e8:	3a 87       	std	Y+10, r19	; 0x0a
    14ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ec:	88 23       	and	r24, r24
    14ee:	41 f7       	brne	.-48     	; 0x14c0 <TIMER1_Init+0x3e>


		// Timer0 mode Configurations
		if((TIME1_Cfg->mode >= TIMER1_NORMAL_MODE) && (TIME1_Cfg->mode <= TIMER1_FAST_PWM_OCR1A_TOP))
    14f0:	ea 81       	ldd	r30, Y+2	; 0x02
    14f2:	fb 81       	ldd	r31, Y+3	; 0x03
    14f4:	80 81       	ld	r24, Z
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <TIMER1_Init+0x7a>
    14fa:	6f c0       	rjmp	.+222    	; 0x15da <TIMER1_Init+0x158>
		{
			RetValue = ES_OK;
    14fc:	19 82       	std	Y+1, r1	; 0x01
			switch(TIME1_Cfg->mode)
    14fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1500:	fb 81       	ldd	r31, Y+3	; 0x03
    1502:	80 81       	ld	r24, Z
    1504:	e8 2f       	mov	r30, r24
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	fd 83       	std	Y+5, r31	; 0x05
    150a:	ec 83       	std	Y+4, r30	; 0x04
    150c:	2c 81       	ldd	r18, Y+4	; 0x04
    150e:	3d 81       	ldd	r19, Y+5	; 0x05
    1510:	21 30       	cpi	r18, 0x01	; 1
    1512:	31 05       	cpc	r19, r1
    1514:	41 f1       	breq	.+80     	; 0x1566 <TIMER1_Init+0xe4>
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	82 30       	cpi	r24, 0x02	; 2
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <TIMER1_Init+0xa0>
    1520:	3f c0       	rjmp	.+126    	; 0x15a0 <TIMER1_Init+0x11e>
    1522:	ec 81       	ldd	r30, Y+4	; 0x04
    1524:	fd 81       	ldd	r31, Y+5	; 0x05
    1526:	30 97       	sbiw	r30, 0x00	; 0
    1528:	09 f0       	breq	.+2      	; 0x152c <TIMER1_Init+0xaa>
    152a:	59 c0       	rjmp	.+178    	; 0x15de <TIMER1_Init+0x15c>
			{
			case TIMER1_NORMAL_MODE:
				CLR_BIT(TCCR1A,WGM10);
    152c:	af e4       	ldi	r26, 0x4F	; 79
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	ef e4       	ldi	r30, 0x4F	; 79
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8e 7f       	andi	r24, 0xFE	; 254
    1538:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A,WGM11);
    153a:	af e4       	ldi	r26, 0x4F	; 79
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	ef e4       	ldi	r30, 0x4F	; 79
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8d 7f       	andi	r24, 0xFD	; 253
    1546:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM12);
    1548:	ae e4       	ldi	r26, 0x4E	; 78
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	ee e4       	ldi	r30, 0x4E	; 78
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	87 7f       	andi	r24, 0xF7	; 247
    1554:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM13);
    1556:	ae e4       	ldi	r26, 0x4E	; 78
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ee e4       	ldi	r30, 0x4E	; 78
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8f 7e       	andi	r24, 0xEF	; 239
    1562:	8c 93       	st	X, r24
    1564:	3c c0       	rjmp	.+120    	; 0x15de <TIMER1_Init+0x15c>
				break;
			case TIMER1_FAST_PWM_ICR1_TOP:
				CLR_BIT(TCCR1A,WGM10);
    1566:	af e4       	ldi	r26, 0x4F	; 79
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	ef e4       	ldi	r30, 0x4F	; 79
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	8e 7f       	andi	r24, 0xFE	; 254
    1572:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    1574:	af e4       	ldi	r26, 0x4F	; 79
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	ef e4       	ldi	r30, 0x4F	; 79
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	82 60       	ori	r24, 0x02	; 2
    1580:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    1582:	ae e4       	ldi	r26, 0x4E	; 78
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ee e4       	ldi	r30, 0x4E	; 78
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	88 60       	ori	r24, 0x08	; 8
    158e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    1590:	ae e4       	ldi	r26, 0x4E	; 78
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	ee e4       	ldi	r30, 0x4E	; 78
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	80 61       	ori	r24, 0x10	; 16
    159c:	8c 93       	st	X, r24
    159e:	1f c0       	rjmp	.+62     	; 0x15de <TIMER1_Init+0x15c>
				break;
			case TIMER1_FAST_PWM_OCR1A_TOP:
				SET_BIT(TCCR1A,WGM10);
    15a0:	af e4       	ldi	r26, 0x4F	; 79
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	ef e4       	ldi	r30, 0x4F	; 79
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	81 60       	ori	r24, 0x01	; 1
    15ac:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    15ae:	af e4       	ldi	r26, 0x4F	; 79
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ef e4       	ldi	r30, 0x4F	; 79
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	82 60       	ori	r24, 0x02	; 2
    15ba:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    15bc:	ae e4       	ldi	r26, 0x4E	; 78
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ee e4       	ldi	r30, 0x4E	; 78
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 60       	ori	r24, 0x08	; 8
    15c8:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    15ca:	ae e4       	ldi	r26, 0x4E	; 78
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ee e4       	ldi	r30, 0x4E	; 78
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 61       	ori	r24, 0x10	; 16
    15d6:	8c 93       	st	X, r24
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <TIMER1_Init+0x15c>
				break;
			}
		}else{
			RetValue = ES_NOT_OK;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME1_Cfg->prescalar >= TIMER1_STOP) && (TIME1_Cfg->prescalar <= EXTERNAL1_RISING))
    15de:	ea 81       	ldd	r30, Y+2	; 0x02
    15e0:	fb 81       	ldd	r31, Y+3	; 0x03
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	88 30       	cpi	r24, 0x08	; 8
    15e6:	58 f4       	brcc	.+22     	; 0x15fe <TIMER1_Init+0x17c>
		{
			TCCR1B |= TIME1_Cfg->prescalar;
    15e8:	ae e4       	ldi	r26, 0x4E	; 78
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	ee e4       	ldi	r30, 0x4E	; 78
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	90 81       	ld	r25, Z
    15f2:	ea 81       	ldd	r30, Y+2	; 0x02
    15f4:	fb 81       	ldd	r31, Y+3	; 0x03
    15f6:	81 81       	ldd	r24, Z+1	; 0x01
    15f8:	89 2b       	or	r24, r25
    15fa:	8c 93       	st	X, r24
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <TIMER1_Init+0x180>
		}else{
			RetValue = ES_NOT_OK;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1A_mode << COM1A0);
    1602:	af e4       	ldi	r26, 0x4F	; 79
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ef e4       	ldi	r30, 0x4F	; 79
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	28 2f       	mov	r18, r24
    160e:	ea 81       	ldd	r30, Y+2	; 0x02
    1610:	fb 81       	ldd	r31, Y+3	; 0x03
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	00 24       	eor	r0, r0
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	07 94       	ror	r0
    1620:	96 95       	lsr	r25
    1622:	87 95       	ror	r24
    1624:	07 94       	ror	r0
    1626:	98 2f       	mov	r25, r24
    1628:	80 2d       	mov	r24, r0
    162a:	82 2b       	or	r24, r18
    162c:	8c 93       	st	X, r24

		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1B_mode << COM1B0);
    162e:	af e4       	ldi	r26, 0x4F	; 79
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ef e4       	ldi	r30, 0x4F	; 79
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	28 2f       	mov	r18, r24
    163a:	ea 81       	ldd	r30, Y+2	; 0x02
    163c:	fb 81       	ldd	r31, Y+3	; 0x03
    163e:	83 81       	ldd	r24, Z+3	; 0x03
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	82 95       	swap	r24
    1646:	92 95       	swap	r25
    1648:	90 7f       	andi	r25, 0xF0	; 240
    164a:	98 27       	eor	r25, r24
    164c:	80 7f       	andi	r24, 0xF0	; 240
    164e:	98 27       	eor	r25, r24
    1650:	82 2b       	or	r24, r18
    1652:	8c 93       	st	X, r24


		// Timer_1 Interrupts
		TIMSK |= (TIME1_Cfg->OVF_Interrupt) | (TIME1_Cfg->ICU_Interrupt) | (TIME1_Cfg->OCA_Interrupt) | (TIME1_Cfg->OCB_Interrupt);
    1654:	a9 e5       	ldi	r26, 0x59	; 89
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e9 e5       	ldi	r30, 0x59	; 89
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	20 81       	ld	r18, Z
    165e:	ea 81       	ldd	r30, Y+2	; 0x02
    1660:	fb 81       	ldd	r31, Y+3	; 0x03
    1662:	94 81       	ldd	r25, Z+4	; 0x04
    1664:	ea 81       	ldd	r30, Y+2	; 0x02
    1666:	fb 81       	ldd	r31, Y+3	; 0x03
    1668:	85 81       	ldd	r24, Z+5	; 0x05
    166a:	98 2b       	or	r25, r24
    166c:	ea 81       	ldd	r30, Y+2	; 0x02
    166e:	fb 81       	ldd	r31, Y+3	; 0x03
    1670:	86 81       	ldd	r24, Z+6	; 0x06
    1672:	98 2b       	or	r25, r24
    1674:	ea 81       	ldd	r30, Y+2	; 0x02
    1676:	fb 81       	ldd	r31, Y+3	; 0x03
    1678:	87 81       	ldd	r24, Z+7	; 0x07
    167a:	89 2b       	or	r24, r25
    167c:	82 2b       	or	r24, r18
    167e:	8c 93       	st	X, r24



	}

	return RetValue;
    1680:	89 81       	ldd	r24, Y+1	; 0x01
}
    1682:	2a 96       	adiw	r28, 0x0a	; 10
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <TIMER1_Stop>:


ES_t TIMER1_Stop(void)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR1B,CS10);
    169c:	ae e4       	ldi	r26, 0x4E	; 78
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	ee e4       	ldi	r30, 0x4E	; 78
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8e 7f       	andi	r24, 0xFE	; 254
    16a8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    16aa:	ae e4       	ldi	r26, 0x4E	; 78
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	ee e4       	ldi	r30, 0x4E	; 78
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8d 7f       	andi	r24, 0xFD	; 253
    16b6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    16b8:	ae e4       	ldi	r26, 0x4E	; 78
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	ee e4       	ldi	r30, 0x4E	; 78
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8b 7f       	andi	r24, 0xFB	; 251
    16c4:	8c 93       	st	X, r24
	return ES_OK;
    16c6:	80 e0       	ldi	r24, 0x00	; 0
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    16ce:	1f 92       	push	r1
    16d0:	0f 92       	push	r0
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	0f 92       	push	r0
    16d6:	11 24       	eor	r1, r1
    16d8:	8f 93       	push	r24
    16da:	9f 93       	push	r25
    16dc:	af 93       	push	r26
    16de:	bf 93       	push	r27
    16e0:	ef 93       	push	r30
    16e2:	ff 93       	push	r31
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
	if(OVF_Number > 0){
    16ec:	80 91 d9 02 	lds	r24, 0x02D9
    16f0:	90 91 da 02 	lds	r25, 0x02DA
    16f4:	a0 91 db 02 	lds	r26, 0x02DB
    16f8:	b0 91 dc 02 	lds	r27, 0x02DC
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	a1 05       	cpc	r26, r1
    1700:	b1 05       	cpc	r27, r1
    1702:	a1 f0       	breq	.+40     	; 0x172c <__vector_11+0x5e>
//		Lcd_ES_tdisplayNum(OVF_Number);
//		Lcd_ES_tsendString("  ");
		OVF_Number--;
    1704:	80 91 d9 02 	lds	r24, 0x02D9
    1708:	90 91 da 02 	lds	r25, 0x02DA
    170c:	a0 91 db 02 	lds	r26, 0x02DB
    1710:	b0 91 dc 02 	lds	r27, 0x02DC
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	a1 09       	sbc	r26, r1
    1718:	b1 09       	sbc	r27, r1
    171a:	80 93 d9 02 	sts	0x02D9, r24
    171e:	90 93 da 02 	sts	0x02DA, r25
    1722:	a0 93 db 02 	sts	0x02DB, r26
    1726:	b0 93 dc 02 	sts	0x02DC, r27
    172a:	07 c0       	rjmp	.+14     	; 0x173a <__vector_11+0x6c>
	}else {
		// If all overflows are done, disable the interrupt
		TIMSK &= ~(1 << TOIE0);
    172c:	a9 e5       	ldi	r26, 0x59	; 89
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e9 e5       	ldi	r30, 0x59	; 89
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8e 7f       	andi	r24, 0xFE	; 254
    1738:	8c 93       	st	X, r24
	}

}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	ff 91       	pop	r31
    1740:	ef 91       	pop	r30
    1742:	bf 91       	pop	r27
    1744:	af 91       	pop	r26
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	0f 90       	pop	r0
    1750:	1f 90       	pop	r1
    1752:	18 95       	reti

00001754 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    1754:	1f 92       	push	r1
    1756:	0f 92       	push	r0
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	0f 92       	push	r0
    175c:	11 24       	eor	r1, r1
    175e:	2f 93       	push	r18
    1760:	3f 93       	push	r19
    1762:	4f 93       	push	r20
    1764:	5f 93       	push	r21
    1766:	6f 93       	push	r22
    1768:	7f 93       	push	r23
    176a:	8f 93       	push	r24
    176c:	9f 93       	push	r25
    176e:	af 93       	push	r26
    1770:	bf 93       	push	r27
    1772:	ef 93       	push	r30
    1774:	ff 93       	push	r31
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OCM_Fptr != NULLPTR)
    177e:	80 91 d6 02 	lds	r24, 0x02D6
    1782:	90 91 d7 02 	lds	r25, 0x02D7
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	29 f0       	breq	.+10     	; 0x1794 <__vector_10+0x40>
	{
		Timer0_OCM_Fptr();
    178a:	e0 91 d6 02 	lds	r30, 0x02D6
    178e:	f0 91 d7 02 	lds	r31, 0x02D7
    1792:	09 95       	icall
	}
}
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <SPI_Init>:
#include "SPI.h"



void SPI_Init(SPI_Config_t * SPI_Cfg)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <SPI_Init+0x6>
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	9a 83       	std	Y+2, r25	; 0x02
    17c6:	89 83       	std	Y+1, r24	; 0x01
	if(SPI_Cfg->Device_Mode == SPI_DEVICE_MODE_MASTER)
    17c8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ca:	fa 81       	ldd	r31, Y+2	; 0x02
    17cc:	80 81       	ld	r24, Z
    17ce:	80 31       	cpi	r24, 0x10	; 16
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <SPI_Init+0x1a>
    17d2:	d8 c0       	rjmp	.+432    	; 0x1984 <SPI_Init+0x1ca>
	{
		// SCK, MOSI, SS Output
		DIO_ES_tSetPinDirection(SPI_REG, SCK, OUTPUT);
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	67 e0       	ldi	r22, 0x07	; 7
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, MOSI, OUTPUT);
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	65 e0       	ldi	r22, 0x05	; 5
    17e2:	41 e0       	ldi	r20, 0x01	; 1
    17e4:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, SS, OUTPUT);
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	64 e0       	ldi	r22, 0x04	; 4
    17ec:	41 e0       	ldi	r20, 0x01	; 1
    17ee:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>

		// Set MISO pin as INPUT
		DIO_ES_tSetPinDirection(SPI_REG, MISO, INPUT);
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	66 e0       	ldi	r22, 0x06	; 6
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>


		SPCR |= SPI_DEVICE_MODE_MASTER;
    17fc:	ad e2       	ldi	r26, 0x2D	; 45
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	ed e2       	ldi	r30, 0x2D	; 45
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	80 61       	ori	r24, 0x10	; 16
    1808:	8c 93       	st	X, r24

		// The master is the one who generates the clock
		if(SPI_Cfg->Prescalar == SPI_Prescalar_4){
    180a:	e9 81       	ldd	r30, Y+1	; 0x01
    180c:	fa 81       	ldd	r31, Y+2	; 0x02
    180e:	84 81       	ldd	r24, Z+4	; 0x04
    1810:	88 23       	and	r24, r24
    1812:	b1 f4       	brne	.+44     	; 0x1840 <SPI_Init+0x86>
			CLR_BIT(SPCR,SPR0);
    1814:	ad e2       	ldi	r26, 0x2D	; 45
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	ed e2       	ldi	r30, 0x2D	; 45
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8e 7f       	andi	r24, 0xFE	; 254
    1820:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    1822:	ad e2       	ldi	r26, 0x2D	; 45
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	ed e2       	ldi	r30, 0x2D	; 45
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8d 7f       	andi	r24, 0xFD	; 253
    182e:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    1830:	ae e2       	ldi	r26, 0x2E	; 46
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	ee e2       	ldi	r30, 0x2E	; 46
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	8e 7f       	andi	r24, 0xFE	; 254
    183c:	8c 93       	st	X, r24
    183e:	bd c0       	rjmp	.+378    	; 0x19ba <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_16){
    1840:	e9 81       	ldd	r30, Y+1	; 0x01
    1842:	fa 81       	ldd	r31, Y+2	; 0x02
    1844:	84 81       	ldd	r24, Z+4	; 0x04
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	b1 f4       	brne	.+44     	; 0x1876 <SPI_Init+0xbc>
			SET_BIT(SPCR,SPR0);
    184a:	ad e2       	ldi	r26, 0x2D	; 45
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	ed e2       	ldi	r30, 0x2D	; 45
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	81 60       	ori	r24, 0x01	; 1
    1856:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    1858:	ad e2       	ldi	r26, 0x2D	; 45
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	ed e2       	ldi	r30, 0x2D	; 45
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	8d 7f       	andi	r24, 0xFD	; 253
    1864:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    1866:	ae e2       	ldi	r26, 0x2E	; 46
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	ee e2       	ldi	r30, 0x2E	; 46
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	8e 7f       	andi	r24, 0xFE	; 254
    1872:	8c 93       	st	X, r24
    1874:	a2 c0       	rjmp	.+324    	; 0x19ba <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_64){
    1876:	e9 81       	ldd	r30, Y+1	; 0x01
    1878:	fa 81       	ldd	r31, Y+2	; 0x02
    187a:	84 81       	ldd	r24, Z+4	; 0x04
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	b1 f4       	brne	.+44     	; 0x18ac <SPI_Init+0xf2>
			CLR_BIT(SPCR,SPR0);
    1880:	ad e2       	ldi	r26, 0x2D	; 45
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	ed e2       	ldi	r30, 0x2D	; 45
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	8e 7f       	andi	r24, 0xFE	; 254
    188c:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    188e:	ad e2       	ldi	r26, 0x2D	; 45
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	ed e2       	ldi	r30, 0x2D	; 45
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	82 60       	ori	r24, 0x02	; 2
    189a:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    189c:	ae e2       	ldi	r26, 0x2E	; 46
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	ee e2       	ldi	r30, 0x2E	; 46
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	8e 7f       	andi	r24, 0xFE	; 254
    18a8:	8c 93       	st	X, r24
    18aa:	87 c0       	rjmp	.+270    	; 0x19ba <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_128){
    18ac:	e9 81       	ldd	r30, Y+1	; 0x01
    18ae:	fa 81       	ldd	r31, Y+2	; 0x02
    18b0:	84 81       	ldd	r24, Z+4	; 0x04
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	b1 f4       	brne	.+44     	; 0x18e2 <SPI_Init+0x128>
			SET_BIT(SPCR,SPR0);
    18b6:	ad e2       	ldi	r26, 0x2D	; 45
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	ed e2       	ldi	r30, 0x2D	; 45
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	81 60       	ori	r24, 0x01	; 1
    18c2:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    18c4:	ad e2       	ldi	r26, 0x2D	; 45
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ed e2       	ldi	r30, 0x2D	; 45
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	82 60       	ori	r24, 0x02	; 2
    18d0:	8c 93       	st	X, r24
			CLR_BIT(SPSR,SPI2X);
    18d2:	ae e2       	ldi	r26, 0x2E	; 46
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ee e2       	ldi	r30, 0x2E	; 46
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	8e 7f       	andi	r24, 0xFE	; 254
    18de:	8c 93       	st	X, r24
    18e0:	6c c0       	rjmp	.+216    	; 0x19ba <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_2){
    18e2:	e9 81       	ldd	r30, Y+1	; 0x01
    18e4:	fa 81       	ldd	r31, Y+2	; 0x02
    18e6:	84 81       	ldd	r24, Z+4	; 0x04
    18e8:	84 30       	cpi	r24, 0x04	; 4
    18ea:	b1 f4       	brne	.+44     	; 0x1918 <SPI_Init+0x15e>
			CLR_BIT(SPCR,SPR0);
    18ec:	ad e2       	ldi	r26, 0x2D	; 45
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	ed e2       	ldi	r30, 0x2D	; 45
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	8e 7f       	andi	r24, 0xFE	; 254
    18f8:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    18fa:	ad e2       	ldi	r26, 0x2D	; 45
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	ed e2       	ldi	r30, 0x2D	; 45
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8d 7f       	andi	r24, 0xFD	; 253
    1906:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    1908:	ae e2       	ldi	r26, 0x2E	; 46
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	ee e2       	ldi	r30, 0x2E	; 46
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	81 60       	ori	r24, 0x01	; 1
    1914:	8c 93       	st	X, r24
    1916:	51 c0       	rjmp	.+162    	; 0x19ba <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_8){
    1918:	e9 81       	ldd	r30, Y+1	; 0x01
    191a:	fa 81       	ldd	r31, Y+2	; 0x02
    191c:	84 81       	ldd	r24, Z+4	; 0x04
    191e:	85 30       	cpi	r24, 0x05	; 5
    1920:	b1 f4       	brne	.+44     	; 0x194e <SPI_Init+0x194>
			SET_BIT(SPCR,SPR0);
    1922:	ad e2       	ldi	r26, 0x2D	; 45
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	ed e2       	ldi	r30, 0x2D	; 45
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	81 60       	ori	r24, 0x01	; 1
    192e:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPR1);
    1930:	ad e2       	ldi	r26, 0x2D	; 45
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ed e2       	ldi	r30, 0x2D	; 45
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	8d 7f       	andi	r24, 0xFD	; 253
    193c:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    193e:	ae e2       	ldi	r26, 0x2E	; 46
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ee e2       	ldi	r30, 0x2E	; 46
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	81 60       	ori	r24, 0x01	; 1
    194a:	8c 93       	st	X, r24
    194c:	36 c0       	rjmp	.+108    	; 0x19ba <SPI_Init+0x200>
		}else if(SPI_Cfg->Prescalar == SPI_Prescalar_32){
    194e:	e9 81       	ldd	r30, Y+1	; 0x01
    1950:	fa 81       	ldd	r31, Y+2	; 0x02
    1952:	84 81       	ldd	r24, Z+4	; 0x04
    1954:	86 30       	cpi	r24, 0x06	; 6
    1956:	89 f5       	brne	.+98     	; 0x19ba <SPI_Init+0x200>
			CLR_BIT(SPCR,SPR0);
    1958:	ad e2       	ldi	r26, 0x2D	; 45
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	ed e2       	ldi	r30, 0x2D	; 45
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8e 7f       	andi	r24, 0xFE	; 254
    1964:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    1966:	ad e2       	ldi	r26, 0x2D	; 45
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	ed e2       	ldi	r30, 0x2D	; 45
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	82 60       	ori	r24, 0x02	; 2
    1972:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPI2X);
    1974:	ae e2       	ldi	r26, 0x2E	; 46
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	ee e2       	ldi	r30, 0x2E	; 46
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	81 60       	ori	r24, 0x01	; 1
    1980:	8c 93       	st	X, r24
    1982:	1b c0       	rjmp	.+54     	; 0x19ba <SPI_Init+0x200>
		}

	}else
	{   // Slave

		DIO_ES_tSetPinDirection(SPI_REG, MISO, OUTPUT);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	66 e0       	ldi	r22, 0x06	; 6
    1988:	41 e0       	ldi	r20, 0x01	; 1
    198a:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
		// Set SCK, MOSI, and SS pins as INPUT (slave mode doesn't need them as output)
		DIO_ES_tSetPinDirection(SPI_REG, SCK, INPUT);
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	67 e0       	ldi	r22, 0x07	; 7
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, MOSI, INPUT);
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	65 e0       	ldi	r22, 0x05	; 5
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(SPI_REG, SS, INPUT);
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	64 e0       	ldi	r22, 0x04	; 4
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>


		SPCR &= SPI_DEVICE_MODE_SLAVE;
    19ac:	ad e2       	ldi	r26, 0x2D	; 45
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ed e2       	ldi	r30, 0x2D	; 45
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	8f 7e       	andi	r24, 0xEF	; 239
    19b8:	8c 93       	st	X, r24
	}



	// Common Configurations
	SPCR |= SPI_Cfg->CLK_Polarity;
    19ba:	ad e2       	ldi	r26, 0x2D	; 45
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	ed e2       	ldi	r30, 0x2D	; 45
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	90 81       	ld	r25, Z
    19c4:	e9 81       	ldd	r30, Y+1	; 0x01
    19c6:	fa 81       	ldd	r31, Y+2	; 0x02
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	89 2b       	or	r24, r25
    19cc:	8c 93       	st	X, r24

	SPCR |= SPI_Cfg->CLK_PHASE;
    19ce:	ad e2       	ldi	r26, 0x2D	; 45
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ed e2       	ldi	r30, 0x2D	; 45
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	90 81       	ld	r25, Z
    19d8:	e9 81       	ldd	r30, Y+1	; 0x01
    19da:	fa 81       	ldd	r31, Y+2	; 0x02
    19dc:	83 81       	ldd	r24, Z+3	; 0x03
    19de:	89 2b       	or	r24, r25
    19e0:	8c 93       	st	X, r24

	SPCR |= SPI_Cfg->Data_Order;
    19e2:	ad e2       	ldi	r26, 0x2D	; 45
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ed e2       	ldi	r30, 0x2D	; 45
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	90 81       	ld	r25, Z
    19ec:	e9 81       	ldd	r30, Y+1	; 0x01
    19ee:	fa 81       	ldd	r31, Y+2	; 0x02
    19f0:	81 81       	ldd	r24, Z+1	; 0x01
    19f2:	89 2b       	or	r24, r25
    19f4:	8c 93       	st	X, r24


	// Enable SPI
	SET_BIT(SPCR,SPE);
    19f6:	ad e2       	ldi	r26, 0x2D	; 45
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	ed e2       	ldi	r30, 0x2D	; 45
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	80 64       	ori	r24, 0x40	; 64
    1a02:	8c 93       	st	X, r24
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <SPI_Transmit_Receive>:




u8 SPI_Transmit_Receive(u8 data)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	0f 92       	push	r0
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    1a1a:	ef e2       	ldi	r30, 0x2F	; 47
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,SPIF));
    1a22:	ee e2       	ldi	r30, 0x2E	; 46
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	88 23       	and	r24, r24
    1a2a:	dc f7       	brge	.-10     	; 0x1a22 <SPI_Transmit_Receive+0x14>
	// Return data received from slave
	return SPDR;
    1a2c:	ef e2       	ldi	r30, 0x2F	; 47
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z

}
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <EXI_Set_CallBack>:
/* void (*LocalPtr)(void) is a local pointer to function */
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <EXI_Set_CallBack+0x6>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <EXI_Set_CallBack+0x8>
    1a42:	0f 92       	push	r0
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	7b 83       	std	Y+3, r23	; 0x03
    1a4c:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3d 83       	std	Y+5, r19	; 0x05
    1a56:	2c 83       	std	Y+4, r18	; 0x04
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	91 05       	cpc	r25, r1
    1a60:	81 f0       	breq	.+32     	; 0x1a82 <EXI_Set_CallBack+0x48>
    1a62:	2c 81       	ldd	r18, Y+4	; 0x04
    1a64:	3d 81       	ldd	r19, Y+5	; 0x05
    1a66:	22 30       	cpi	r18, 0x02	; 2
    1a68:	31 05       	cpc	r19, r1
    1a6a:	91 f0       	breq	.+36     	; 0x1a90 <EXI_Set_CallBack+0x56>
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	a1 f4       	brne	.+40     	; 0x1a9c <EXI_Set_CallBack+0x62>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	9b 81       	ldd	r25, Y+3	; 0x03
    1a78:	90 93 df 02 	sts	0x02DF, r25
    1a7c:	80 93 de 02 	sts	0x02DE, r24
    1a80:	0d c0       	rjmp	.+26     	; 0x1a9c <EXI_Set_CallBack+0x62>
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	9b 81       	ldd	r25, Y+3	; 0x03
    1a86:	90 93 e1 02 	sts	0x02E1, r25
    1a8a:	80 93 e0 02 	sts	0x02E0, r24
    1a8e:	06 c0       	rjmp	.+12     	; 0x1a9c <EXI_Set_CallBack+0x62>
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	9b 81       	ldd	r25, Y+3	; 0x03
    1a94:	90 93 e3 02 	sts	0x02E3, r25
    1a98:	80 93 e2 02 	sts	0x02E2, r24
		break;
	}
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <EXI_ENABLE>:
/************************************************************************/
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <EXI_ENABLE+0x6>
    1ab2:	0f 92       	push	r0
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	3b 83       	std	Y+3, r19	; 0x03
    1ac2:	2a 83       	std	Y+2, r18	; 0x02
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	91 05       	cpc	r25, r1
    1acc:	89 f0       	breq	.+34     	; 0x1af0 <EXI_ENABLE+0x44>
    1ace:	2a 81       	ldd	r18, Y+2	; 0x02
    1ad0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ad2:	22 30       	cpi	r18, 0x02	; 2
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	a1 f0       	breq	.+40     	; 0x1b00 <EXI_ENABLE+0x54>
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	9b 81       	ldd	r25, Y+3	; 0x03
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	b9 f4       	brne	.+46     	; 0x1b0e <EXI_ENABLE+0x62>
	case EX_INT0:
		SET_BIT(GICR,INT0);
    1ae0:	ab e5       	ldi	r26, 0x5B	; 91
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	eb e5       	ldi	r30, 0x5B	; 91
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 64       	ori	r24, 0x40	; 64
    1aec:	8c 93       	st	X, r24
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <EXI_ENABLE+0x62>
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
    1af0:	ab e5       	ldi	r26, 0x5B	; 91
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	eb e5       	ldi	r30, 0x5B	; 91
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	80 68       	ori	r24, 0x80	; 128
    1afc:	8c 93       	st	X, r24
    1afe:	07 c0       	rjmp	.+14     	; 0x1b0e <EXI_ENABLE+0x62>
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
    1b00:	ab e5       	ldi	r26, 0x5B	; 91
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	eb e5       	ldi	r30, 0x5B	; 91
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 62       	ori	r24, 0x20	; 32
    1b0c:	8c 93       	st	X, r24
		break;
	}
}
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <EXI_DISABLE>:


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <EXI_DISABLE+0x6>
    1b20:	0f 92       	push	r0
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	3b 83       	std	Y+3, r19	; 0x03
    1b30:	2a 83       	std	Y+2, r18	; 0x02
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	9b 81       	ldd	r25, Y+3	; 0x03
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	91 05       	cpc	r25, r1
    1b3a:	89 f0       	breq	.+34     	; 0x1b5e <EXI_DISABLE+0x44>
    1b3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1b40:	22 30       	cpi	r18, 0x02	; 2
    1b42:	31 05       	cpc	r19, r1
    1b44:	a1 f0       	breq	.+40     	; 0x1b6e <EXI_DISABLE+0x54>
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	b9 f4       	brne	.+46     	; 0x1b7c <EXI_DISABLE+0x62>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
    1b4e:	ab e5       	ldi	r26, 0x5B	; 91
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	eb e5       	ldi	r30, 0x5B	; 91
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	8f 7b       	andi	r24, 0xBF	; 191
    1b5a:	8c 93       	st	X, r24
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <EXI_DISABLE+0x62>
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
    1b5e:	ab e5       	ldi	r26, 0x5B	; 91
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	eb e5       	ldi	r30, 0x5B	; 91
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	8f 77       	andi	r24, 0x7F	; 127
    1b6a:	8c 93       	st	X, r24
    1b6c:	07 c0       	rjmp	.+14     	; 0x1b7c <EXI_DISABLE+0x62>
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
    1b6e:	ab e5       	ldi	r26, 0x5B	; 91
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	eb e5       	ldi	r30, 0x5B	; 91
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	8f 7d       	andi	r24, 0xDF	; 223
    1b7a:	8c 93       	st	X, r24
		break;
	}
}
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <EXI_TriggerEdge>:

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	2a 97       	sbiw	r28, 0x0a	; 10
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt){
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	3a 87       	std	Y+10, r19	; 0x0a
    1ba8:	29 87       	std	Y+9, r18	; 0x09
    1baa:	89 85       	ldd	r24, Y+9	; 0x09
    1bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <EXI_TriggerEdge+0x2e>
    1bb4:	66 c0       	rjmp	.+204    	; 0x1c82 <EXI_TriggerEdge+0xfa>
    1bb6:	29 85       	ldd	r18, Y+9	; 0x09
    1bb8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <EXI_TriggerEdge+0x3a>
    1bc0:	bb c0       	rjmp	.+374    	; 0x1d38 <EXI_TriggerEdge+0x1b0>
    1bc2:	89 85       	ldd	r24, Y+9	; 0x09
    1bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <EXI_TriggerEdge+0x44>
    1bca:	dd c0       	rjmp	.+442    	; 0x1d86 <EXI_TriggerEdge+0x1fe>
	case EX_INT0:
		switch(edge){
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	38 87       	std	Y+8, r19	; 0x08
    1bd4:	2f 83       	std	Y+7, r18	; 0x07
    1bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd8:	98 85       	ldd	r25, Y+8	; 0x08
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	91 05       	cpc	r25, r1
    1bde:	21 f1       	breq	.+72     	; 0x1c28 <EXI_TriggerEdge+0xa0>
    1be0:	2f 81       	ldd	r18, Y+7	; 0x07
    1be2:	38 85       	ldd	r19, Y+8	; 0x08
    1be4:	22 30       	cpi	r18, 0x02	; 2
    1be6:	31 05       	cpc	r19, r1
    1be8:	2c f4       	brge	.+10     	; 0x1bf4 <EXI_TriggerEdge+0x6c>
    1bea:	8f 81       	ldd	r24, Y+7	; 0x07
    1bec:	98 85       	ldd	r25, Y+8	; 0x08
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	61 f0       	breq	.+24     	; 0x1c0a <EXI_TriggerEdge+0x82>
    1bf2:	c9 c0       	rjmp	.+402    	; 0x1d86 <EXI_TriggerEdge+0x1fe>
    1bf4:	2f 81       	ldd	r18, Y+7	; 0x07
    1bf6:	38 85       	ldd	r19, Y+8	; 0x08
    1bf8:	22 30       	cpi	r18, 0x02	; 2
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	21 f1       	breq	.+72     	; 0x1c46 <EXI_TriggerEdge+0xbe>
    1bfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1c00:	98 85       	ldd	r25, Y+8	; 0x08
    1c02:	83 30       	cpi	r24, 0x03	; 3
    1c04:	91 05       	cpc	r25, r1
    1c06:	71 f1       	breq	.+92     	; 0x1c64 <EXI_TriggerEdge+0xdc>
    1c08:	be c0       	rjmp	.+380    	; 0x1d86 <EXI_TriggerEdge+0x1fe>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    1c0a:	a5 e5       	ldi	r26, 0x55	; 85
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e5 e5       	ldi	r30, 0x55	; 85
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	8e 7f       	andi	r24, 0xFE	; 254
    1c16:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    1c18:	a5 e5       	ldi	r26, 0x55	; 85
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e5 e5       	ldi	r30, 0x55	; 85
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	8d 7f       	andi	r24, 0xFD	; 253
    1c24:	8c 93       	st	X, r24
    1c26:	af c0       	rjmp	.+350    	; 0x1d86 <EXI_TriggerEdge+0x1fe>
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    1c28:	a5 e5       	ldi	r26, 0x55	; 85
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e5 e5       	ldi	r30, 0x55	; 85
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	81 60       	ori	r24, 0x01	; 1
    1c34:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    1c36:	a5 e5       	ldi	r26, 0x55	; 85
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e5 e5       	ldi	r30, 0x55	; 85
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8d 7f       	andi	r24, 0xFD	; 253
    1c42:	8c 93       	st	X, r24
    1c44:	a0 c0       	rjmp	.+320    	; 0x1d86 <EXI_TriggerEdge+0x1fe>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    1c46:	a5 e5       	ldi	r26, 0x55	; 85
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e5 e5       	ldi	r30, 0x55	; 85
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	8e 7f       	andi	r24, 0xFE	; 254
    1c52:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1c54:	a5 e5       	ldi	r26, 0x55	; 85
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e5 e5       	ldi	r30, 0x55	; 85
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	82 60       	ori	r24, 0x02	; 2
    1c60:	8c 93       	st	X, r24
    1c62:	91 c0       	rjmp	.+290    	; 0x1d86 <EXI_TriggerEdge+0x1fe>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    1c64:	a5 e5       	ldi	r26, 0x55	; 85
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e5 e5       	ldi	r30, 0x55	; 85
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	81 60       	ori	r24, 0x01	; 1
    1c70:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1c72:	a5 e5       	ldi	r26, 0x55	; 85
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e5 e5       	ldi	r30, 0x55	; 85
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	82 60       	ori	r24, 0x02	; 2
    1c7e:	8c 93       	st	X, r24
    1c80:	82 c0       	rjmp	.+260    	; 0x1d86 <EXI_TriggerEdge+0x1fe>
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	3e 83       	std	Y+6, r19	; 0x06
    1c8a:	2d 83       	std	Y+5, r18	; 0x05
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	91 05       	cpc	r25, r1
    1c94:	21 f1       	breq	.+72     	; 0x1cde <EXI_TriggerEdge+0x156>
    1c96:	2d 81       	ldd	r18, Y+5	; 0x05
    1c98:	3e 81       	ldd	r19, Y+6	; 0x06
    1c9a:	22 30       	cpi	r18, 0x02	; 2
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	2c f4       	brge	.+10     	; 0x1caa <EXI_TriggerEdge+0x122>
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	61 f0       	breq	.+24     	; 0x1cc0 <EXI_TriggerEdge+0x138>
    1ca8:	6e c0       	rjmp	.+220    	; 0x1d86 <EXI_TriggerEdge+0x1fe>
    1caa:	2d 81       	ldd	r18, Y+5	; 0x05
    1cac:	3e 81       	ldd	r19, Y+6	; 0x06
    1cae:	22 30       	cpi	r18, 0x02	; 2
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	21 f1       	breq	.+72     	; 0x1cfc <EXI_TriggerEdge+0x174>
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	83 30       	cpi	r24, 0x03	; 3
    1cba:	91 05       	cpc	r25, r1
    1cbc:	71 f1       	breq	.+92     	; 0x1d1a <EXI_TriggerEdge+0x192>
    1cbe:	63 c0       	rjmp	.+198    	; 0x1d86 <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
    1cc0:	a5 e5       	ldi	r26, 0x55	; 85
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e5 e5       	ldi	r30, 0x55	; 85
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	8b 7f       	andi	r24, 0xFB	; 251
    1ccc:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1cce:	a5 e5       	ldi	r26, 0x55	; 85
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e5 e5       	ldi	r30, 0x55	; 85
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	87 7f       	andi	r24, 0xF7	; 247
    1cda:	8c 93       	st	X, r24
    1cdc:	54 c0       	rjmp	.+168    	; 0x1d86 <EXI_TriggerEdge+0x1fe>
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
    1cde:	a5 e5       	ldi	r26, 0x55	; 85
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e5 e5       	ldi	r30, 0x55	; 85
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	84 60       	ori	r24, 0x04	; 4
    1cea:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC11);
    1cec:	a5 e5       	ldi	r26, 0x55	; 85
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e5 e5       	ldi	r30, 0x55	; 85
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	87 7f       	andi	r24, 0xF7	; 247
    1cf8:	8c 93       	st	X, r24
    1cfa:	45 c0       	rjmp	.+138    	; 0x1d86 <EXI_TriggerEdge+0x1fe>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
    1cfc:	a5 e5       	ldi	r26, 0x55	; 85
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e5 e5       	ldi	r30, 0x55	; 85
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	8b 7f       	andi	r24, 0xFB	; 251
    1d08:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1d0a:	a5 e5       	ldi	r26, 0x55	; 85
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	e5 e5       	ldi	r30, 0x55	; 85
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	88 60       	ori	r24, 0x08	; 8
    1d16:	8c 93       	st	X, r24
    1d18:	36 c0       	rjmp	.+108    	; 0x1d86 <EXI_TriggerEdge+0x1fe>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    1d1a:	a5 e5       	ldi	r26, 0x55	; 85
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e5 e5       	ldi	r30, 0x55	; 85
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	84 60       	ori	r24, 0x04	; 4
    1d26:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1d28:	a5 e5       	ldi	r26, 0x55	; 85
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e5 e5       	ldi	r30, 0x55	; 85
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	88 60       	ori	r24, 0x08	; 8
    1d34:	8c 93       	st	X, r24
    1d36:	27 c0       	rjmp	.+78     	; 0x1d86 <EXI_TriggerEdge+0x1fe>
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	3c 83       	std	Y+4, r19	; 0x04
    1d40:	2b 83       	std	Y+3, r18	; 0x03
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	91 05       	cpc	r25, r1
    1d4a:	31 f0       	breq	.+12     	; 0x1d58 <EXI_TriggerEdge+0x1d0>
    1d4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d50:	23 30       	cpi	r18, 0x03	; 3
    1d52:	31 05       	cpc	r19, r1
    1d54:	49 f0       	breq	.+18     	; 0x1d68 <EXI_TriggerEdge+0x1e0>
    1d56:	10 c0       	rjmp	.+32     	; 0x1d78 <EXI_TriggerEdge+0x1f0>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
    1d58:	a4 e5       	ldi	r26, 0x54	; 84
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e4 e5       	ldi	r30, 0x54	; 84
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 7b       	andi	r24, 0xBF	; 191
    1d64:	8c 93       	st	X, r24
    1d66:	0f c0       	rjmp	.+30     	; 0x1d86 <EXI_TriggerEdge+0x1fe>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    1d68:	a4 e5       	ldi	r26, 0x54	; 84
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e4 e5       	ldi	r30, 0x54	; 84
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	80 64       	ori	r24, 0x40	; 64
    1d74:	8c 93       	st	X, r24
    1d76:	07 c0       	rjmp	.+14     	; 0x1d86 <EXI_TriggerEdge+0x1fe>
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
    1d78:	a4 e5       	ldi	r26, 0x54	; 84
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e4 e5       	ldi	r30, 0x54	; 84
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	8f 7b       	andi	r24, 0xBF	; 191
    1d84:	8c 93       	st	X, r24
				}
				break;
	}
}
    1d86:	2a 96       	adiw	r28, 0x0a	; 10
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
    1d98:	1f 92       	push	r1
    1d9a:	0f 92       	push	r0
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	0f 92       	push	r0
    1da0:	11 24       	eor	r1, r1
    1da2:	2f 93       	push	r18
    1da4:	3f 93       	push	r19
    1da6:	4f 93       	push	r20
    1da8:	5f 93       	push	r21
    1daa:	6f 93       	push	r22
    1dac:	7f 93       	push	r23
    1dae:	8f 93       	push	r24
    1db0:	9f 93       	push	r25
    1db2:	af 93       	push	r26
    1db4:	bf 93       	push	r27
    1db6:	ef 93       	push	r30
    1db8:	ff 93       	push	r31
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULLPTR){
    1dc2:	80 91 de 02 	lds	r24, 0x02DE
    1dc6:	90 91 df 02 	lds	r25, 0x02DF
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	29 f0       	breq	.+10     	; 0x1dd8 <__vector_1+0x40>
		INT0_Fptr();
    1dce:	e0 91 de 02 	lds	r30, 0x02DE
    1dd2:	f0 91 df 02 	lds	r31, 0x02DF
    1dd6:	09 95       	icall
	}
}
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	ff 91       	pop	r31
    1dde:	ef 91       	pop	r30
    1de0:	bf 91       	pop	r27
    1de2:	af 91       	pop	r26
    1de4:	9f 91       	pop	r25
    1de6:	8f 91       	pop	r24
    1de8:	7f 91       	pop	r23
    1dea:	6f 91       	pop	r22
    1dec:	5f 91       	pop	r21
    1dee:	4f 91       	pop	r20
    1df0:	3f 91       	pop	r19
    1df2:	2f 91       	pop	r18
    1df4:	0f 90       	pop	r0
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	0f 90       	pop	r0
    1dfa:	1f 90       	pop	r1
    1dfc:	18 95       	reti

00001dfe <__vector_2>:

ISR(INT1_vect){
    1dfe:	1f 92       	push	r1
    1e00:	0f 92       	push	r0
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	0f 92       	push	r0
    1e06:	11 24       	eor	r1, r1
    1e08:	2f 93       	push	r18
    1e0a:	3f 93       	push	r19
    1e0c:	4f 93       	push	r20
    1e0e:	5f 93       	push	r21
    1e10:	6f 93       	push	r22
    1e12:	7f 93       	push	r23
    1e14:	8f 93       	push	r24
    1e16:	9f 93       	push	r25
    1e18:	af 93       	push	r26
    1e1a:	bf 93       	push	r27
    1e1c:	ef 93       	push	r30
    1e1e:	ff 93       	push	r31
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULLPTR){
    1e28:	80 91 e0 02 	lds	r24, 0x02E0
    1e2c:	90 91 e1 02 	lds	r25, 0x02E1
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	29 f0       	breq	.+10     	; 0x1e3e <__vector_2+0x40>
		INT1_Fptr();
    1e34:	e0 91 e0 02 	lds	r30, 0x02E0
    1e38:	f0 91 e1 02 	lds	r31, 0x02E1
    1e3c:	09 95       	icall
	}
}
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	ff 91       	pop	r31
    1e44:	ef 91       	pop	r30
    1e46:	bf 91       	pop	r27
    1e48:	af 91       	pop	r26
    1e4a:	9f 91       	pop	r25
    1e4c:	8f 91       	pop	r24
    1e4e:	7f 91       	pop	r23
    1e50:	6f 91       	pop	r22
    1e52:	5f 91       	pop	r21
    1e54:	4f 91       	pop	r20
    1e56:	3f 91       	pop	r19
    1e58:	2f 91       	pop	r18
    1e5a:	0f 90       	pop	r0
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	0f 90       	pop	r0
    1e60:	1f 90       	pop	r1
    1e62:	18 95       	reti

00001e64 <__vector_3>:

ISR(INT2_vect){
    1e64:	1f 92       	push	r1
    1e66:	0f 92       	push	r0
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	0f 92       	push	r0
    1e6c:	11 24       	eor	r1, r1
    1e6e:	2f 93       	push	r18
    1e70:	3f 93       	push	r19
    1e72:	4f 93       	push	r20
    1e74:	5f 93       	push	r21
    1e76:	6f 93       	push	r22
    1e78:	7f 93       	push	r23
    1e7a:	8f 93       	push	r24
    1e7c:	9f 93       	push	r25
    1e7e:	af 93       	push	r26
    1e80:	bf 93       	push	r27
    1e82:	ef 93       	push	r30
    1e84:	ff 93       	push	r31
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULLPTR){
    1e8e:	80 91 e2 02 	lds	r24, 0x02E2
    1e92:	90 91 e3 02 	lds	r25, 0x02E3
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	29 f0       	breq	.+10     	; 0x1ea4 <__vector_3+0x40>
		INT2_Fptr();
    1e9a:	e0 91 e2 02 	lds	r30, 0x02E2
    1e9e:	f0 91 e3 02 	lds	r31, 0x02E3
    1ea2:	09 95       	icall
	}
}
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	ff 91       	pop	r31
    1eaa:	ef 91       	pop	r30
    1eac:	bf 91       	pop	r27
    1eae:	af 91       	pop	r26
    1eb0:	9f 91       	pop	r25
    1eb2:	8f 91       	pop	r24
    1eb4:	7f 91       	pop	r23
    1eb6:	6f 91       	pop	r22
    1eb8:	5f 91       	pop	r21
    1eba:	4f 91       	pop	r20
    1ebc:	3f 91       	pop	r19
    1ebe:	2f 91       	pop	r18
    1ec0:	0f 90       	pop	r0
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	0f 90       	pop	r0
    1ec6:	1f 90       	pop	r1
    1ec8:	18 95       	reti

00001eca <DIO_ES_tSetPinDirection>:
 * DIO_ES_tSetPinDirection is used to set pin direction
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <DIO_ES_tSetPinDirection+0x6>
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <DIO_ES_tSetPinDirection+0x8>
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	6a 83       	std	Y+2, r22	; 0x02
    1eda:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	88 30       	cpi	r24, 0x08	; 8
    1ee0:	18 f0       	brcs	.+6      	; 0x1ee8 <DIO_ES_tSetPinDirection+0x1e>
		return ES_NOT_OK;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	8c 83       	std	Y+4, r24	; 0x04
    1ee6:	d8 c0       	rjmp	.+432    	; 0x2098 <DIO_ES_tSetPinDirection+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	88 23       	and	r24, r24
    1eec:	91 f5       	brne	.+100    	; 0x1f52 <DIO_ES_tSetPinDirection+0x88>
		if(copy_u8_PinDirection == OUTPUT){
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	a1 f4       	brne	.+40     	; 0x1f1c <DIO_ES_tSetPinDirection+0x52>
			SET_BIT(DDRA,copy_u8_PinId);
    1ef4:	aa e3       	ldi	r26, 0x3A	; 58
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	ea e3       	ldi	r30, 0x3A	; 58
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	48 2f       	mov	r20, r24
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	02 2e       	mov	r0, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <DIO_ES_tSetPinDirection+0x48>
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	0a 94       	dec	r0
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <DIO_ES_tSetPinDirection+0x44>
    1f16:	84 2b       	or	r24, r20
    1f18:	8c 93       	st	X, r24
    1f1a:	bd c0       	rjmp	.+378    	; 0x2096 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	88 23       	and	r24, r24
    1f20:	a9 f4       	brne	.+42     	; 0x1f4c <DIO_ES_tSetPinDirection+0x82>
			CLR_BIT(DDRA,copy_u8_PinId);
    1f22:	aa e3       	ldi	r26, 0x3A	; 58
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	ea e3       	ldi	r30, 0x3A	; 58
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	48 2f       	mov	r20, r24
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	02 2e       	mov	r0, r18
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <DIO_ES_tSetPinDirection+0x76>
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	0a 94       	dec	r0
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <DIO_ES_tSetPinDirection+0x72>
    1f44:	80 95       	com	r24
    1f46:	84 23       	and	r24, r20
    1f48:	8c 93       	st	X, r24
    1f4a:	a5 c0       	rjmp	.+330    	; 0x2096 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	8c 83       	std	Y+4, r24	; 0x04
    1f50:	a3 c0       	rjmp	.+326    	; 0x2098 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	81 30       	cpi	r24, 0x01	; 1
    1f56:	91 f5       	brne	.+100    	; 0x1fbc <DIO_ES_tSetPinDirection+0xf2>
		if(copy_u8_PinDirection == OUTPUT){
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	a1 f4       	brne	.+40     	; 0x1f86 <DIO_ES_tSetPinDirection+0xbc>
			SET_BIT(DDRB,copy_u8_PinId);
    1f5e:	a7 e3       	ldi	r26, 0x37	; 55
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e7 e3       	ldi	r30, 0x37	; 55
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <DIO_ES_tSetPinDirection+0xb2>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <DIO_ES_tSetPinDirection+0xae>
    1f80:	84 2b       	or	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	88 c0       	rjmp	.+272    	; 0x2096 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	88 23       	and	r24, r24
    1f8a:	a9 f4       	brne	.+42     	; 0x1fb6 <DIO_ES_tSetPinDirection+0xec>
			CLR_BIT(DDRB,copy_u8_PinId);
    1f8c:	a7 e3       	ldi	r26, 0x37	; 55
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e7 e3       	ldi	r30, 0x37	; 55
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	48 2f       	mov	r20, r24
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	02 2e       	mov	r0, r18
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <DIO_ES_tSetPinDirection+0xe0>
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	0a 94       	dec	r0
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <DIO_ES_tSetPinDirection+0xdc>
    1fae:	80 95       	com	r24
    1fb0:	84 23       	and	r24, r20
    1fb2:	8c 93       	st	X, r24
    1fb4:	70 c0       	rjmp	.+224    	; 0x2096 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	8c 83       	std	Y+4, r24	; 0x04
    1fba:	6e c0       	rjmp	.+220    	; 0x2098 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	82 30       	cpi	r24, 0x02	; 2
    1fc0:	91 f5       	brne	.+100    	; 0x2026 <DIO_ES_tSetPinDirection+0x15c>
		if(copy_u8_PinDirection == OUTPUT){
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	a1 f4       	brne	.+40     	; 0x1ff0 <DIO_ES_tSetPinDirection+0x126>
			SET_BIT(DDRC,copy_u8_PinId);
    1fc8:	a4 e3       	ldi	r26, 0x34	; 52
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e4 e3       	ldi	r30, 0x34	; 52
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	48 2f       	mov	r20, r24
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	02 2e       	mov	r0, r18
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <DIO_ES_tSetPinDirection+0x11c>
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	0a 94       	dec	r0
    1fe8:	e2 f7       	brpl	.-8      	; 0x1fe2 <DIO_ES_tSetPinDirection+0x118>
    1fea:	84 2b       	or	r24, r20
    1fec:	8c 93       	st	X, r24
    1fee:	53 c0       	rjmp	.+166    	; 0x2096 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	88 23       	and	r24, r24
    1ff4:	a9 f4       	brne	.+42     	; 0x2020 <DIO_ES_tSetPinDirection+0x156>
			CLR_BIT(DDRC,copy_u8_PinId);
    1ff6:	a4 e3       	ldi	r26, 0x34	; 52
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e4 e3       	ldi	r30, 0x34	; 52
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	48 2f       	mov	r20, r24
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	02 2e       	mov	r0, r18
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <DIO_ES_tSetPinDirection+0x14a>
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	0a 94       	dec	r0
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <DIO_ES_tSetPinDirection+0x146>
    2018:	80 95       	com	r24
    201a:	84 23       	and	r24, r20
    201c:	8c 93       	st	X, r24
    201e:	3b c0       	rjmp	.+118    	; 0x2096 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	8c 83       	std	Y+4, r24	; 0x04
    2024:	39 c0       	rjmp	.+114    	; 0x2098 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	83 30       	cpi	r24, 0x03	; 3
    202a:	91 f5       	brne	.+100    	; 0x2090 <DIO_ES_tSetPinDirection+0x1c6>
		if(copy_u8_PinDirection == OUTPUT){
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	81 30       	cpi	r24, 0x01	; 1
    2030:	a1 f4       	brne	.+40     	; 0x205a <DIO_ES_tSetPinDirection+0x190>
			SET_BIT(DDRD,copy_u8_PinId);
    2032:	a1 e3       	ldi	r26, 0x31	; 49
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e1 e3       	ldi	r30, 0x31	; 49
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	48 2f       	mov	r20, r24
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	02 2e       	mov	r0, r18
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <DIO_ES_tSetPinDirection+0x186>
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	0a 94       	dec	r0
    2052:	e2 f7       	brpl	.-8      	; 0x204c <DIO_ES_tSetPinDirection+0x182>
    2054:	84 2b       	or	r24, r20
    2056:	8c 93       	st	X, r24
    2058:	1e c0       	rjmp	.+60     	; 0x2096 <DIO_ES_tSetPinDirection+0x1cc>
		}else if(copy_u8_PinDirection == INPUT){
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	88 23       	and	r24, r24
    205e:	a9 f4       	brne	.+42     	; 0x208a <DIO_ES_tSetPinDirection+0x1c0>
			CLR_BIT(DDRD,copy_u8_PinId);
    2060:	a1 e3       	ldi	r26, 0x31	; 49
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e1 e3       	ldi	r30, 0x31	; 49
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	48 2f       	mov	r20, r24
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	02 2e       	mov	r0, r18
    2078:	02 c0       	rjmp	.+4      	; 0x207e <DIO_ES_tSetPinDirection+0x1b4>
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	0a 94       	dec	r0
    2080:	e2 f7       	brpl	.-8      	; 0x207a <DIO_ES_tSetPinDirection+0x1b0>
    2082:	80 95       	com	r24
    2084:	84 23       	and	r24, r20
    2086:	8c 93       	st	X, r24
    2088:	06 c0       	rjmp	.+12     	; 0x2096 <DIO_ES_tSetPinDirection+0x1cc>
		}else{
			return ES_NOT_OK;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	8c 83       	std	Y+4, r24	; 0x04
    208e:	04 c0       	rjmp	.+8      	; 0x2098 <DIO_ES_tSetPinDirection+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	8c 83       	std	Y+4, r24	; 0x04
    2094:	01 c0       	rjmp	.+2      	; 0x2098 <DIO_ES_tSetPinDirection+0x1ce>
	}
	return ES_OK;
    2096:	1c 82       	std	Y+4, r1	; 0x04
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
}
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <DIO_ES_tSetPinValue>:
 * DIO_ES_tSetPinValue is used to set pin value
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <DIO_ES_tSetPinValue+0x6>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <DIO_ES_tSetPinValue+0x8>
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	6a 83       	std	Y+2, r22	; 0x02
    20b8:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	88 30       	cpi	r24, 0x08	; 8
    20be:	18 f0       	brcs	.+6      	; 0x20c6 <DIO_ES_tSetPinValue+0x1e>
		return ES_NOT_OK;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	8c 83       	std	Y+4, r24	; 0x04
    20c4:	d8 c0       	rjmp	.+432    	; 0x2276 <DIO_ES_tSetPinValue+0x1ce>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	88 23       	and	r24, r24
    20ca:	91 f5       	brne	.+100    	; 0x2130 <DIO_ES_tSetPinValue+0x88>
		if(copy_u8_PinValue == HIGH){
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	a1 f4       	brne	.+40     	; 0x20fa <DIO_ES_tSetPinValue+0x52>
			SET_BIT(PORTA,copy_u8_PinId);
    20d2:	ab e3       	ldi	r26, 0x3B	; 59
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	eb e3       	ldi	r30, 0x3B	; 59
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	48 2f       	mov	r20, r24
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	02 2e       	mov	r0, r18
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <DIO_ES_tSetPinValue+0x48>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	0a 94       	dec	r0
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <DIO_ES_tSetPinValue+0x44>
    20f4:	84 2b       	or	r24, r20
    20f6:	8c 93       	st	X, r24
    20f8:	bd c0       	rjmp	.+378    	; 0x2274 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	88 23       	and	r24, r24
    20fe:	a9 f4       	brne	.+42     	; 0x212a <DIO_ES_tSetPinValue+0x82>
			CLR_BIT(PORTA,copy_u8_PinId);
    2100:	ab e3       	ldi	r26, 0x3B	; 59
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	eb e3       	ldi	r30, 0x3B	; 59
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	48 2f       	mov	r20, r24
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	02 2e       	mov	r0, r18
    2118:	02 c0       	rjmp	.+4      	; 0x211e <DIO_ES_tSetPinValue+0x76>
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	0a 94       	dec	r0
    2120:	e2 f7       	brpl	.-8      	; 0x211a <DIO_ES_tSetPinValue+0x72>
    2122:	80 95       	com	r24
    2124:	84 23       	and	r24, r20
    2126:	8c 93       	st	X, r24
    2128:	a5 c0       	rjmp	.+330    	; 0x2274 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	8c 83       	std	Y+4, r24	; 0x04
    212e:	a3 c0       	rjmp	.+326    	; 0x2276 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	91 f5       	brne	.+100    	; 0x219a <DIO_ES_tSetPinValue+0xf2>
		if(copy_u8_PinValue == HIGH){
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	81 30       	cpi	r24, 0x01	; 1
    213a:	a1 f4       	brne	.+40     	; 0x2164 <DIO_ES_tSetPinValue+0xbc>
			SET_BIT(PORTB,copy_u8_PinId);
    213c:	a8 e3       	ldi	r26, 0x38	; 56
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	e8 e3       	ldi	r30, 0x38	; 56
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	48 2f       	mov	r20, r24
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	02 2e       	mov	r0, r18
    2154:	02 c0       	rjmp	.+4      	; 0x215a <DIO_ES_tSetPinValue+0xb2>
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	0a 94       	dec	r0
    215c:	e2 f7       	brpl	.-8      	; 0x2156 <DIO_ES_tSetPinValue+0xae>
    215e:	84 2b       	or	r24, r20
    2160:	8c 93       	st	X, r24
    2162:	88 c0       	rjmp	.+272    	; 0x2274 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	88 23       	and	r24, r24
    2168:	a9 f4       	brne	.+42     	; 0x2194 <DIO_ES_tSetPinValue+0xec>
			CLR_BIT(PORTB,copy_u8_PinId);
    216a:	a8 e3       	ldi	r26, 0x38	; 56
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	e8 e3       	ldi	r30, 0x38	; 56
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	48 2f       	mov	r20, r24
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	02 2e       	mov	r0, r18
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <DIO_ES_tSetPinValue+0xe0>
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	0a 94       	dec	r0
    218a:	e2 f7       	brpl	.-8      	; 0x2184 <DIO_ES_tSetPinValue+0xdc>
    218c:	80 95       	com	r24
    218e:	84 23       	and	r24, r20
    2190:	8c 93       	st	X, r24
    2192:	70 c0       	rjmp	.+224    	; 0x2274 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	8c 83       	std	Y+4, r24	; 0x04
    2198:	6e c0       	rjmp	.+220    	; 0x2276 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	91 f5       	brne	.+100    	; 0x2204 <DIO_ES_tSetPinValue+0x15c>
		if(copy_u8_PinValue == HIGH){
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	a1 f4       	brne	.+40     	; 0x21ce <DIO_ES_tSetPinValue+0x126>
			SET_BIT(PORTC,copy_u8_PinId);
    21a6:	a5 e3       	ldi	r26, 0x35	; 53
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e5 e3       	ldi	r30, 0x35	; 53
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	48 2f       	mov	r20, r24
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	02 2e       	mov	r0, r18
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <DIO_ES_tSetPinValue+0x11c>
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	0a 94       	dec	r0
    21c6:	e2 f7       	brpl	.-8      	; 0x21c0 <DIO_ES_tSetPinValue+0x118>
    21c8:	84 2b       	or	r24, r20
    21ca:	8c 93       	st	X, r24
    21cc:	53 c0       	rjmp	.+166    	; 0x2274 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	88 23       	and	r24, r24
    21d2:	a9 f4       	brne	.+42     	; 0x21fe <DIO_ES_tSetPinValue+0x156>
			CLR_BIT(PORTC,copy_u8_PinId);
    21d4:	a5 e3       	ldi	r26, 0x35	; 53
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e5 e3       	ldi	r30, 0x35	; 53
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <DIO_ES_tSetPinValue+0x14a>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <DIO_ES_tSetPinValue+0x146>
    21f6:	80 95       	com	r24
    21f8:	84 23       	and	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	3b c0       	rjmp	.+118    	; 0x2274 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	8c 83       	std	Y+4, r24	; 0x04
    2202:	39 c0       	rjmp	.+114    	; 0x2276 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	83 30       	cpi	r24, 0x03	; 3
    2208:	91 f5       	brne	.+100    	; 0x226e <DIO_ES_tSetPinValue+0x1c6>
		if(copy_u8_PinValue == HIGH){
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	a1 f4       	brne	.+40     	; 0x2238 <DIO_ES_tSetPinValue+0x190>
			SET_BIT(PORTD,copy_u8_PinId);
    2210:	a2 e3       	ldi	r26, 0x32	; 50
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	e2 e3       	ldi	r30, 0x32	; 50
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	48 2f       	mov	r20, r24
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	02 2e       	mov	r0, r18
    2228:	02 c0       	rjmp	.+4      	; 0x222e <DIO_ES_tSetPinValue+0x186>
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	0a 94       	dec	r0
    2230:	e2 f7       	brpl	.-8      	; 0x222a <DIO_ES_tSetPinValue+0x182>
    2232:	84 2b       	or	r24, r20
    2234:	8c 93       	st	X, r24
    2236:	1e c0       	rjmp	.+60     	; 0x2274 <DIO_ES_tSetPinValue+0x1cc>
		}else if(copy_u8_PinValue == LOW){
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	88 23       	and	r24, r24
    223c:	a9 f4       	brne	.+42     	; 0x2268 <DIO_ES_tSetPinValue+0x1c0>
			CLR_BIT(PORTD,copy_u8_PinId);
    223e:	a2 e3       	ldi	r26, 0x32	; 50
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e2 e3       	ldi	r30, 0x32	; 50
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	48 2f       	mov	r20, r24
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	02 2e       	mov	r0, r18
    2256:	02 c0       	rjmp	.+4      	; 0x225c <DIO_ES_tSetPinValue+0x1b4>
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	0a 94       	dec	r0
    225e:	e2 f7       	brpl	.-8      	; 0x2258 <DIO_ES_tSetPinValue+0x1b0>
    2260:	80 95       	com	r24
    2262:	84 23       	and	r24, r20
    2264:	8c 93       	st	X, r24
    2266:	06 c0       	rjmp	.+12     	; 0x2274 <DIO_ES_tSetPinValue+0x1cc>
		}else{
			return ES_NOT_OK;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	8c 83       	std	Y+4, r24	; 0x04
    226c:	04 c0       	rjmp	.+8      	; 0x2276 <DIO_ES_tSetPinValue+0x1ce>
		}
	}else{
		return ES_NOT_OK;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	8c 83       	std	Y+4, r24	; 0x04
    2272:	01 c0       	rjmp	.+2      	; 0x2276 <DIO_ES_tSetPinValue+0x1ce>
	}
	return ES_OK;
    2274:	1c 82       	std	Y+4, r1	; 0x04
    2276:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	00 d0       	rcall	.+0      	; 0x228c <DIO_ES_tGetPinValue+0x6>
    228c:	00 d0       	rcall	.+0      	; 0x228e <DIO_ES_tGetPinValue+0x8>
    228e:	0f 92       	push	r0
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	6a 83       	std	Y+2, r22	; 0x02
    2298:	5c 83       	std	Y+4, r21	; 0x04
    229a:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8_PinId > PIN_LIMIT){
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	88 30       	cpi	r24, 0x08	; 8
    22a0:	18 f0       	brcs	.+6      	; 0x22a8 <DIO_ES_tGetPinValue+0x22>
		return ES_NOT_OK;
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	4d 83       	std	Y+5, r20	; 0x05
    22a6:	60 c0       	rjmp	.+192    	; 0x2368 <DIO_ES_tGetPinValue+0xe2>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	88 23       	and	r24, r24
    22ac:	a1 f4       	brne	.+40     	; 0x22d6 <DIO_ES_tGetPinValue+0x50>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
    22ae:	e9 e3       	ldi	r30, 0x39	; 57
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	88 2f       	mov	r24, r24
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a9 01       	movw	r20, r18
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <DIO_ES_tGetPinValue+0x40>
    22c2:	55 95       	asr	r21
    22c4:	47 95       	ror	r20
    22c6:	8a 95       	dec	r24
    22c8:	e2 f7       	brpl	.-8      	; 0x22c2 <DIO_ES_tGetPinValue+0x3c>
    22ca:	ca 01       	movw	r24, r20
    22cc:	81 70       	andi	r24, 0x01	; 1
    22ce:	eb 81       	ldd	r30, Y+3	; 0x03
    22d0:	fc 81       	ldd	r31, Y+4	; 0x04
    22d2:	80 83       	st	Z, r24
    22d4:	48 c0       	rjmp	.+144    	; 0x2366 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	81 30       	cpi	r24, 0x01	; 1
    22da:	a1 f4       	brne	.+40     	; 0x2304 <DIO_ES_tGetPinValue+0x7e>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
    22dc:	e6 e3       	ldi	r30, 0x36	; 54
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	a9 01       	movw	r20, r18
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <DIO_ES_tGetPinValue+0x6e>
    22f0:	55 95       	asr	r21
    22f2:	47 95       	ror	r20
    22f4:	8a 95       	dec	r24
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <DIO_ES_tGetPinValue+0x6a>
    22f8:	ca 01       	movw	r24, r20
    22fa:	81 70       	andi	r24, 0x01	; 1
    22fc:	eb 81       	ldd	r30, Y+3	; 0x03
    22fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2300:	80 83       	st	Z, r24
    2302:	31 c0       	rjmp	.+98     	; 0x2366 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	82 30       	cpi	r24, 0x02	; 2
    2308:	a1 f4       	brne	.+40     	; 0x2332 <DIO_ES_tGetPinValue+0xac>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
    230a:	e3 e3       	ldi	r30, 0x33	; 51
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	a9 01       	movw	r20, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <DIO_ES_tGetPinValue+0x9c>
    231e:	55 95       	asr	r21
    2320:	47 95       	ror	r20
    2322:	8a 95       	dec	r24
    2324:	e2 f7       	brpl	.-8      	; 0x231e <DIO_ES_tGetPinValue+0x98>
    2326:	ca 01       	movw	r24, r20
    2328:	81 70       	andi	r24, 0x01	; 1
    232a:	eb 81       	ldd	r30, Y+3	; 0x03
    232c:	fc 81       	ldd	r31, Y+4	; 0x04
    232e:	80 83       	st	Z, r24
    2330:	1a c0       	rjmp	.+52     	; 0x2366 <DIO_ES_tGetPinValue+0xe0>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	83 30       	cpi	r24, 0x03	; 3
    2336:	a1 f4       	brne	.+40     	; 0x2360 <DIO_ES_tGetPinValue+0xda>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
    2338:	e0 e3       	ldi	r30, 0x30	; 48
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	88 2f       	mov	r24, r24
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a9 01       	movw	r20, r18
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <DIO_ES_tGetPinValue+0xca>
    234c:	55 95       	asr	r21
    234e:	47 95       	ror	r20
    2350:	8a 95       	dec	r24
    2352:	e2 f7       	brpl	.-8      	; 0x234c <DIO_ES_tGetPinValue+0xc6>
    2354:	ca 01       	movw	r24, r20
    2356:	81 70       	andi	r24, 0x01	; 1
    2358:	eb 81       	ldd	r30, Y+3	; 0x03
    235a:	fc 81       	ldd	r31, Y+4	; 0x04
    235c:	80 83       	st	Z, r24
    235e:	03 c0       	rjmp	.+6      	; 0x2366 <DIO_ES_tGetPinValue+0xe0>
	}else{
		return ES_NOT_OK;
    2360:	51 e0       	ldi	r21, 0x01	; 1
    2362:	5d 83       	std	Y+5, r21	; 0x05
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <DIO_ES_tGetPinValue+0xe2>
	}
	return ES_OK;
    2366:	1d 82       	std	Y+5, r1	; 0x05
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
}
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <DIO_ES_tSetPortDirection>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	00 d0       	rcall	.+0      	; 0x2380 <DIO_ES_tSetPortDirection+0x6>
    2380:	00 d0       	rcall	.+0      	; 0x2382 <DIO_ES_tSetPortDirection+0x8>
    2382:	0f 92       	push	r0
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	31 f0       	breq	.+12     	; 0x239e <DIO_ES_tSetPortDirection+0x24>
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	81 30       	cpi	r24, 0x01	; 1
    2396:	19 f0       	breq	.+6      	; 0x239e <DIO_ES_tSetPortDirection+0x24>
		return ES_NOT_OK;
    2398:	21 e0       	ldi	r18, 0x01	; 1
    239a:	2d 83       	std	Y+5, r18	; 0x05
    239c:	53 c0       	rjmp	.+166    	; 0x2444 <DIO_ES_tSetPortDirection+0xca>
	}
	switch(copy_u8_PortId){
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	3c 83       	std	Y+4, r19	; 0x04
    23a6:	2b 83       	std	Y+3, r18	; 0x03
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	91 05       	cpc	r25, r1
    23b0:	09 f1       	breq	.+66     	; 0x23f4 <DIO_ES_tSetPortDirection+0x7a>
    23b2:	2b 81       	ldd	r18, Y+3	; 0x03
    23b4:	3c 81       	ldd	r19, Y+4	; 0x04
    23b6:	22 30       	cpi	r18, 0x02	; 2
    23b8:	31 05       	cpc	r19, r1
    23ba:	2c f4       	brge	.+10     	; 0x23c6 <DIO_ES_tSetPortDirection+0x4c>
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	61 f0       	breq	.+24     	; 0x23dc <DIO_ES_tSetPortDirection+0x62>
    23c4:	3b c0       	rjmp	.+118    	; 0x243c <DIO_ES_tSetPortDirection+0xc2>
    23c6:	2b 81       	ldd	r18, Y+3	; 0x03
    23c8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ca:	22 30       	cpi	r18, 0x02	; 2
    23cc:	31 05       	cpc	r19, r1
    23ce:	f1 f0       	breq	.+60     	; 0x240c <DIO_ES_tSetPortDirection+0x92>
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	83 30       	cpi	r24, 0x03	; 3
    23d6:	91 05       	cpc	r25, r1
    23d8:	29 f1       	breq	.+74     	; 0x2424 <DIO_ES_tSetPortDirection+0xaa>
    23da:	30 c0       	rjmp	.+96     	; 0x243c <DIO_ES_tSetPortDirection+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	81 30       	cpi	r24, 0x01	; 1
    23e0:	29 f4       	brne	.+10     	; 0x23ec <DIO_ES_tSetPortDirection+0x72>
			DDRA = 0xff;
    23e2:	ea e3       	ldi	r30, 0x3A	; 58
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	8f ef       	ldi	r24, 0xFF	; 255
    23e8:	80 83       	st	Z, r24
    23ea:	2b c0       	rjmp	.+86     	; 0x2442 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRA = 0x00;
    23ec:	ea e3       	ldi	r30, 0x3A	; 58
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	10 82       	st	Z, r1
    23f2:	27 c0       	rjmp	.+78     	; 0x2442 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	29 f4       	brne	.+10     	; 0x2404 <DIO_ES_tSetPortDirection+0x8a>
			DDRB = 0xff;
    23fa:	e7 e3       	ldi	r30, 0x37	; 55
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	8f ef       	ldi	r24, 0xFF	; 255
    2400:	80 83       	st	Z, r24
    2402:	1f c0       	rjmp	.+62     	; 0x2442 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRB = 0x00;
    2404:	e7 e3       	ldi	r30, 0x37	; 55
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	10 82       	st	Z, r1
    240a:	1b c0       	rjmp	.+54     	; 0x2442 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	81 30       	cpi	r24, 0x01	; 1
    2410:	29 f4       	brne	.+10     	; 0x241c <DIO_ES_tSetPortDirection+0xa2>
			DDRC = 0xff;
    2412:	e4 e3       	ldi	r30, 0x34	; 52
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	8f ef       	ldi	r24, 0xFF	; 255
    2418:	80 83       	st	Z, r24
    241a:	13 c0       	rjmp	.+38     	; 0x2442 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRC = 0x00;
    241c:	e4 e3       	ldi	r30, 0x34	; 52
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	10 82       	st	Z, r1
    2422:	0f c0       	rjmp	.+30     	; 0x2442 <DIO_ES_tSetPortDirection+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	81 30       	cpi	r24, 0x01	; 1
    2428:	29 f4       	brne	.+10     	; 0x2434 <DIO_ES_tSetPortDirection+0xba>
			DDRD = 0xff;
    242a:	e1 e3       	ldi	r30, 0x31	; 49
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	8f ef       	ldi	r24, 0xFF	; 255
    2430:	80 83       	st	Z, r24
    2432:	07 c0       	rjmp	.+14     	; 0x2442 <DIO_ES_tSetPortDirection+0xc8>
		else
			DDRD = 0x00;
    2434:	e1 e3       	ldi	r30, 0x31	; 49
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	10 82       	st	Z, r1
    243a:	03 c0       	rjmp	.+6      	; 0x2442 <DIO_ES_tSetPortDirection+0xc8>
		break;
	default:
		return ES_NOT_OK;
    243c:	91 e0       	ldi	r25, 0x01	; 1
    243e:	9d 83       	std	Y+5, r25	; 0x05
    2440:	01 c0       	rjmp	.+2      	; 0x2444 <DIO_ES_tSetPortDirection+0xca>
		break;
	}
	return ES_OK;
    2442:	1d 82       	std	Y+5, r1	; 0x05
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	00 d0       	rcall	.+0      	; 0x245c <DIO_ES_tSetPortValue+0x6>
    245c:	00 d0       	rcall	.+0      	; 0x245e <DIO_ES_tSetPortValue+0x8>
    245e:	0f 92       	push	r0
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	89 83       	std	Y+1, r24	; 0x01
    2466:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	81 30       	cpi	r24, 0x01	; 1
    246c:	31 f0       	breq	.+12     	; 0x247a <DIO_ES_tSetPortValue+0x24>
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	88 23       	and	r24, r24
    2472:	19 f0       	breq	.+6      	; 0x247a <DIO_ES_tSetPortValue+0x24>
		return ES_NOT_OK;
    2474:	21 e0       	ldi	r18, 0x01	; 1
    2476:	2d 83       	std	Y+5, r18	; 0x05
    2478:	53 c0       	rjmp	.+166    	; 0x2520 <DIO_ES_tSetPortValue+0xca>
	}
	switch(copy_u8_PortId){
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	3c 83       	std	Y+4, r19	; 0x04
    2482:	2b 83       	std	Y+3, r18	; 0x03
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	81 30       	cpi	r24, 0x01	; 1
    248a:	91 05       	cpc	r25, r1
    248c:	09 f1       	breq	.+66     	; 0x24d0 <DIO_ES_tSetPortValue+0x7a>
    248e:	2b 81       	ldd	r18, Y+3	; 0x03
    2490:	3c 81       	ldd	r19, Y+4	; 0x04
    2492:	22 30       	cpi	r18, 0x02	; 2
    2494:	31 05       	cpc	r19, r1
    2496:	2c f4       	brge	.+10     	; 0x24a2 <DIO_ES_tSetPortValue+0x4c>
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	9c 81       	ldd	r25, Y+4	; 0x04
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	61 f0       	breq	.+24     	; 0x24b8 <DIO_ES_tSetPortValue+0x62>
    24a0:	3b c0       	rjmp	.+118    	; 0x2518 <DIO_ES_tSetPortValue+0xc2>
    24a2:	2b 81       	ldd	r18, Y+3	; 0x03
    24a4:	3c 81       	ldd	r19, Y+4	; 0x04
    24a6:	22 30       	cpi	r18, 0x02	; 2
    24a8:	31 05       	cpc	r19, r1
    24aa:	f1 f0       	breq	.+60     	; 0x24e8 <DIO_ES_tSetPortValue+0x92>
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	83 30       	cpi	r24, 0x03	; 3
    24b2:	91 05       	cpc	r25, r1
    24b4:	29 f1       	breq	.+74     	; 0x2500 <DIO_ES_tSetPortValue+0xaa>
    24b6:	30 c0       	rjmp	.+96     	; 0x2518 <DIO_ES_tSetPortValue+0xc2>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	29 f4       	brne	.+10     	; 0x24c8 <DIO_ES_tSetPortValue+0x72>
			PORTA = 0xff;
    24be:	eb e3       	ldi	r30, 0x3B	; 59
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	8f ef       	ldi	r24, 0xFF	; 255
    24c4:	80 83       	st	Z, r24
    24c6:	2b c0       	rjmp	.+86     	; 0x251e <DIO_ES_tSetPortValue+0xc8>
		else
			PORTA = 0x00;
    24c8:	eb e3       	ldi	r30, 0x3B	; 59
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	10 82       	st	Z, r1
    24ce:	27 c0       	rjmp	.+78     	; 0x251e <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	29 f4       	brne	.+10     	; 0x24e0 <DIO_ES_tSetPortValue+0x8a>
			PORTB = 0xff;
    24d6:	e8 e3       	ldi	r30, 0x38	; 56
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	8f ef       	ldi	r24, 0xFF	; 255
    24dc:	80 83       	st	Z, r24
    24de:	1f c0       	rjmp	.+62     	; 0x251e <DIO_ES_tSetPortValue+0xc8>
		else
			PORTB = 0x00;
    24e0:	e8 e3       	ldi	r30, 0x38	; 56
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	10 82       	st	Z, r1
    24e6:	1b c0       	rjmp	.+54     	; 0x251e <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	29 f4       	brne	.+10     	; 0x24f8 <DIO_ES_tSetPortValue+0xa2>
			PORTC = 0xff;
    24ee:	e5 e3       	ldi	r30, 0x35	; 53
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	8f ef       	ldi	r24, 0xFF	; 255
    24f4:	80 83       	st	Z, r24
    24f6:	13 c0       	rjmp	.+38     	; 0x251e <DIO_ES_tSetPortValue+0xc8>
		else
			PORTC = 0x00;
    24f8:	e5 e3       	ldi	r30, 0x35	; 53
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	10 82       	st	Z, r1
    24fe:	0f c0       	rjmp	.+30     	; 0x251e <DIO_ES_tSetPortValue+0xc8>
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	81 30       	cpi	r24, 0x01	; 1
    2504:	29 f4       	brne	.+10     	; 0x2510 <DIO_ES_tSetPortValue+0xba>
			PORTD = 0xff;
    2506:	e2 e3       	ldi	r30, 0x32	; 50
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	8f ef       	ldi	r24, 0xFF	; 255
    250c:	80 83       	st	Z, r24
    250e:	07 c0       	rjmp	.+14     	; 0x251e <DIO_ES_tSetPortValue+0xc8>
		else
			PORTD = 0x00;
    2510:	e2 e3       	ldi	r30, 0x32	; 50
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	10 82       	st	Z, r1
    2516:	03 c0       	rjmp	.+6      	; 0x251e <DIO_ES_tSetPortValue+0xc8>
		break;
	default:
		return ES_NOT_OK;
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	9d 83       	std	Y+5, r25	; 0x05
    251c:	01 c0       	rjmp	.+2      	; 0x2520 <DIO_ES_tSetPortValue+0xca>
		break;
	}
	return ES_OK;
    251e:	1d 82       	std	Y+5, r1	; 0x05
    2520:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <DIO_ES_tTOGPin>:
/*
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <DIO_ES_tTOGPin+0x6>
    2538:	0f 92       	push	r0
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	89 83       	std	Y+1, r24	; 0x01
    2540:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8_PinId > PIN_LIMIT){
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	88 30       	cpi	r24, 0x08	; 8
    2546:	18 f0       	brcs	.+6      	; 0x254e <DIO_ES_tTOGPin+0x1c>
		return ES_NOT_OK;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	8b 83       	std	Y+3, r24	; 0x03
    254c:	60 c0       	rjmp	.+192    	; 0x260e <DIO_ES_tTOGPin+0xdc>
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	88 23       	and	r24, r24
    2552:	a1 f4       	brne	.+40     	; 0x257c <DIO_ES_tTOGPin+0x4a>
		TOG_BIT(PORTA,copy_u8_PinId);
    2554:	ab e3       	ldi	r26, 0x3B	; 59
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	eb e3       	ldi	r30, 0x3B	; 59
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	48 2f       	mov	r20, r24
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	28 2f       	mov	r18, r24
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	02 2e       	mov	r0, r18
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <DIO_ES_tTOGPin+0x40>
    256e:	88 0f       	add	r24, r24
    2570:	99 1f       	adc	r25, r25
    2572:	0a 94       	dec	r0
    2574:	e2 f7       	brpl	.-8      	; 0x256e <DIO_ES_tTOGPin+0x3c>
    2576:	84 27       	eor	r24, r20
    2578:	8c 93       	st	X, r24
    257a:	48 c0       	rjmp	.+144    	; 0x260c <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	a1 f4       	brne	.+40     	; 0x25aa <DIO_ES_tTOGPin+0x78>
		TOG_BIT(PORTB,copy_u8_PinId);
    2582:	a8 e3       	ldi	r26, 0x38	; 56
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e8 e3       	ldi	r30, 0x38	; 56
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	48 2f       	mov	r20, r24
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	02 2e       	mov	r0, r18
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <DIO_ES_tTOGPin+0x6e>
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	0a 94       	dec	r0
    25a2:	e2 f7       	brpl	.-8      	; 0x259c <DIO_ES_tTOGPin+0x6a>
    25a4:	84 27       	eor	r24, r20
    25a6:	8c 93       	st	X, r24
    25a8:	31 c0       	rjmp	.+98     	; 0x260c <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	a1 f4       	brne	.+40     	; 0x25d8 <DIO_ES_tTOGPin+0xa6>
		TOG_BIT(PORTC,copy_u8_PinId);
    25b0:	a5 e3       	ldi	r26, 0x35	; 53
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e5 e3       	ldi	r30, 0x35	; 53
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	48 2f       	mov	r20, r24
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	02 2e       	mov	r0, r18
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <DIO_ES_tTOGPin+0x9c>
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	0a 94       	dec	r0
    25d0:	e2 f7       	brpl	.-8      	; 0x25ca <DIO_ES_tTOGPin+0x98>
    25d2:	84 27       	eor	r24, r20
    25d4:	8c 93       	st	X, r24
    25d6:	1a c0       	rjmp	.+52     	; 0x260c <DIO_ES_tTOGPin+0xda>
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	83 30       	cpi	r24, 0x03	; 3
    25dc:	a1 f4       	brne	.+40     	; 0x2606 <DIO_ES_tTOGPin+0xd4>
		TOG_BIT(PORTD,copy_u8_PinId);
    25de:	a2 e3       	ldi	r26, 0x32	; 50
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e2 e3       	ldi	r30, 0x32	; 50
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	48 2f       	mov	r20, r24
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	02 2e       	mov	r0, r18
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <DIO_ES_tTOGPin+0xca>
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	0a 94       	dec	r0
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <DIO_ES_tTOGPin+0xc6>
    2600:	84 27       	eor	r24, r20
    2602:	8c 93       	st	X, r24
    2604:	03 c0       	rjmp	.+6      	; 0x260c <DIO_ES_tTOGPin+0xda>
	}else{
		return ES_NOT_OK;
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	8b 83       	std	Y+3, r24	; 0x03
    260a:	01 c0       	rjmp	.+2      	; 0x260e <DIO_ES_tTOGPin+0xdc>
	}
	return ES_OK;
    260c:	1b 82       	std	Y+3, r1	; 0x03
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	00 d0       	rcall	.+0      	; 0x2622 <DIO_ES_tInit+0x6>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    2626:	1a 82       	std	Y+2, r1	; 0x02
    2628:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    262a:	1a 82       	std	Y+2, r1	; 0x02
    262c:	19 82       	std	Y+1, r1	; 0x01
    262e:	a3 c2       	rjmp	.+1350   	; 0x2b76 <DIO_ES_tInit+0x55a>
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	88 0f       	add	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	fc 01       	movw	r30, r24
    263e:	ec 5b       	subi	r30, 0xBC	; 188
    2640:	fd 4f       	sbci	r31, 0xFD	; 253
    2642:	80 81       	ld	r24, Z
    2644:	88 23       	and	r24, r24
    2646:	09 f0       	breq	.+2      	; 0x264a <DIO_ES_tInit+0x2e>
    2648:	9b c0       	rjmp	.+310    	; 0x2780 <DIO_ES_tInit+0x164>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	9a 81       	ldd	r25, Y+2	; 0x02
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	01 96       	adiw	r24, 0x01	; 1
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	fc 01       	movw	r30, r24
    265a:	ec 5b       	subi	r30, 0xBC	; 188
    265c:	fd 4f       	sbci	r31, 0xFD	; 253
    265e:	80 81       	ld	r24, Z
    2660:	81 30       	cpi	r24, 0x01	; 1
    2662:	e9 f4       	brne	.+58     	; 0x269e <DIO_ES_tInit+0x82>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    2664:	aa e3       	ldi	r26, 0x3A	; 58
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	ea e3       	ldi	r30, 0x3A	; 58
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	48 2f       	mov	r20, r24
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	fc 01       	movw	r30, r24
    267e:	eb 5b       	subi	r30, 0xBB	; 187
    2680:	fd 4f       	sbci	r31, 0xFD	; 253
    2682:	80 81       	ld	r24, Z
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	02 2e       	mov	r0, r18
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <DIO_ES_tInit+0x78>
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	0a 94       	dec	r0
    2696:	e2 f7       	brpl	.-8      	; 0x2690 <DIO_ES_tInit+0x74>
    2698:	84 2b       	or	r24, r20
    269a:	8c 93       	st	X, r24
    269c:	67 c2       	rjmp	.+1230   	; 0x2b6c <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
    269e:	aa e3       	ldi	r26, 0x3A	; 58
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	ea e3       	ldi	r30, 0x3A	; 58
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	48 2f       	mov	r20, r24
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	9a 81       	ldd	r25, Y+2	; 0x02
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	fc 01       	movw	r30, r24
    26b8:	eb 5b       	subi	r30, 0xBB	; 187
    26ba:	fd 4f       	sbci	r31, 0xFD	; 253
    26bc:	80 81       	ld	r24, Z
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	02 2e       	mov	r0, r18
    26c8:	02 c0       	rjmp	.+4      	; 0x26ce <DIO_ES_tInit+0xb2>
    26ca:	88 0f       	add	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	0a 94       	dec	r0
    26d0:	e2 f7       	brpl	.-8      	; 0x26ca <DIO_ES_tInit+0xae>
    26d2:	80 95       	com	r24
    26d4:	84 23       	and	r24, r20
    26d6:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	9a 81       	ldd	r25, Y+2	; 0x02
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	88 0f       	add	r24, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	fc 01       	movw	r30, r24
    26e6:	e9 5b       	subi	r30, 0xB9	; 185
    26e8:	fd 4f       	sbci	r31, 0xFD	; 253
    26ea:	80 81       	ld	r24, Z
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	e9 f4       	brne	.+58     	; 0x272a <DIO_ES_tInit+0x10e>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    26f0:	ab e3       	ldi	r26, 0x3B	; 59
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	eb e3       	ldi	r30, 0x3B	; 59
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	48 2f       	mov	r20, r24
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2700:	88 0f       	add	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	88 0f       	add	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	fc 01       	movw	r30, r24
    270a:	eb 5b       	subi	r30, 0xBB	; 187
    270c:	fd 4f       	sbci	r31, 0xFD	; 253
    270e:	80 81       	ld	r24, Z
    2710:	28 2f       	mov	r18, r24
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	02 2e       	mov	r0, r18
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <DIO_ES_tInit+0x104>
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	0a 94       	dec	r0
    2722:	e2 f7       	brpl	.-8      	; 0x271c <DIO_ES_tInit+0x100>
    2724:	84 2b       	or	r24, r20
    2726:	8c 93       	st	X, r24
    2728:	21 c2       	rjmp	.+1090   	; 0x2b6c <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	88 0f       	add	r24, r24
    2730:	99 1f       	adc	r25, r25
    2732:	88 0f       	add	r24, r24
    2734:	99 1f       	adc	r25, r25
    2736:	fc 01       	movw	r30, r24
    2738:	e9 5b       	subi	r30, 0xB9	; 185
    273a:	fd 4f       	sbci	r31, 0xFD	; 253
    273c:	80 81       	ld	r24, Z
    273e:	88 23       	and	r24, r24
    2740:	09 f0       	breq	.+2      	; 0x2744 <DIO_ES_tInit+0x128>
    2742:	14 c2       	rjmp	.+1064   	; 0x2b6c <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2744:	ab e3       	ldi	r26, 0x3B	; 59
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	eb e3       	ldi	r30, 0x3B	; 59
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	48 2f       	mov	r20, r24
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	88 0f       	add	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	fc 01       	movw	r30, r24
    275e:	eb 5b       	subi	r30, 0xBB	; 187
    2760:	fd 4f       	sbci	r31, 0xFD	; 253
    2762:	80 81       	ld	r24, Z
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	02 2e       	mov	r0, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <DIO_ES_tInit+0x158>
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	0a 94       	dec	r0
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <DIO_ES_tInit+0x154>
    2778:	80 95       	com	r24
    277a:	84 23       	and	r24, r20
    277c:	8c 93       	st	X, r24
    277e:	f6 c1       	rjmp	.+1004   	; 0x2b6c <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	9a 81       	ldd	r25, Y+2	; 0x02
    2784:	88 0f       	add	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	fc 01       	movw	r30, r24
    278e:	ec 5b       	subi	r30, 0xBC	; 188
    2790:	fd 4f       	sbci	r31, 0xFD	; 253
    2792:	80 81       	ld	r24, Z
    2794:	81 30       	cpi	r24, 0x01	; 1
    2796:	09 f0       	breq	.+2      	; 0x279a <DIO_ES_tInit+0x17e>
    2798:	9b c0       	rjmp	.+310    	; 0x28d0 <DIO_ES_tInit+0x2b4>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	9a 81       	ldd	r25, Y+2	; 0x02
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	01 96       	adiw	r24, 0x01	; 1
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	fc 01       	movw	r30, r24
    27aa:	ec 5b       	subi	r30, 0xBC	; 188
    27ac:	fd 4f       	sbci	r31, 0xFD	; 253
    27ae:	80 81       	ld	r24, Z
    27b0:	81 30       	cpi	r24, 0x01	; 1
    27b2:	e9 f4       	brne	.+58     	; 0x27ee <DIO_ES_tInit+0x1d2>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    27b4:	a7 e3       	ldi	r26, 0x37	; 55
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e7 e3       	ldi	r30, 0x37	; 55
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	48 2f       	mov	r20, r24
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	9a 81       	ldd	r25, Y+2	; 0x02
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	fc 01       	movw	r30, r24
    27ce:	eb 5b       	subi	r30, 0xBB	; 187
    27d0:	fd 4f       	sbci	r31, 0xFD	; 253
    27d2:	80 81       	ld	r24, Z
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	02 2e       	mov	r0, r18
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <DIO_ES_tInit+0x1c8>
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	0a 94       	dec	r0
    27e6:	e2 f7       	brpl	.-8      	; 0x27e0 <DIO_ES_tInit+0x1c4>
    27e8:	84 2b       	or	r24, r20
    27ea:	8c 93       	st	X, r24
    27ec:	bf c1       	rjmp	.+894    	; 0x2b6c <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
    27ee:	a7 e3       	ldi	r26, 0x37	; 55
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e7 e3       	ldi	r30, 0x37	; 55
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	48 2f       	mov	r20, r24
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	9a 81       	ldd	r25, Y+2	; 0x02
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	fc 01       	movw	r30, r24
    2808:	eb 5b       	subi	r30, 0xBB	; 187
    280a:	fd 4f       	sbci	r31, 0xFD	; 253
    280c:	80 81       	ld	r24, Z
    280e:	28 2f       	mov	r18, r24
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	02 2e       	mov	r0, r18
    2818:	02 c0       	rjmp	.+4      	; 0x281e <DIO_ES_tInit+0x202>
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	0a 94       	dec	r0
    2820:	e2 f7       	brpl	.-8      	; 0x281a <DIO_ES_tInit+0x1fe>
    2822:	80 95       	com	r24
    2824:	84 23       	and	r24, r20
    2826:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	9a 81       	ldd	r25, Y+2	; 0x02
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	88 0f       	add	r24, r24
    2832:	99 1f       	adc	r25, r25
    2834:	fc 01       	movw	r30, r24
    2836:	e9 5b       	subi	r30, 0xB9	; 185
    2838:	fd 4f       	sbci	r31, 0xFD	; 253
    283a:	80 81       	ld	r24, Z
    283c:	81 30       	cpi	r24, 0x01	; 1
    283e:	e9 f4       	brne	.+58     	; 0x287a <DIO_ES_tInit+0x25e>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
    2840:	a8 e3       	ldi	r26, 0x38	; 56
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e8 e3       	ldi	r30, 0x38	; 56
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	48 2f       	mov	r20, r24
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
    2850:	88 0f       	add	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	fc 01       	movw	r30, r24
    285a:	eb 5b       	subi	r30, 0xBB	; 187
    285c:	fd 4f       	sbci	r31, 0xFD	; 253
    285e:	80 81       	ld	r24, Z
    2860:	28 2f       	mov	r18, r24
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	02 2e       	mov	r0, r18
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <DIO_ES_tInit+0x254>
    286c:	88 0f       	add	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	0a 94       	dec	r0
    2872:	e2 f7       	brpl	.-8      	; 0x286c <DIO_ES_tInit+0x250>
    2874:	84 2b       	or	r24, r20
    2876:	8c 93       	st	X, r24
    2878:	79 c1       	rjmp	.+754    	; 0x2b6c <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	88 0f       	add	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	fc 01       	movw	r30, r24
    2888:	e9 5b       	subi	r30, 0xB9	; 185
    288a:	fd 4f       	sbci	r31, 0xFD	; 253
    288c:	80 81       	ld	r24, Z
    288e:	88 23       	and	r24, r24
    2890:	09 f0       	breq	.+2      	; 0x2894 <DIO_ES_tInit+0x278>
    2892:	6c c1       	rjmp	.+728    	; 0x2b6c <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2894:	ab e3       	ldi	r26, 0x3B	; 59
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	eb e3       	ldi	r30, 0x3B	; 59
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	48 2f       	mov	r20, r24
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	88 0f       	add	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	88 0f       	add	r24, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	fc 01       	movw	r30, r24
    28ae:	eb 5b       	subi	r30, 0xBB	; 187
    28b0:	fd 4f       	sbci	r31, 0xFD	; 253
    28b2:	80 81       	ld	r24, Z
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	02 2e       	mov	r0, r18
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <DIO_ES_tInit+0x2a8>
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	0a 94       	dec	r0
    28c6:	e2 f7       	brpl	.-8      	; 0x28c0 <DIO_ES_tInit+0x2a4>
    28c8:	80 95       	com	r24
    28ca:	84 23       	and	r24, r20
    28cc:	8c 93       	st	X, r24
    28ce:	4e c1       	rjmp	.+668    	; 0x2b6c <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	88 0f       	add	r24, r24
    28d6:	99 1f       	adc	r25, r25
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	fc 01       	movw	r30, r24
    28de:	ec 5b       	subi	r30, 0xBC	; 188
    28e0:	fd 4f       	sbci	r31, 0xFD	; 253
    28e2:	80 81       	ld	r24, Z
    28e4:	82 30       	cpi	r24, 0x02	; 2
    28e6:	09 f0       	breq	.+2      	; 0x28ea <DIO_ES_tInit+0x2ce>
    28e8:	9b c0       	rjmp	.+310    	; 0x2a20 <DIO_ES_tInit+0x404>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	9a 81       	ldd	r25, Y+2	; 0x02
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	01 96       	adiw	r24, 0x01	; 1
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	fc 01       	movw	r30, r24
    28fa:	ec 5b       	subi	r30, 0xBC	; 188
    28fc:	fd 4f       	sbci	r31, 0xFD	; 253
    28fe:	80 81       	ld	r24, Z
    2900:	81 30       	cpi	r24, 0x01	; 1
    2902:	e9 f4       	brne	.+58     	; 0x293e <DIO_ES_tInit+0x322>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    2904:	a4 e3       	ldi	r26, 0x34	; 52
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	e4 e3       	ldi	r30, 0x34	; 52
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	48 2f       	mov	r20, r24
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	88 0f       	add	r24, r24
    291a:	99 1f       	adc	r25, r25
    291c:	fc 01       	movw	r30, r24
    291e:	eb 5b       	subi	r30, 0xBB	; 187
    2920:	fd 4f       	sbci	r31, 0xFD	; 253
    2922:	80 81       	ld	r24, Z
    2924:	28 2f       	mov	r18, r24
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	02 2e       	mov	r0, r18
    292e:	02 c0       	rjmp	.+4      	; 0x2934 <DIO_ES_tInit+0x318>
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	0a 94       	dec	r0
    2936:	e2 f7       	brpl	.-8      	; 0x2930 <DIO_ES_tInit+0x314>
    2938:	84 2b       	or	r24, r20
    293a:	8c 93       	st	X, r24
    293c:	17 c1       	rjmp	.+558    	; 0x2b6c <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
    293e:	a4 e3       	ldi	r26, 0x34	; 52
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e4 e3       	ldi	r30, 0x34	; 52
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	48 2f       	mov	r20, r24
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	9a 81       	ldd	r25, Y+2	; 0x02
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	fc 01       	movw	r30, r24
    2958:	eb 5b       	subi	r30, 0xBB	; 187
    295a:	fd 4f       	sbci	r31, 0xFD	; 253
    295c:	80 81       	ld	r24, Z
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	02 2e       	mov	r0, r18
    2968:	02 c0       	rjmp	.+4      	; 0x296e <DIO_ES_tInit+0x352>
    296a:	88 0f       	add	r24, r24
    296c:	99 1f       	adc	r25, r25
    296e:	0a 94       	dec	r0
    2970:	e2 f7       	brpl	.-8      	; 0x296a <DIO_ES_tInit+0x34e>
    2972:	80 95       	com	r24
    2974:	84 23       	and	r24, r20
    2976:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	fc 01       	movw	r30, r24
    2986:	e9 5b       	subi	r30, 0xB9	; 185
    2988:	fd 4f       	sbci	r31, 0xFD	; 253
    298a:	80 81       	ld	r24, Z
    298c:	81 30       	cpi	r24, 0x01	; 1
    298e:	e9 f4       	brne	.+58     	; 0x29ca <DIO_ES_tInit+0x3ae>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
    2990:	a5 e3       	ldi	r26, 0x35	; 53
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e5 e3       	ldi	r30, 0x35	; 53
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	48 2f       	mov	r20, r24
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	9a 81       	ldd	r25, Y+2	; 0x02
    29a0:	88 0f       	add	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	88 0f       	add	r24, r24
    29a6:	99 1f       	adc	r25, r25
    29a8:	fc 01       	movw	r30, r24
    29aa:	eb 5b       	subi	r30, 0xBB	; 187
    29ac:	fd 4f       	sbci	r31, 0xFD	; 253
    29ae:	80 81       	ld	r24, Z
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	02 2e       	mov	r0, r18
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <DIO_ES_tInit+0x3a4>
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	0a 94       	dec	r0
    29c2:	e2 f7       	brpl	.-8      	; 0x29bc <DIO_ES_tInit+0x3a0>
    29c4:	84 2b       	or	r24, r20
    29c6:	8c 93       	st	X, r24
    29c8:	d1 c0       	rjmp	.+418    	; 0x2b6c <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	9a 81       	ldd	r25, Y+2	; 0x02
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	fc 01       	movw	r30, r24
    29d8:	e9 5b       	subi	r30, 0xB9	; 185
    29da:	fd 4f       	sbci	r31, 0xFD	; 253
    29dc:	80 81       	ld	r24, Z
    29de:	88 23       	and	r24, r24
    29e0:	09 f0       	breq	.+2      	; 0x29e4 <DIO_ES_tInit+0x3c8>
    29e2:	c4 c0       	rjmp	.+392    	; 0x2b6c <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    29e4:	ab e3       	ldi	r26, 0x3B	; 59
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	eb e3       	ldi	r30, 0x3B	; 59
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	48 2f       	mov	r20, r24
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	9a 81       	ldd	r25, Y+2	; 0x02
    29f4:	88 0f       	add	r24, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	88 0f       	add	r24, r24
    29fa:	99 1f       	adc	r25, r25
    29fc:	fc 01       	movw	r30, r24
    29fe:	eb 5b       	subi	r30, 0xBB	; 187
    2a00:	fd 4f       	sbci	r31, 0xFD	; 253
    2a02:	80 81       	ld	r24, Z
    2a04:	28 2f       	mov	r18, r24
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	02 2e       	mov	r0, r18
    2a0e:	02 c0       	rjmp	.+4      	; 0x2a14 <DIO_ES_tInit+0x3f8>
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	0a 94       	dec	r0
    2a16:	e2 f7       	brpl	.-8      	; 0x2a10 <DIO_ES_tInit+0x3f4>
    2a18:	80 95       	com	r24
    2a1a:	84 23       	and	r24, r20
    2a1c:	8c 93       	st	X, r24
    2a1e:	a6 c0       	rjmp	.+332    	; 0x2b6c <DIO_ES_tInit+0x550>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	9a 81       	ldd	r25, Y+2	; 0x02
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	ec 5b       	subi	r30, 0xBC	; 188
    2a30:	fd 4f       	sbci	r31, 0xFD	; 253
    2a32:	80 81       	ld	r24, Z
    2a34:	83 30       	cpi	r24, 0x03	; 3
    2a36:	09 f0       	breq	.+2      	; 0x2a3a <DIO_ES_tInit+0x41e>
    2a38:	99 c0       	rjmp	.+306    	; 0x2b6c <DIO_ES_tInit+0x550>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3e:	88 0f       	add	r24, r24
    2a40:	99 1f       	adc	r25, r25
    2a42:	01 96       	adiw	r24, 0x01	; 1
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	fc 01       	movw	r30, r24
    2a4a:	ec 5b       	subi	r30, 0xBC	; 188
    2a4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2a4e:	80 81       	ld	r24, Z
    2a50:	81 30       	cpi	r24, 0x01	; 1
    2a52:	e9 f4       	brne	.+58     	; 0x2a8e <DIO_ES_tInit+0x472>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    2a54:	a1 e3       	ldi	r26, 0x31	; 49
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e1 e3       	ldi	r30, 0x31	; 49
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	48 2f       	mov	r20, r24
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	eb 5b       	subi	r30, 0xBB	; 187
    2a70:	fd 4f       	sbci	r31, 0xFD	; 253
    2a72:	80 81       	ld	r24, Z
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	02 2e       	mov	r0, r18
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <DIO_ES_tInit+0x468>
    2a80:	88 0f       	add	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	0a 94       	dec	r0
    2a86:	e2 f7       	brpl	.-8      	; 0x2a80 <DIO_ES_tInit+0x464>
    2a88:	84 2b       	or	r24, r20
    2a8a:	8c 93       	st	X, r24
    2a8c:	6f c0       	rjmp	.+222    	; 0x2b6c <DIO_ES_tInit+0x550>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
    2a8e:	a1 e3       	ldi	r26, 0x31	; 49
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	e1 e3       	ldi	r30, 0x31	; 49
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	48 2f       	mov	r20, r24
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	eb 5b       	subi	r30, 0xBB	; 187
    2aaa:	fd 4f       	sbci	r31, 0xFD	; 253
    2aac:	80 81       	ld	r24, Z
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	02 2e       	mov	r0, r18
    2ab8:	02 c0       	rjmp	.+4      	; 0x2abe <DIO_ES_tInit+0x4a2>
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	0a 94       	dec	r0
    2ac0:	e2 f7       	brpl	.-8      	; 0x2aba <DIO_ES_tInit+0x49e>
    2ac2:	80 95       	com	r24
    2ac4:	84 23       	and	r24, r20
    2ac6:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	9a 81       	ldd	r25, Y+2	; 0x02
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	e9 5b       	subi	r30, 0xB9	; 185
    2ad8:	fd 4f       	sbci	r31, 0xFD	; 253
    2ada:	80 81       	ld	r24, Z
    2adc:	81 30       	cpi	r24, 0x01	; 1
    2ade:	e9 f4       	brne	.+58     	; 0x2b1a <DIO_ES_tInit+0x4fe>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
    2ae0:	a2 e3       	ldi	r26, 0x32	; 50
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e2 e3       	ldi	r30, 0x32	; 50
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	48 2f       	mov	r20, r24
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	9a 81       	ldd	r25, Y+2	; 0x02
    2af0:	88 0f       	add	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	fc 01       	movw	r30, r24
    2afa:	eb 5b       	subi	r30, 0xBB	; 187
    2afc:	fd 4f       	sbci	r31, 0xFD	; 253
    2afe:	80 81       	ld	r24, Z
    2b00:	28 2f       	mov	r18, r24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	02 2e       	mov	r0, r18
    2b0a:	02 c0       	rjmp	.+4      	; 0x2b10 <DIO_ES_tInit+0x4f4>
    2b0c:	88 0f       	add	r24, r24
    2b0e:	99 1f       	adc	r25, r25
    2b10:	0a 94       	dec	r0
    2b12:	e2 f7       	brpl	.-8      	; 0x2b0c <DIO_ES_tInit+0x4f0>
    2b14:	84 2b       	or	r24, r20
    2b16:	8c 93       	st	X, r24
    2b18:	29 c0       	rjmp	.+82     	; 0x2b6c <DIO_ES_tInit+0x550>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1e:	88 0f       	add	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	88 0f       	add	r24, r24
    2b24:	99 1f       	adc	r25, r25
    2b26:	fc 01       	movw	r30, r24
    2b28:	e9 5b       	subi	r30, 0xB9	; 185
    2b2a:	fd 4f       	sbci	r31, 0xFD	; 253
    2b2c:	80 81       	ld	r24, Z
    2b2e:	88 23       	and	r24, r24
    2b30:	e9 f4       	brne	.+58     	; 0x2b6c <DIO_ES_tInit+0x550>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
    2b32:	ab e3       	ldi	r26, 0x3B	; 59
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	eb e3       	ldi	r30, 0x3B	; 59
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	48 2f       	mov	r20, r24
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	9a 81       	ldd	r25, Y+2	; 0x02
    2b42:	88 0f       	add	r24, r24
    2b44:	99 1f       	adc	r25, r25
    2b46:	88 0f       	add	r24, r24
    2b48:	99 1f       	adc	r25, r25
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	eb 5b       	subi	r30, 0xBB	; 187
    2b4e:	fd 4f       	sbci	r31, 0xFD	; 253
    2b50:	80 81       	ld	r24, Z
    2b52:	28 2f       	mov	r18, r24
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	02 2e       	mov	r0, r18
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <DIO_ES_tInit+0x546>
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	0a 94       	dec	r0
    2b64:	e2 f7       	brpl	.-8      	; 0x2b5e <DIO_ES_tInit+0x542>
    2b66:	80 95       	com	r24
    2b68:	84 23       	and	r24, r20
    2b6a:	8c 93       	st	X, r24


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	9a 83       	std	Y+2, r25	; 0x02
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7a:	8a 31       	cpi	r24, 0x1A	; 26
    2b7c:	91 05       	cpc	r25, r1
    2b7e:	0c f4       	brge	.+2      	; 0x2b82 <DIO_ES_tInit+0x566>
    2b80:	57 cd       	rjmp	.-1362   	; 0x2630 <DIO_ES_tInit+0x14>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
				}
			}
		}
	}
	return ES_OK;
    2b82:	80 e0       	ldi	r24, 0x00	; 0
}
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <Stepper_Init>:

#include "Stepper.h"
#include "StepperCfg.h"

void Stepper_Init(void)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S1, OUTPUT);
    2b96:	82 e0       	ldi	r24, 0x02	; 2
    2b98:	60 e0       	ldi	r22, 0x00	; 0
    2b9a:	41 e0       	ldi	r20, 0x01	; 1
    2b9c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S2, OUTPUT);
    2ba0:	82 e0       	ldi	r24, 0x02	; 2
    2ba2:	65 e0       	ldi	r22, 0x05	; 5
    2ba4:	41 e0       	ldi	r20, 0x01	; 1
    2ba6:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S3, OUTPUT);
    2baa:	82 e0       	ldi	r24, 0x02	; 2
    2bac:	66 e0       	ldi	r22, 0x06	; 6
    2bae:	41 e0       	ldi	r20, 0x01	; 1
    2bb0:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(Stepper_MOTOR_REG, S4, OUTPUT);
    2bb4:	82 e0       	ldi	r24, 0x02	; 2
    2bb6:	67 e0       	ldi	r22, 0x07	; 7
    2bb8:	41 e0       	ldi	r20, 0x01	; 1
    2bba:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    2bbe:	82 e0       	ldi	r24, 0x02	; 2
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	40 e0       	ldi	r20, 0x00	; 0
    2bc4:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    2bc8:	82 e0       	ldi	r24, 0x02	; 2
    2bca:	65 e0       	ldi	r22, 0x05	; 5
    2bcc:	40 e0       	ldi	r20, 0x00	; 0
    2bce:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    2bd2:	82 e0       	ldi	r24, 0x02	; 2
    2bd4:	66 e0       	ldi	r22, 0x06	; 6
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    2bdc:	82 e0       	ldi	r24, 0x02	; 2
    2bde:	67 e0       	ldi	r22, 0x07	; 7
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
}
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <Stepper_Rotate>:


void Stepper_Rotate(u8 degree)
{
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	ef 97       	sbiw	r28, 0x3f	; 63
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	8f af       	std	Y+63, r24	; 0x3f
	u16 stepsNum = (degree * 2048UL)/360;
    2c02:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c04:	88 2f       	mov	r24, r24
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	a0 e0       	ldi	r26, 0x00	; 0
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	07 2e       	mov	r0, r23
    2c0e:	7b e0       	ldi	r23, 0x0B	; 11
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	aa 1f       	adc	r26, r26
    2c16:	bb 1f       	adc	r27, r27
    2c18:	7a 95       	dec	r23
    2c1a:	d1 f7       	brne	.-12     	; 0x2c10 <Stepper_Rotate+0x24>
    2c1c:	70 2d       	mov	r23, r0
    2c1e:	28 e6       	ldi	r18, 0x68	; 104
    2c20:	31 e0       	ldi	r19, 0x01	; 1
    2c22:	40 e0       	ldi	r20, 0x00	; 0
    2c24:	50 e0       	ldi	r21, 0x00	; 0
    2c26:	bc 01       	movw	r22, r24
    2c28:	cd 01       	movw	r24, r26
    2c2a:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__udivmodsi4>
    2c2e:	da 01       	movw	r26, r20
    2c30:	c9 01       	movw	r24, r18
    2c32:	9e af       	std	Y+62, r25	; 0x3e
    2c34:	8d af       	std	Y+61, r24	; 0x3d
	u16 IterationsNum = stepsNum/4;
    2c36:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c38:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c3a:	96 95       	lsr	r25
    2c3c:	87 95       	ror	r24
    2c3e:	96 95       	lsr	r25
    2c40:	87 95       	ror	r24
    2c42:	9c af       	std	Y+60, r25	; 0x3c
    2c44:	8b af       	std	Y+59, r24	; 0x3b

	u16 i=0;
    2c46:	1a ae       	std	Y+58, r1	; 0x3a
    2c48:	19 ae       	std	Y+57, r1	; 0x39
	for(i=0;i<IterationsNum;i++)
    2c4a:	1a ae       	std	Y+58, r1	; 0x3a
    2c4c:	19 ae       	std	Y+57, r1	; 0x39
    2c4e:	1d c2       	rjmp	.+1082   	; 0x308a <Stepper_Rotate+0x49e>
	{
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, HIGH);
    2c50:	82 e0       	ldi	r24, 0x02	; 2
    2c52:	60 e0       	ldi	r22, 0x00	; 0
    2c54:	41 e0       	ldi	r20, 0x01	; 1
    2c56:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    2c5a:	82 e0       	ldi	r24, 0x02	; 2
    2c5c:	65 e0       	ldi	r22, 0x05	; 5
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    2c64:	82 e0       	ldi	r24, 0x02	; 2
    2c66:	66 e0       	ldi	r22, 0x06	; 6
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    2c6e:	82 e0       	ldi	r24, 0x02	; 2
    2c70:	67 e0       	ldi	r22, 0x07	; 7
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a0 ea       	ldi	r26, 0xA0	; 160
    2c7e:	b1 e4       	ldi	r27, 0x41	; 65
    2c80:	8d ab       	std	Y+53, r24	; 0x35
    2c82:	9e ab       	std	Y+54, r25	; 0x36
    2c84:	af ab       	std	Y+55, r26	; 0x37
    2c86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c88:	6d a9       	ldd	r22, Y+53	; 0x35
    2c8a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c8c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c8e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	4a e7       	ldi	r20, 0x7A	; 122
    2c96:	55 e4       	ldi	r21, 0x45	; 69
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	89 ab       	std	Y+49, r24	; 0x31
    2ca2:	9a ab       	std	Y+50, r25	; 0x32
    2ca4:	ab ab       	std	Y+51, r26	; 0x33
    2ca6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ca8:	69 a9       	ldd	r22, Y+49	; 0x31
    2caa:	7a a9       	ldd	r23, Y+50	; 0x32
    2cac:	8b a9       	ldd	r24, Y+51	; 0x33
    2cae:	9c a9       	ldd	r25, Y+52	; 0x34
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <Stepper_Rotate+0xde>
		__ticks = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	98 ab       	std	Y+48, r25	; 0x30
    2cc6:	8f a7       	std	Y+47, r24	; 0x2f
    2cc8:	3f c0       	rjmp	.+126    	; 0x2d48 <Stepper_Rotate+0x15c>
	else if (__tmp > 65535)
    2cca:	69 a9       	ldd	r22, Y+49	; 0x31
    2ccc:	7a a9       	ldd	r23, Y+50	; 0x32
    2cce:	8b a9       	ldd	r24, Y+51	; 0x33
    2cd0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f e7       	ldi	r20, 0x7F	; 127
    2cd8:	57 e4       	ldi	r21, 0x47	; 71
    2cda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	4c f5       	brge	.+82     	; 0x2d34 <Stepper_Rotate+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ce4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ce6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ce8:	98 ad       	ldd	r25, Y+56	; 0x38
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	98 ab       	std	Y+48, r25	; 0x30
    2d08:	8f a7       	std	Y+47, r24	; 0x2f
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <Stepper_Rotate+0x13e>
    2d0c:	80 e9       	ldi	r24, 0x90	; 144
    2d0e:	91 e0       	ldi	r25, 0x01	; 1
    2d10:	9e a7       	std	Y+46, r25	; 0x2e
    2d12:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d14:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d16:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <Stepper_Rotate+0x12c>
    2d1c:	9e a7       	std	Y+46, r25	; 0x2e
    2d1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d22:	98 a9       	ldd	r25, Y+48	; 0x30
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	98 ab       	std	Y+48, r25	; 0x30
    2d28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <Stepper_Rotate+0x120>
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <Stepper_Rotate+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	69 a9       	ldd	r22, Y+49	; 0x31
    2d36:	7a a9       	ldd	r23, Y+50	; 0x32
    2d38:	8b a9       	ldd	r24, Y+51	; 0x33
    2d3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	98 ab       	std	Y+48, r25	; 0x30
    2d46:	8f a7       	std	Y+47, r24	; 0x2f
    2d48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d4c:	9c a7       	std	Y+44, r25	; 0x2c
    2d4e:	8b a7       	std	Y+43, r24	; 0x2b
    2d50:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d52:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <Stepper_Rotate+0x168>
    2d58:	9c a7       	std	Y+44, r25	; 0x2c
    2d5a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    2d5c:	82 e0       	ldi	r24, 0x02	; 2
    2d5e:	60 e0       	ldi	r22, 0x00	; 0
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, HIGH);
    2d66:	82 e0       	ldi	r24, 0x02	; 2
    2d68:	65 e0       	ldi	r22, 0x05	; 5
    2d6a:	41 e0       	ldi	r20, 0x01	; 1
    2d6c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    2d70:	82 e0       	ldi	r24, 0x02	; 2
    2d72:	66 e0       	ldi	r22, 0x06	; 6
    2d74:	40 e0       	ldi	r20, 0x00	; 0
    2d76:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    2d7a:	82 e0       	ldi	r24, 0x02	; 2
    2d7c:	67 e0       	ldi	r22, 0x07	; 7
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	a0 ea       	ldi	r26, 0xA0	; 160
    2d8a:	b1 e4       	ldi	r27, 0x41	; 65
    2d8c:	8f a3       	std	Y+39, r24	; 0x27
    2d8e:	98 a7       	std	Y+40, r25	; 0x28
    2d90:	a9 a7       	std	Y+41, r26	; 0x29
    2d92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d94:	6f a1       	ldd	r22, Y+39	; 0x27
    2d96:	78 a5       	ldd	r23, Y+40	; 0x28
    2d98:	89 a5       	ldd	r24, Y+41	; 0x29
    2d9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	4a e7       	ldi	r20, 0x7A	; 122
    2da2:	55 e4       	ldi	r21, 0x45	; 69
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8b a3       	std	Y+35, r24	; 0x23
    2dae:	9c a3       	std	Y+36, r25	; 0x24
    2db0:	ad a3       	std	Y+37, r26	; 0x25
    2db2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2db4:	6b a1       	ldd	r22, Y+35	; 0x23
    2db6:	7c a1       	ldd	r23, Y+36	; 0x24
    2db8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dba:	9e a1       	ldd	r25, Y+38	; 0x26
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e8       	ldi	r20, 0x80	; 128
    2dc2:	5f e3       	ldi	r21, 0x3F	; 63
    2dc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc8:	88 23       	and	r24, r24
    2dca:	2c f4       	brge	.+10     	; 0x2dd6 <Stepper_Rotate+0x1ea>
		__ticks = 1;
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	9a a3       	std	Y+34, r25	; 0x22
    2dd2:	89 a3       	std	Y+33, r24	; 0x21
    2dd4:	3f c0       	rjmp	.+126    	; 0x2e54 <Stepper_Rotate+0x268>
	else if (__tmp > 65535)
    2dd6:	6b a1       	ldd	r22, Y+35	; 0x23
    2dd8:	7c a1       	ldd	r23, Y+36	; 0x24
    2dda:	8d a1       	ldd	r24, Y+37	; 0x25
    2ddc:	9e a1       	ldd	r25, Y+38	; 0x26
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	3f ef       	ldi	r19, 0xFF	; 255
    2de2:	4f e7       	ldi	r20, 0x7F	; 127
    2de4:	57 e4       	ldi	r21, 0x47	; 71
    2de6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dea:	18 16       	cp	r1, r24
    2dec:	4c f5       	brge	.+82     	; 0x2e40 <Stepper_Rotate+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dee:	6f a1       	ldd	r22, Y+39	; 0x27
    2df0:	78 a5       	ldd	r23, Y+40	; 0x28
    2df2:	89 a5       	ldd	r24, Y+41	; 0x29
    2df4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e2       	ldi	r20, 0x20	; 32
    2dfc:	51 e4       	ldi	r21, 0x41	; 65
    2dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	bc 01       	movw	r22, r24
    2e08:	cd 01       	movw	r24, r26
    2e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	9a a3       	std	Y+34, r25	; 0x22
    2e14:	89 a3       	std	Y+33, r24	; 0x21
    2e16:	0f c0       	rjmp	.+30     	; 0x2e36 <Stepper_Rotate+0x24a>
    2e18:	80 e9       	ldi	r24, 0x90	; 144
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	98 a3       	std	Y+32, r25	; 0x20
    2e1e:	8f 8f       	std	Y+31, r24	; 0x1f
    2e20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e22:	98 a1       	ldd	r25, Y+32	; 0x20
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <Stepper_Rotate+0x238>
    2e28:	98 a3       	std	Y+32, r25	; 0x20
    2e2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	9a a3       	std	Y+34, r25	; 0x22
    2e34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e36:	89 a1       	ldd	r24, Y+33	; 0x21
    2e38:	9a a1       	ldd	r25, Y+34	; 0x22
    2e3a:	00 97       	sbiw	r24, 0x00	; 0
    2e3c:	69 f7       	brne	.-38     	; 0x2e18 <Stepper_Rotate+0x22c>
    2e3e:	14 c0       	rjmp	.+40     	; 0x2e68 <Stepper_Rotate+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e40:	6b a1       	ldd	r22, Y+35	; 0x23
    2e42:	7c a1       	ldd	r23, Y+36	; 0x24
    2e44:	8d a1       	ldd	r24, Y+37	; 0x25
    2e46:	9e a1       	ldd	r25, Y+38	; 0x26
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	9a a3       	std	Y+34, r25	; 0x22
    2e52:	89 a3       	std	Y+33, r24	; 0x21
    2e54:	89 a1       	ldd	r24, Y+33	; 0x21
    2e56:	9a a1       	ldd	r25, Y+34	; 0x22
    2e58:	9e 8f       	std	Y+30, r25	; 0x1e
    2e5a:	8d 8f       	std	Y+29, r24	; 0x1d
    2e5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <Stepper_Rotate+0x274>
    2e64:	9e 8f       	std	Y+30, r25	; 0x1e
    2e66:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    2e68:	82 e0       	ldi	r24, 0x02	; 2
    2e6a:	60 e0       	ldi	r22, 0x00	; 0
    2e6c:	40 e0       	ldi	r20, 0x00	; 0
    2e6e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    2e72:	82 e0       	ldi	r24, 0x02	; 2
    2e74:	65 e0       	ldi	r22, 0x05	; 5
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, HIGH);
    2e7c:	82 e0       	ldi	r24, 0x02	; 2
    2e7e:	66 e0       	ldi	r22, 0x06	; 6
    2e80:	41 e0       	ldi	r20, 0x01	; 1
    2e82:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, LOW);
    2e86:	82 e0       	ldi	r24, 0x02	; 2
    2e88:	67 e0       	ldi	r22, 0x07	; 7
    2e8a:	40 e0       	ldi	r20, 0x00	; 0
    2e8c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	a0 ea       	ldi	r26, 0xA0	; 160
    2e96:	b1 e4       	ldi	r27, 0x41	; 65
    2e98:	89 8f       	std	Y+25, r24	; 0x19
    2e9a:	9a 8f       	std	Y+26, r25	; 0x1a
    2e9c:	ab 8f       	std	Y+27, r26	; 0x1b
    2e9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ea2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ea4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ea6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	4a e7       	ldi	r20, 0x7A	; 122
    2eae:	55 e4       	ldi	r21, 0x45	; 69
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	8d 8b       	std	Y+21, r24	; 0x15
    2eba:	9e 8b       	std	Y+22, r25	; 0x16
    2ebc:	af 8b       	std	Y+23, r26	; 0x17
    2ebe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ec0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e8       	ldi	r20, 0x80	; 128
    2ece:	5f e3       	ldi	r21, 0x3F	; 63
    2ed0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed4:	88 23       	and	r24, r24
    2ed6:	2c f4       	brge	.+10     	; 0x2ee2 <Stepper_Rotate+0x2f6>
		__ticks = 1;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	9c 8b       	std	Y+20, r25	; 0x14
    2ede:	8b 8b       	std	Y+19, r24	; 0x13
    2ee0:	3f c0       	rjmp	.+126    	; 0x2f60 <Stepper_Rotate+0x374>
	else if (__tmp > 65535)
    2ee2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ee8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	3f ef       	ldi	r19, 0xFF	; 255
    2eee:	4f e7       	ldi	r20, 0x7F	; 127
    2ef0:	57 e4       	ldi	r21, 0x47	; 71
    2ef2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef6:	18 16       	cp	r1, r24
    2ef8:	4c f5       	brge	.+82     	; 0x2f4c <Stepper_Rotate+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efa:	69 8d       	ldd	r22, Y+25	; 0x19
    2efc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2efe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	40 e2       	ldi	r20, 0x20	; 32
    2f08:	51 e4       	ldi	r21, 0x41	; 65
    2f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	9c 8b       	std	Y+20, r25	; 0x14
    2f20:	8b 8b       	std	Y+19, r24	; 0x13
    2f22:	0f c0       	rjmp	.+30     	; 0x2f42 <Stepper_Rotate+0x356>
    2f24:	80 e9       	ldi	r24, 0x90	; 144
    2f26:	91 e0       	ldi	r25, 0x01	; 1
    2f28:	9a 8b       	std	Y+18, r25	; 0x12
    2f2a:	89 8b       	std	Y+17, r24	; 0x11
    2f2c:	89 89       	ldd	r24, Y+17	; 0x11
    2f2e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <Stepper_Rotate+0x344>
    2f34:	9a 8b       	std	Y+18, r25	; 0x12
    2f36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f38:	8b 89       	ldd	r24, Y+19	; 0x13
    2f3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	9c 8b       	std	Y+20, r25	; 0x14
    2f40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f42:	8b 89       	ldd	r24, Y+19	; 0x13
    2f44:	9c 89       	ldd	r25, Y+20	; 0x14
    2f46:	00 97       	sbiw	r24, 0x00	; 0
    2f48:	69 f7       	brne	.-38     	; 0x2f24 <Stepper_Rotate+0x338>
    2f4a:	14 c0       	rjmp	.+40     	; 0x2f74 <Stepper_Rotate+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f50:	8f 89       	ldd	r24, Y+23	; 0x17
    2f52:	98 8d       	ldd	r25, Y+24	; 0x18
    2f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	9c 8b       	std	Y+20, r25	; 0x14
    2f5e:	8b 8b       	std	Y+19, r24	; 0x13
    2f60:	8b 89       	ldd	r24, Y+19	; 0x13
    2f62:	9c 89       	ldd	r25, Y+20	; 0x14
    2f64:	98 8b       	std	Y+16, r25	; 0x10
    2f66:	8f 87       	std	Y+15, r24	; 0x0f
    2f68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f6a:	98 89       	ldd	r25, Y+16	; 0x10
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <Stepper_Rotate+0x380>
    2f70:	98 8b       	std	Y+16, r25	; 0x10
    2f72:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S1, LOW);
    2f74:	82 e0       	ldi	r24, 0x02	; 2
    2f76:	60 e0       	ldi	r22, 0x00	; 0
    2f78:	40 e0       	ldi	r20, 0x00	; 0
    2f7a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S2, LOW);
    2f7e:	82 e0       	ldi	r24, 0x02	; 2
    2f80:	65 e0       	ldi	r22, 0x05	; 5
    2f82:	40 e0       	ldi	r20, 0x00	; 0
    2f84:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S3, LOW);
    2f88:	82 e0       	ldi	r24, 0x02	; 2
    2f8a:	66 e0       	ldi	r22, 0x06	; 6
    2f8c:	40 e0       	ldi	r20, 0x00	; 0
    2f8e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(Stepper_MOTOR_REG, S4, HIGH);
    2f92:	82 e0       	ldi	r24, 0x02	; 2
    2f94:	67 e0       	ldi	r22, 0x07	; 7
    2f96:	41 e0       	ldi	r20, 0x01	; 1
    2f98:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	a0 ea       	ldi	r26, 0xA0	; 160
    2fa2:	b1 e4       	ldi	r27, 0x41	; 65
    2fa4:	8b 87       	std	Y+11, r24	; 0x0b
    2fa6:	9c 87       	std	Y+12, r25	; 0x0c
    2fa8:	ad 87       	std	Y+13, r26	; 0x0d
    2faa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	4a e7       	ldi	r20, 0x7A	; 122
    2fba:	55 e4       	ldi	r21, 0x45	; 69
    2fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	8f 83       	std	Y+7, r24	; 0x07
    2fc6:	98 87       	std	Y+8, r25	; 0x08
    2fc8:	a9 87       	std	Y+9, r26	; 0x09
    2fca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fce:	78 85       	ldd	r23, Y+8	; 0x08
    2fd0:	89 85       	ldd	r24, Y+9	; 0x09
    2fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e8       	ldi	r20, 0x80	; 128
    2fda:	5f e3       	ldi	r21, 0x3F	; 63
    2fdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fe0:	88 23       	and	r24, r24
    2fe2:	2c f4       	brge	.+10     	; 0x2fee <Stepper_Rotate+0x402>
		__ticks = 1;
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	9e 83       	std	Y+6, r25	; 0x06
    2fea:	8d 83       	std	Y+5, r24	; 0x05
    2fec:	3f c0       	rjmp	.+126    	; 0x306c <Stepper_Rotate+0x480>
	else if (__tmp > 65535)
    2fee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff0:	78 85       	ldd	r23, Y+8	; 0x08
    2ff2:	89 85       	ldd	r24, Y+9	; 0x09
    2ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	3f ef       	ldi	r19, 0xFF	; 255
    2ffa:	4f e7       	ldi	r20, 0x7F	; 127
    2ffc:	57 e4       	ldi	r21, 0x47	; 71
    2ffe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3002:	18 16       	cp	r1, r24
    3004:	4c f5       	brge	.+82     	; 0x3058 <Stepper_Rotate+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3006:	6b 85       	ldd	r22, Y+11	; 0x0b
    3008:	7c 85       	ldd	r23, Y+12	; 0x0c
    300a:	8d 85       	ldd	r24, Y+13	; 0x0d
    300c:	9e 85       	ldd	r25, Y+14	; 0x0e
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	40 e2       	ldi	r20, 0x20	; 32
    3014:	51 e4       	ldi	r21, 0x41	; 65
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	bc 01       	movw	r22, r24
    3020:	cd 01       	movw	r24, r26
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	9e 83       	std	Y+6, r25	; 0x06
    302c:	8d 83       	std	Y+5, r24	; 0x05
    302e:	0f c0       	rjmp	.+30     	; 0x304e <Stepper_Rotate+0x462>
    3030:	80 e9       	ldi	r24, 0x90	; 144
    3032:	91 e0       	ldi	r25, 0x01	; 1
    3034:	9c 83       	std	Y+4, r25	; 0x04
    3036:	8b 83       	std	Y+3, r24	; 0x03
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	9c 81       	ldd	r25, Y+4	; 0x04
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <Stepper_Rotate+0x450>
    3040:	9c 83       	std	Y+4, r25	; 0x04
    3042:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3044:	8d 81       	ldd	r24, Y+5	; 0x05
    3046:	9e 81       	ldd	r25, Y+6	; 0x06
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	9e 83       	std	Y+6, r25	; 0x06
    304c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304e:	8d 81       	ldd	r24, Y+5	; 0x05
    3050:	9e 81       	ldd	r25, Y+6	; 0x06
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	69 f7       	brne	.-38     	; 0x3030 <Stepper_Rotate+0x444>
    3056:	14 c0       	rjmp	.+40     	; 0x3080 <Stepper_Rotate+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3058:	6f 81       	ldd	r22, Y+7	; 0x07
    305a:	78 85       	ldd	r23, Y+8	; 0x08
    305c:	89 85       	ldd	r24, Y+9	; 0x09
    305e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	9e 83       	std	Y+6, r25	; 0x06
    306a:	8d 83       	std	Y+5, r24	; 0x05
    306c:	8d 81       	ldd	r24, Y+5	; 0x05
    306e:	9e 81       	ldd	r25, Y+6	; 0x06
    3070:	9a 83       	std	Y+2, r25	; 0x02
    3072:	89 83       	std	Y+1, r24	; 0x01
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	9a 81       	ldd	r25, Y+2	; 0x02
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <Stepper_Rotate+0x48c>
    307c:	9a 83       	std	Y+2, r25	; 0x02
    307e:	89 83       	std	Y+1, r24	; 0x01
{
	u16 stepsNum = (degree * 2048UL)/360;
	u16 IterationsNum = stepsNum/4;

	u16 i=0;
	for(i=0;i<IterationsNum;i++)
    3080:	89 ad       	ldd	r24, Y+57	; 0x39
    3082:	9a ad       	ldd	r25, Y+58	; 0x3a
    3084:	01 96       	adiw	r24, 0x01	; 1
    3086:	9a af       	std	Y+58, r25	; 0x3a
    3088:	89 af       	std	Y+57, r24	; 0x39
    308a:	29 ad       	ldd	r18, Y+57	; 0x39
    308c:	3a ad       	ldd	r19, Y+58	; 0x3a
    308e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3090:	9c ad       	ldd	r25, Y+60	; 0x3c
    3092:	28 17       	cp	r18, r24
    3094:	39 07       	cpc	r19, r25
    3096:	08 f4       	brcc	.+2      	; 0x309a <Stepper_Rotate+0x4ae>
    3098:	db cd       	rjmp	.-1098   	; 0x2c50 <Stepper_Rotate+0x64>
		_delay_ms(20);
	}



}
    309a:	ef 96       	adiw	r28, 0x3f	; 63
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <Servo_Init>:

TIMER1_Config_t Timer1Cfg = {0};


void Servo_Init(void)
{
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62


	Timer1Cfg.mode = TIMER1_FAST_PWM_ICR1_TOP;
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	80 93 e4 02 	sts	0x02E4, r24
	Timer1Cfg.prescalar = TIMER1_PRESCALAR_64;
    30ba:	83 e0       	ldi	r24, 0x03	; 3
    30bc:	80 93 e5 02 	sts	0x02E5, r24
	Timer1Cfg.OC1A_mode = OCRA_NON_INVERTING;
    30c0:	82 e0       	ldi	r24, 0x02	; 2
    30c2:	80 93 e6 02 	sts	0x02E6, r24
	Timer1Cfg.OC1B_mode = OCRB_DISCONNECTED;
    30c6:	10 92 e7 02 	sts	0x02E7, r1
	TIMER1_Init(&Timer1Cfg);
    30ca:	84 ee       	ldi	r24, 0xE4	; 228
    30cc:	92 e0       	ldi	r25, 0x02	; 2
    30ce:	0e 94 41 0a 	call	0x1482	; 0x1482 <TIMER1_Init>



}
    30d2:	cf 91       	pop	r28
    30d4:	df 91       	pop	r29
    30d6:	08 95       	ret

000030d8 <Servo_Turn>:



// From 0 to 180
void Servo_Turn(int angle)
{
    30d8:	df 93       	push	r29
    30da:	cf 93       	push	r28
    30dc:	00 d0       	rcall	.+0      	; 0x30de <Servo_Turn+0x6>
    30de:	00 d0       	rcall	.+0      	; 0x30e0 <Servo_Turn+0x8>
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <Servo_Turn+0xa>
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
//	DIO_ES_tSetPinDirection(DIO_U8_PORT_D, DIO_U8_PIN_5, OUTPUT);

	// Calculate the pulse width based on the desired angle
	u16 pulse_width_microseconds = 1500 + ((angle / 180.0) * 1000);
    30ea:	8d 81       	ldd	r24, Y+5	; 0x05
    30ec:	9e 81       	ldd	r25, Y+6	; 0x06
    30ee:	aa 27       	eor	r26, r26
    30f0:	97 fd       	sbrc	r25, 7
    30f2:	a0 95       	com	r26
    30f4:	ba 2f       	mov	r27, r26
    30f6:	bc 01       	movw	r22, r24
    30f8:	cd 01       	movw	r24, r26
    30fa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	bc 01       	movw	r22, r24
    3104:	cd 01       	movw	r24, r26
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	44 e3       	ldi	r20, 0x34	; 52
    310c:	53 e4       	ldi	r21, 0x43	; 67
    310e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	bc 01       	movw	r22, r24
    3118:	cd 01       	movw	r24, r26
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	4a e7       	ldi	r20, 0x7A	; 122
    3120:	54 e4       	ldi	r21, 0x44	; 68
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	bc 01       	movw	r22, r24
    312c:	cd 01       	movw	r24, r26
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e8       	ldi	r19, 0x80	; 128
    3132:	4b eb       	ldi	r20, 0xBB	; 187
    3134:	54 e4       	ldi	r21, 0x44	; 68
    3136:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	9c 83       	std	Y+4, r25	; 0x04
    314c:	8b 83       	std	Y+3, r24	; 0x03
	u16 pulse_width_counts = pulse_width_microseconds / 4; // Timer 1 resolution prescaler is 64
    314e:	8b 81       	ldd	r24, Y+3	; 0x03
    3150:	9c 81       	ldd	r25, Y+4	; 0x04
    3152:	96 95       	lsr	r25
    3154:	87 95       	ror	r24
    3156:	96 95       	lsr	r25
    3158:	87 95       	ror	r24
    315a:	9a 83       	std	Y+2, r25	; 0x02
    315c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = pulse_width_counts - 1;
    315e:	ea e4       	ldi	r30, 0x4A	; 74
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	9a 81       	ldd	r25, Y+2	; 0x02
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	91 83       	std	Z+1, r25	; 0x01
    316a:	80 83       	st	Z, r24
	ICR1 = 4999;			// 20 ms in data sheet of servo
    316c:	e6 e4       	ldi	r30, 0x46	; 70
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	87 e8       	ldi	r24, 0x87	; 135
    3172:	93 e1       	ldi	r25, 0x13	; 19
    3174:	91 83       	std	Z+1, r25	; 0x01
    3176:	80 83       	st	Z, r24


	SET_BIT(TCCR1A,COM1A1);
    3178:	af e4       	ldi	r26, 0x4F	; 79
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	ef e4       	ldi	r30, 0x4F	; 79
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	80 68       	ori	r24, 0x80	; 128
    3184:	8c 93       	st	X, r24
	Servo_Init();
    3186:	0e 94 56 18 	call	0x30ac	; 0x30ac <Servo_Init>



	// Limit the angle to the range -90 to +90 degrees
	if (angle < -90)
    318a:	8d 81       	ldd	r24, Y+5	; 0x05
    318c:	9e 81       	ldd	r25, Y+6	; 0x06
    318e:	2f ef       	ldi	r18, 0xFF	; 255
    3190:	86 3a       	cpi	r24, 0xA6	; 166
    3192:	92 07       	cpc	r25, r18
    3194:	2c f4       	brge	.+10     	; 0x31a0 <Servo_Turn+0xc8>
		angle = -90;
    3196:	86 ea       	ldi	r24, 0xA6	; 166
    3198:	9f ef       	ldi	r25, 0xFF	; 255
    319a:	9e 83       	std	Y+6, r25	; 0x06
    319c:	8d 83       	std	Y+5, r24	; 0x05
    319e:	09 c0       	rjmp	.+18     	; 0x31b2 <Servo_Turn+0xda>
	else if (angle > 90)
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	8b 35       	cpi	r24, 0x5B	; 91
    31a6:	91 05       	cpc	r25, r1
    31a8:	24 f0       	brlt	.+8      	; 0x31b2 <Servo_Turn+0xda>
		angle = 90;
    31aa:	8a e5       	ldi	r24, 0x5A	; 90
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	9e 83       	std	Y+6, r25	; 0x06
    31b0:	8d 83       	std	Y+5, r24	; 0x05




}
    31b2:	26 96       	adiw	r28, 0x06	; 6
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	de bf       	out	0x3e, r29	; 62
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	cd bf       	out	0x3d, r28	; 61
    31be:	cf 91       	pop	r28
    31c0:	df 91       	pop	r29
    31c2:	08 95       	ret

000031c4 <Servo_Stop>:

void Servo_Stop()
{
    31c4:	df 93       	push	r29
    31c6:	cf 93       	push	r28
    31c8:	cd b7       	in	r28, 0x3d	; 61
    31ca:	de b7       	in	r29, 0x3e	; 62
	// Disable the OC1A interrupt
	TIMER1_Stop();
    31cc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <TIMER1_Stop>
}
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret

000031d6 <LCD_ES_tTrigger_Enable>:
//ProtoType of static is defined in source file itself(Private declaration)
static ES_t LCD_ES_tTrigger_Enable(void);
static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column);

//We make it static cuz we won't use it anywhere but here
static ES_t LCD_ES_tTrigger_Enable(void){
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
    31de:	e0 97       	sbiw	r28, 0x30	; 48
    31e0:	0f b6       	in	r0, 0x3f	; 63
    31e2:	f8 94       	cli
    31e4:	de bf       	out	0x3e, r29	; 62
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	60 e0       	ldi	r22, 0x00	; 0
    31ee:	41 e0       	ldi	r20, 0x01	; 1
    31f0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	a0 e2       	ldi	r26, 0x20	; 32
    31fa:	b1 e4       	ldi	r27, 0x41	; 65
    31fc:	8d a7       	std	Y+45, r24	; 0x2d
    31fe:	9e a7       	std	Y+46, r25	; 0x2e
    3200:	af a7       	std	Y+47, r26	; 0x2f
    3202:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3204:	6d a5       	ldd	r22, Y+45	; 0x2d
    3206:	7e a5       	ldd	r23, Y+46	; 0x2e
    3208:	8f a5       	ldd	r24, Y+47	; 0x2f
    320a:	98 a9       	ldd	r25, Y+48	; 0x30
    320c:	2b ea       	ldi	r18, 0xAB	; 171
    320e:	3a ea       	ldi	r19, 0xAA	; 170
    3210:	4a ea       	ldi	r20, 0xAA	; 170
    3212:	50 e4       	ldi	r21, 0x40	; 64
    3214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	89 a7       	std	Y+41, r24	; 0x29
    321e:	9a a7       	std	Y+42, r25	; 0x2a
    3220:	ab a7       	std	Y+43, r26	; 0x2b
    3222:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3224:	69 a5       	ldd	r22, Y+41	; 0x29
    3226:	7a a5       	ldd	r23, Y+42	; 0x2a
    3228:	8b a5       	ldd	r24, Y+43	; 0x2b
    322a:	9c a5       	ldd	r25, Y+44	; 0x2c
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e8       	ldi	r20, 0x80	; 128
    3232:	5f e3       	ldi	r21, 0x3F	; 63
    3234:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3238:	88 23       	and	r24, r24
    323a:	1c f4       	brge	.+6      	; 0x3242 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	88 a7       	std	Y+40, r24	; 0x28
    3240:	91 c0       	rjmp	.+290    	; 0x3364 <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    3242:	69 a5       	ldd	r22, Y+41	; 0x29
    3244:	7a a5       	ldd	r23, Y+42	; 0x2a
    3246:	8b a5       	ldd	r24, Y+43	; 0x2b
    3248:	9c a5       	ldd	r25, Y+44	; 0x2c
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	4f e7       	ldi	r20, 0x7F	; 127
    3250:	53 e4       	ldi	r21, 0x43	; 67
    3252:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3256:	18 16       	cp	r1, r24
    3258:	0c f0       	brlt	.+2      	; 0x325c <LCD_ES_tTrigger_Enable+0x86>
    325a:	7b c0       	rjmp	.+246    	; 0x3352 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    325c:	6d a5       	ldd	r22, Y+45	; 0x2d
    325e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3260:	8f a5       	ldd	r24, Y+47	; 0x2f
    3262:	98 a9       	ldd	r25, Y+48	; 0x30
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	4a e7       	ldi	r20, 0x7A	; 122
    326a:	54 e4       	ldi	r21, 0x44	; 68
    326c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	8c a3       	std	Y+36, r24	; 0x24
    3276:	9d a3       	std	Y+37, r25	; 0x25
    3278:	ae a3       	std	Y+38, r26	; 0x26
    327a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327c:	6c a1       	ldd	r22, Y+36	; 0x24
    327e:	7d a1       	ldd	r23, Y+37	; 0x25
    3280:	8e a1       	ldd	r24, Y+38	; 0x26
    3282:	9f a1       	ldd	r25, Y+39	; 0x27
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	4a e7       	ldi	r20, 0x7A	; 122
    328a:	55 e4       	ldi	r21, 0x45	; 69
    328c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	88 a3       	std	Y+32, r24	; 0x20
    3296:	99 a3       	std	Y+33, r25	; 0x21
    3298:	aa a3       	std	Y+34, r26	; 0x22
    329a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    329c:	68 a1       	ldd	r22, Y+32	; 0x20
    329e:	79 a1       	ldd	r23, Y+33	; 0x21
    32a0:	8a a1       	ldd	r24, Y+34	; 0x22
    32a2:	9b a1       	ldd	r25, Y+35	; 0x23
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	40 e8       	ldi	r20, 0x80	; 128
    32aa:	5f e3       	ldi	r21, 0x3F	; 63
    32ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32b0:	88 23       	and	r24, r24
    32b2:	2c f4       	brge	.+10     	; 0x32be <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	9f 8f       	std	Y+31, r25	; 0x1f
    32ba:	8e 8f       	std	Y+30, r24	; 0x1e
    32bc:	3f c0       	rjmp	.+126    	; 0x333c <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    32be:	68 a1       	ldd	r22, Y+32	; 0x20
    32c0:	79 a1       	ldd	r23, Y+33	; 0x21
    32c2:	8a a1       	ldd	r24, Y+34	; 0x22
    32c4:	9b a1       	ldd	r25, Y+35	; 0x23
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	3f ef       	ldi	r19, 0xFF	; 255
    32ca:	4f e7       	ldi	r20, 0x7F	; 127
    32cc:	57 e4       	ldi	r21, 0x47	; 71
    32ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d2:	18 16       	cp	r1, r24
    32d4:	4c f5       	brge	.+82     	; 0x3328 <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d6:	6c a1       	ldd	r22, Y+36	; 0x24
    32d8:	7d a1       	ldd	r23, Y+37	; 0x25
    32da:	8e a1       	ldd	r24, Y+38	; 0x26
    32dc:	9f a1       	ldd	r25, Y+39	; 0x27
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	40 e2       	ldi	r20, 0x20	; 32
    32e4:	51 e4       	ldi	r21, 0x41	; 65
    32e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	bc 01       	movw	r22, r24
    32f0:	cd 01       	movw	r24, r26
    32f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	9f 8f       	std	Y+31, r25	; 0x1f
    32fc:	8e 8f       	std	Y+30, r24	; 0x1e
    32fe:	0f c0       	rjmp	.+30     	; 0x331e <LCD_ES_tTrigger_Enable+0x148>
    3300:	80 e9       	ldi	r24, 0x90	; 144
    3302:	91 e0       	ldi	r25, 0x01	; 1
    3304:	9d 8f       	std	Y+29, r25	; 0x1d
    3306:	8c 8f       	std	Y+28, r24	; 0x1c
    3308:	8c 8d       	ldd	r24, Y+28	; 0x1c
    330a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	f1 f7       	brne	.-4      	; 0x330c <LCD_ES_tTrigger_Enable+0x136>
    3310:	9d 8f       	std	Y+29, r25	; 0x1d
    3312:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3314:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3316:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3318:	01 97       	sbiw	r24, 0x01	; 1
    331a:	9f 8f       	std	Y+31, r25	; 0x1f
    331c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3320:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3322:	00 97       	sbiw	r24, 0x00	; 0
    3324:	69 f7       	brne	.-38     	; 0x3300 <LCD_ES_tTrigger_Enable+0x12a>
    3326:	24 c0       	rjmp	.+72     	; 0x3370 <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3328:	68 a1       	ldd	r22, Y+32	; 0x20
    332a:	79 a1       	ldd	r23, Y+33	; 0x21
    332c:	8a a1       	ldd	r24, Y+34	; 0x22
    332e:	9b a1       	ldd	r25, Y+35	; 0x23
    3330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	9f 8f       	std	Y+31, r25	; 0x1f
    333a:	8e 8f       	std	Y+30, r24	; 0x1e
    333c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    333e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3340:	9b 8f       	std	Y+27, r25	; 0x1b
    3342:	8a 8f       	std	Y+26, r24	; 0x1a
    3344:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3346:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	f1 f7       	brne	.-4      	; 0x3348 <LCD_ES_tTrigger_Enable+0x172>
    334c:	9b 8f       	std	Y+27, r25	; 0x1b
    334e:	8a 8f       	std	Y+26, r24	; 0x1a
    3350:	0f c0       	rjmp	.+30     	; 0x3370 <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3352:	69 a5       	ldd	r22, Y+41	; 0x29
    3354:	7a a5       	ldd	r23, Y+42	; 0x2a
    3356:	8b a5       	ldd	r24, Y+43	; 0x2b
    3358:	9c a5       	ldd	r25, Y+44	; 0x2c
    335a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	88 a7       	std	Y+40, r24	; 0x28
    3364:	88 a5       	ldd	r24, Y+40	; 0x28
    3366:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3368:	89 8d       	ldd	r24, Y+25	; 0x19
    336a:	8a 95       	dec	r24
    336c:	f1 f7       	brne	.-4      	; 0x336a <LCD_ES_tTrigger_Enable+0x194>
    336e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	60 e0       	ldi	r22, 0x00	; 0
    3374:	40 e0       	ldi	r20, 0x00	; 0
    3376:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	aa ef       	ldi	r26, 0xFA	; 250
    3380:	b4 e4       	ldi	r27, 0x44	; 68
    3382:	8d 8b       	std	Y+21, r24	; 0x15
    3384:	9e 8b       	std	Y+22, r25	; 0x16
    3386:	af 8b       	std	Y+23, r26	; 0x17
    3388:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    338a:	6d 89       	ldd	r22, Y+21	; 0x15
    338c:	7e 89       	ldd	r23, Y+22	; 0x16
    338e:	8f 89       	ldd	r24, Y+23	; 0x17
    3390:	98 8d       	ldd	r25, Y+24	; 0x18
    3392:	2b ea       	ldi	r18, 0xAB	; 171
    3394:	3a ea       	ldi	r19, 0xAA	; 170
    3396:	4a ea       	ldi	r20, 0xAA	; 170
    3398:	50 e4       	ldi	r21, 0x40	; 64
    339a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	89 8b       	std	Y+17, r24	; 0x11
    33a4:	9a 8b       	std	Y+18, r25	; 0x12
    33a6:	ab 8b       	std	Y+19, r26	; 0x13
    33a8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    33aa:	69 89       	ldd	r22, Y+17	; 0x11
    33ac:	7a 89       	ldd	r23, Y+18	; 0x12
    33ae:	8b 89       	ldd	r24, Y+19	; 0x13
    33b0:	9c 89       	ldd	r25, Y+20	; 0x14
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e8       	ldi	r20, 0x80	; 128
    33b8:	5f e3       	ldi	r21, 0x3F	; 63
    33ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33be:	88 23       	and	r24, r24
    33c0:	1c f4       	brge	.+6      	; 0x33c8 <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	88 8b       	std	Y+16, r24	; 0x10
    33c6:	91 c0       	rjmp	.+290    	; 0x34ea <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    33c8:	69 89       	ldd	r22, Y+17	; 0x11
    33ca:	7a 89       	ldd	r23, Y+18	; 0x12
    33cc:	8b 89       	ldd	r24, Y+19	; 0x13
    33ce:	9c 89       	ldd	r25, Y+20	; 0x14
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	4f e7       	ldi	r20, 0x7F	; 127
    33d6:	53 e4       	ldi	r21, 0x43	; 67
    33d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33dc:	18 16       	cp	r1, r24
    33de:	0c f0       	brlt	.+2      	; 0x33e2 <LCD_ES_tTrigger_Enable+0x20c>
    33e0:	7b c0       	rjmp	.+246    	; 0x34d8 <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    33e2:	6d 89       	ldd	r22, Y+21	; 0x15
    33e4:	7e 89       	ldd	r23, Y+22	; 0x16
    33e6:	8f 89       	ldd	r24, Y+23	; 0x17
    33e8:	98 8d       	ldd	r25, Y+24	; 0x18
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	4a e7       	ldi	r20, 0x7A	; 122
    33f0:	54 e4       	ldi	r21, 0x44	; 68
    33f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	8c 87       	std	Y+12, r24	; 0x0c
    33fc:	9d 87       	std	Y+13, r25	; 0x0d
    33fe:	ae 87       	std	Y+14, r26	; 0x0e
    3400:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3402:	6c 85       	ldd	r22, Y+12	; 0x0c
    3404:	7d 85       	ldd	r23, Y+13	; 0x0d
    3406:	8e 85       	ldd	r24, Y+14	; 0x0e
    3408:	9f 85       	ldd	r25, Y+15	; 0x0f
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	4a e7       	ldi	r20, 0x7A	; 122
    3410:	55 e4       	ldi	r21, 0x45	; 69
    3412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	88 87       	std	Y+8, r24	; 0x08
    341c:	99 87       	std	Y+9, r25	; 0x09
    341e:	aa 87       	std	Y+10, r26	; 0x0a
    3420:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3422:	68 85       	ldd	r22, Y+8	; 0x08
    3424:	79 85       	ldd	r23, Y+9	; 0x09
    3426:	8a 85       	ldd	r24, Y+10	; 0x0a
    3428:	9b 85       	ldd	r25, Y+11	; 0x0b
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	40 e8       	ldi	r20, 0x80	; 128
    3430:	5f e3       	ldi	r21, 0x3F	; 63
    3432:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3436:	88 23       	and	r24, r24
    3438:	2c f4       	brge	.+10     	; 0x3444 <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	9f 83       	std	Y+7, r25	; 0x07
    3440:	8e 83       	std	Y+6, r24	; 0x06
    3442:	3f c0       	rjmp	.+126    	; 0x34c2 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    3444:	68 85       	ldd	r22, Y+8	; 0x08
    3446:	79 85       	ldd	r23, Y+9	; 0x09
    3448:	8a 85       	ldd	r24, Y+10	; 0x0a
    344a:	9b 85       	ldd	r25, Y+11	; 0x0b
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	3f ef       	ldi	r19, 0xFF	; 255
    3450:	4f e7       	ldi	r20, 0x7F	; 127
    3452:	57 e4       	ldi	r21, 0x47	; 71
    3454:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3458:	18 16       	cp	r1, r24
    345a:	4c f5       	brge	.+82     	; 0x34ae <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    345c:	6c 85       	ldd	r22, Y+12	; 0x0c
    345e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3460:	8e 85       	ldd	r24, Y+14	; 0x0e
    3462:	9f 85       	ldd	r25, Y+15	; 0x0f
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e2       	ldi	r20, 0x20	; 32
    346a:	51 e4       	ldi	r21, 0x41	; 65
    346c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	bc 01       	movw	r22, r24
    3476:	cd 01       	movw	r24, r26
    3478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	9f 83       	std	Y+7, r25	; 0x07
    3482:	8e 83       	std	Y+6, r24	; 0x06
    3484:	0f c0       	rjmp	.+30     	; 0x34a4 <LCD_ES_tTrigger_Enable+0x2ce>
    3486:	80 e9       	ldi	r24, 0x90	; 144
    3488:	91 e0       	ldi	r25, 0x01	; 1
    348a:	9d 83       	std	Y+5, r25	; 0x05
    348c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    348e:	8c 81       	ldd	r24, Y+4	; 0x04
    3490:	9d 81       	ldd	r25, Y+5	; 0x05
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	f1 f7       	brne	.-4      	; 0x3492 <LCD_ES_tTrigger_Enable+0x2bc>
    3496:	9d 83       	std	Y+5, r25	; 0x05
    3498:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349a:	8e 81       	ldd	r24, Y+6	; 0x06
    349c:	9f 81       	ldd	r25, Y+7	; 0x07
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	9f 83       	std	Y+7, r25	; 0x07
    34a2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a4:	8e 81       	ldd	r24, Y+6	; 0x06
    34a6:	9f 81       	ldd	r25, Y+7	; 0x07
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	69 f7       	brne	.-38     	; 0x3486 <LCD_ES_tTrigger_Enable+0x2b0>
    34ac:	24 c0       	rjmp	.+72     	; 0x34f6 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ae:	68 85       	ldd	r22, Y+8	; 0x08
    34b0:	79 85       	ldd	r23, Y+9	; 0x09
    34b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    34b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    34b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	9f 83       	std	Y+7, r25	; 0x07
    34c0:	8e 83       	std	Y+6, r24	; 0x06
    34c2:	8e 81       	ldd	r24, Y+6	; 0x06
    34c4:	9f 81       	ldd	r25, Y+7	; 0x07
    34c6:	9b 83       	std	Y+3, r25	; 0x03
    34c8:	8a 83       	std	Y+2, r24	; 0x02
    34ca:	8a 81       	ldd	r24, Y+2	; 0x02
    34cc:	9b 81       	ldd	r25, Y+3	; 0x03
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	f1 f7       	brne	.-4      	; 0x34ce <LCD_ES_tTrigger_Enable+0x2f8>
    34d2:	9b 83       	std	Y+3, r25	; 0x03
    34d4:	8a 83       	std	Y+2, r24	; 0x02
    34d6:	0f c0       	rjmp	.+30     	; 0x34f6 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34d8:	69 89       	ldd	r22, Y+17	; 0x11
    34da:	7a 89       	ldd	r23, Y+18	; 0x12
    34dc:	8b 89       	ldd	r24, Y+19	; 0x13
    34de:	9c 89       	ldd	r25, Y+20	; 0x14
    34e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	88 8b       	std	Y+16, r24	; 0x10
    34ea:	88 89       	ldd	r24, Y+16	; 0x10
    34ec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	8a 95       	dec	r24
    34f2:	f1 f7       	brne	.-4      	; 0x34f0 <LCD_ES_tTrigger_Enable+0x31a>
    34f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	return ES_OK;
    34f6:	80 e0       	ldi	r24, 0x00	; 0
}
    34f8:	e0 96       	adiw	r28, 0x30	; 48
    34fa:	0f b6       	in	r0, 0x3f	; 63
    34fc:	f8 94       	cli
    34fe:	de bf       	out	0x3e, r29	; 62
    3500:	0f be       	out	0x3f, r0	; 63
    3502:	cd bf       	out	0x3d, r28	; 61
    3504:	cf 91       	pop	r28
    3506:	df 91       	pop	r29
    3508:	08 95       	ret

0000350a <Lcd_ES_tInit>:


ES_t Lcd_ES_tInit(){
    350a:	df 93       	push	r29
    350c:	cf 93       	push	r28
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
#if LCD_MODE == FOUR_BIT_MODE
	Lcd_ES_tsendCmd(Four_BitMode);   /* Go into 4-bit operating mode*/
    3512:	82 e0       	ldi	r24, 0x02	; 2
    3514:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    3518:	88 e2       	ldi	r24, 0x28	; 40
    351a:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
    351e:	8e e0       	ldi	r24, 0x0E	; 14
    3520:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    3524:	86 e0       	ldi	r24, 0x06	; 6
    3526:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
	return ES_OK;
    3530:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_ES_tsendCmd(CursorON);  /* Display on cursor off */
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
	return ES_OK;
#endif
}
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	08 95       	ret

00003538 <lcd_ES_tclear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	2e 97       	sbiw	r28, 0x0e	; 14
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
	Lcd_ES_tsendCmd(CLR_Display);
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	a0 e0       	ldi	r26, 0x00	; 0
    3558:	b0 e4       	ldi	r27, 0x40	; 64
    355a:	8b 87       	std	Y+11, r24	; 0x0b
    355c:	9c 87       	std	Y+12, r25	; 0x0c
    355e:	ad 87       	std	Y+13, r26	; 0x0d
    3560:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3562:	6b 85       	ldd	r22, Y+11	; 0x0b
    3564:	7c 85       	ldd	r23, Y+12	; 0x0c
    3566:	8d 85       	ldd	r24, Y+13	; 0x0d
    3568:	9e 85       	ldd	r25, Y+14	; 0x0e
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	4a e7       	ldi	r20, 0x7A	; 122
    3570:	55 e4       	ldi	r21, 0x45	; 69
    3572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	8f 83       	std	Y+7, r24	; 0x07
    357c:	98 87       	std	Y+8, r25	; 0x08
    357e:	a9 87       	std	Y+9, r26	; 0x09
    3580:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3582:	6f 81       	ldd	r22, Y+7	; 0x07
    3584:	78 85       	ldd	r23, Y+8	; 0x08
    3586:	89 85       	ldd	r24, Y+9	; 0x09
    3588:	9a 85       	ldd	r25, Y+10	; 0x0a
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e8       	ldi	r20, 0x80	; 128
    3590:	5f e3       	ldi	r21, 0x3F	; 63
    3592:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3596:	88 23       	and	r24, r24
    3598:	2c f4       	brge	.+10     	; 0x35a4 <lcd_ES_tclear+0x6c>
		__ticks = 1;
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	9e 83       	std	Y+6, r25	; 0x06
    35a0:	8d 83       	std	Y+5, r24	; 0x05
    35a2:	3f c0       	rjmp	.+126    	; 0x3622 <lcd_ES_tclear+0xea>
	else if (__tmp > 65535)
    35a4:	6f 81       	ldd	r22, Y+7	; 0x07
    35a6:	78 85       	ldd	r23, Y+8	; 0x08
    35a8:	89 85       	ldd	r24, Y+9	; 0x09
    35aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	3f ef       	ldi	r19, 0xFF	; 255
    35b0:	4f e7       	ldi	r20, 0x7F	; 127
    35b2:	57 e4       	ldi	r21, 0x47	; 71
    35b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35b8:	18 16       	cp	r1, r24
    35ba:	4c f5       	brge	.+82     	; 0x360e <lcd_ES_tclear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35be:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e2       	ldi	r20, 0x20	; 32
    35ca:	51 e4       	ldi	r21, 0x41	; 65
    35cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	bc 01       	movw	r22, r24
    35d6:	cd 01       	movw	r24, r26
    35d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	9e 83       	std	Y+6, r25	; 0x06
    35e2:	8d 83       	std	Y+5, r24	; 0x05
    35e4:	0f c0       	rjmp	.+30     	; 0x3604 <lcd_ES_tclear+0xcc>
    35e6:	80 e9       	ldi	r24, 0x90	; 144
    35e8:	91 e0       	ldi	r25, 0x01	; 1
    35ea:	9c 83       	std	Y+4, r25	; 0x04
    35ec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35ee:	8b 81       	ldd	r24, Y+3	; 0x03
    35f0:	9c 81       	ldd	r25, Y+4	; 0x04
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	f1 f7       	brne	.-4      	; 0x35f2 <lcd_ES_tclear+0xba>
    35f6:	9c 83       	std	Y+4, r25	; 0x04
    35f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35fa:	8d 81       	ldd	r24, Y+5	; 0x05
    35fc:	9e 81       	ldd	r25, Y+6	; 0x06
    35fe:	01 97       	sbiw	r24, 0x01	; 1
    3600:	9e 83       	std	Y+6, r25	; 0x06
    3602:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3604:	8d 81       	ldd	r24, Y+5	; 0x05
    3606:	9e 81       	ldd	r25, Y+6	; 0x06
    3608:	00 97       	sbiw	r24, 0x00	; 0
    360a:	69 f7       	brne	.-38     	; 0x35e6 <lcd_ES_tclear+0xae>
    360c:	14 c0       	rjmp	.+40     	; 0x3636 <lcd_ES_tclear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    360e:	6f 81       	ldd	r22, Y+7	; 0x07
    3610:	78 85       	ldd	r23, Y+8	; 0x08
    3612:	89 85       	ldd	r24, Y+9	; 0x09
    3614:	9a 85       	ldd	r25, Y+10	; 0x0a
    3616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	9e 83       	std	Y+6, r25	; 0x06
    3620:	8d 83       	std	Y+5, r24	; 0x05
    3622:	8d 81       	ldd	r24, Y+5	; 0x05
    3624:	9e 81       	ldd	r25, Y+6	; 0x06
    3626:	9a 83       	std	Y+2, r25	; 0x02
    3628:	89 83       	std	Y+1, r24	; 0x01
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	9a 81       	ldd	r25, Y+2	; 0x02
    362e:	01 97       	sbiw	r24, 0x01	; 1
    3630:	f1 f7       	brne	.-4      	; 0x362e <lcd_ES_tclear+0xf6>
    3632:	9a 83       	std	Y+2, r25	; 0x02
    3634:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	return ES_OK;
    3636:	80 e0       	ldi	r24, 0x00	; 0
}
    3638:	2e 96       	adiw	r28, 0x0e	; 14
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	f8 94       	cli
    363e:	de bf       	out	0x3e, r29	; 62
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	cd bf       	out	0x3d, r28	; 61
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	08 95       	ret

0000364a <Lcd_ES_tsendCmd>:

ES_t Lcd_ES_tsendCmd(u8 cmd){
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	0f 92       	push	r0
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	89 83       	std	Y+1, r24	; 0x01
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	61 e0       	ldi	r22, 0x01	; 1
    365a:	40 e0       	ldi	r20, 0x00	; 0
    365c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
#if LCD_MODE == FOUR_BIT_MODE
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	88 23       	and	r24, r24
    3664:	34 f4       	brge	.+12     	; 0x3672 <Lcd_ES_tsendCmd+0x28>
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	66 e0       	ldi	r22, 0x06	; 6
    366a:	41 e0       	ldi	r20, 0x01	; 1
    366c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    3670:	05 c0       	rjmp	.+10     	; 0x367c <Lcd_ES_tsendCmd+0x32>
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	66 e0       	ldi	r22, 0x06	; 6
    3676:	40 e0       	ldi	r20, 0x00	; 0
    3678:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    367c:	89 81       	ldd	r24, Y+1	; 0x01
    367e:	82 95       	swap	r24
    3680:	86 95       	lsr	r24
    3682:	86 95       	lsr	r24
    3684:	83 70       	andi	r24, 0x03	; 3
    3686:	88 2f       	mov	r24, r24
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	81 70       	andi	r24, 0x01	; 1
    368c:	90 70       	andi	r25, 0x00	; 0
    368e:	88 23       	and	r24, r24
    3690:	31 f0       	breq	.+12     	; 0x369e <Lcd_ES_tsendCmd+0x54>
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	65 e0       	ldi	r22, 0x05	; 5
    3696:	41 e0       	ldi	r20, 0x01	; 1
    3698:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    369c:	05 c0       	rjmp	.+10     	; 0x36a8 <Lcd_ES_tsendCmd+0x5e>
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	65 e0       	ldi	r22, 0x05	; 5
    36a2:	40 e0       	ldi	r20, 0x00	; 0
    36a4:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	82 95       	swap	r24
    36ac:	86 95       	lsr	r24
    36ae:	87 70       	andi	r24, 0x07	; 7
    36b0:	88 2f       	mov	r24, r24
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	81 70       	andi	r24, 0x01	; 1
    36b6:	90 70       	andi	r25, 0x00	; 0
    36b8:	88 23       	and	r24, r24
    36ba:	31 f0       	breq	.+12     	; 0x36c8 <Lcd_ES_tsendCmd+0x7e>
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	64 e0       	ldi	r22, 0x04	; 4
    36c0:	41 e0       	ldi	r20, 0x01	; 1
    36c2:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    36c6:	05 c0       	rjmp	.+10     	; 0x36d2 <Lcd_ES_tsendCmd+0x88>
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	64 e0       	ldi	r22, 0x04	; 4
    36cc:	40 e0       	ldi	r20, 0x00	; 0
    36ce:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	82 95       	swap	r24
    36d6:	8f 70       	andi	r24, 0x0F	; 15
    36d8:	88 2f       	mov	r24, r24
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	81 70       	andi	r24, 0x01	; 1
    36de:	90 70       	andi	r25, 0x00	; 0
    36e0:	88 23       	and	r24, r24
    36e2:	31 f0       	breq	.+12     	; 0x36f0 <Lcd_ES_tsendCmd+0xa6>
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	63 e0       	ldi	r22, 0x03	; 3
    36e8:	41 e0       	ldi	r20, 0x01	; 1
    36ea:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    36ee:	05 c0       	rjmp	.+10     	; 0x36fa <Lcd_ES_tsendCmd+0xb0>
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	63 e0       	ldi	r22, 0x03	; 3
    36f4:	40 e0       	ldi	r20, 0x00	; 0
    36f6:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    36fa:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	86 95       	lsr	r24
    3702:	86 95       	lsr	r24
    3704:	86 95       	lsr	r24
    3706:	88 2f       	mov	r24, r24
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	81 70       	andi	r24, 0x01	; 1
    370c:	90 70       	andi	r25, 0x00	; 0
    370e:	88 23       	and	r24, r24
    3710:	31 f0       	breq	.+12     	; 0x371e <Lcd_ES_tsendCmd+0xd4>
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	66 e0       	ldi	r22, 0x06	; 6
    3716:	41 e0       	ldi	r20, 0x01	; 1
    3718:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    371c:	05 c0       	rjmp	.+10     	; 0x3728 <Lcd_ES_tsendCmd+0xde>
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	66 e0       	ldi	r22, 0x06	; 6
    3722:	40 e0       	ldi	r20, 0x00	; 0
    3724:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	86 95       	lsr	r24
    372c:	86 95       	lsr	r24
    372e:	88 2f       	mov	r24, r24
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	81 70       	andi	r24, 0x01	; 1
    3734:	90 70       	andi	r25, 0x00	; 0
    3736:	88 23       	and	r24, r24
    3738:	31 f0       	breq	.+12     	; 0x3746 <Lcd_ES_tsendCmd+0xfc>
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	65 e0       	ldi	r22, 0x05	; 5
    373e:	41 e0       	ldi	r20, 0x01	; 1
    3740:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    3744:	05 c0       	rjmp	.+10     	; 0x3750 <Lcd_ES_tsendCmd+0x106>
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	65 e0       	ldi	r22, 0x05	; 5
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	86 95       	lsr	r24
    3754:	88 2f       	mov	r24, r24
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	81 70       	andi	r24, 0x01	; 1
    375a:	90 70       	andi	r25, 0x00	; 0
    375c:	88 23       	and	r24, r24
    375e:	31 f0       	breq	.+12     	; 0x376c <Lcd_ES_tsendCmd+0x122>
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	64 e0       	ldi	r22, 0x04	; 4
    3764:	41 e0       	ldi	r20, 0x01	; 1
    3766:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    376a:	05 c0       	rjmp	.+10     	; 0x3776 <Lcd_ES_tsendCmd+0x12c>
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	64 e0       	ldi	r22, 0x04	; 4
    3770:	40 e0       	ldi	r20, 0x00	; 0
    3772:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	88 2f       	mov	r24, r24
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	81 70       	andi	r24, 0x01	; 1
    377e:	90 70       	andi	r25, 0x00	; 0
    3780:	88 23       	and	r24, r24
    3782:	31 f0       	breq	.+12     	; 0x3790 <Lcd_ES_tsendCmd+0x146>
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	63 e0       	ldi	r22, 0x03	; 3
    3788:	41 e0       	ldi	r20, 0x01	; 1
    378a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    378e:	05 c0       	rjmp	.+10     	; 0x379a <Lcd_ES_tsendCmd+0x150>
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	63 e0       	ldi	r22, 0x03	; 3
    3794:	40 e0       	ldi	r20, 0x00	; 0
    3796:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    379a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    379e:	80 e0       	ldi	r24, 0x00	; 0
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D0,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif
}
    37a0:	0f 90       	pop	r0
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	08 95       	ret

000037a8 <Lcd_ES_tsendChar>:
ES_t Lcd_ES_tsendChar(u8 data){
    37a8:	df 93       	push	r29
    37aa:	cf 93       	push	r28
    37ac:	0f 92       	push	r0
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == FOUR_BIT_MODE
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	61 e0       	ldi	r22, 0x01	; 1
    37b8:	41 e0       	ldi	r20, 0x01	; 1
    37ba:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	88 23       	and	r24, r24
    37c2:	34 f4       	brge	.+12     	; 0x37d0 <Lcd_ES_tsendChar+0x28>
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	66 e0       	ldi	r22, 0x06	; 6
    37c8:	41 e0       	ldi	r20, 0x01	; 1
    37ca:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    37ce:	05 c0       	rjmp	.+10     	; 0x37da <Lcd_ES_tsendChar+0x32>
    37d0:	80 e0       	ldi	r24, 0x00	; 0
    37d2:	66 e0       	ldi	r22, 0x06	; 6
    37d4:	40 e0       	ldi	r20, 0x00	; 0
    37d6:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	82 95       	swap	r24
    37de:	86 95       	lsr	r24
    37e0:	86 95       	lsr	r24
    37e2:	83 70       	andi	r24, 0x03	; 3
    37e4:	88 2f       	mov	r24, r24
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	81 70       	andi	r24, 0x01	; 1
    37ea:	90 70       	andi	r25, 0x00	; 0
    37ec:	88 23       	and	r24, r24
    37ee:	31 f0       	breq	.+12     	; 0x37fc <Lcd_ES_tsendChar+0x54>
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	65 e0       	ldi	r22, 0x05	; 5
    37f4:	41 e0       	ldi	r20, 0x01	; 1
    37f6:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    37fa:	05 c0       	rjmp	.+10     	; 0x3806 <Lcd_ES_tsendChar+0x5e>
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	65 e0       	ldi	r22, 0x05	; 5
    3800:	40 e0       	ldi	r20, 0x00	; 0
    3802:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	82 95       	swap	r24
    380a:	86 95       	lsr	r24
    380c:	87 70       	andi	r24, 0x07	; 7
    380e:	88 2f       	mov	r24, r24
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	81 70       	andi	r24, 0x01	; 1
    3814:	90 70       	andi	r25, 0x00	; 0
    3816:	88 23       	and	r24, r24
    3818:	31 f0       	breq	.+12     	; 0x3826 <Lcd_ES_tsendChar+0x7e>
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	64 e0       	ldi	r22, 0x04	; 4
    381e:	41 e0       	ldi	r20, 0x01	; 1
    3820:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    3824:	05 c0       	rjmp	.+10     	; 0x3830 <Lcd_ES_tsendChar+0x88>
    3826:	80 e0       	ldi	r24, 0x00	; 0
    3828:	64 e0       	ldi	r22, 0x04	; 4
    382a:	40 e0       	ldi	r20, 0x00	; 0
    382c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	82 95       	swap	r24
    3834:	8f 70       	andi	r24, 0x0F	; 15
    3836:	88 2f       	mov	r24, r24
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	81 70       	andi	r24, 0x01	; 1
    383c:	90 70       	andi	r25, 0x00	; 0
    383e:	88 23       	and	r24, r24
    3840:	31 f0       	breq	.+12     	; 0x384e <Lcd_ES_tsendChar+0xa6>
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	63 e0       	ldi	r22, 0x03	; 3
    3846:	41 e0       	ldi	r20, 0x01	; 1
    3848:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    384c:	05 c0       	rjmp	.+10     	; 0x3858 <Lcd_ES_tsendChar+0xb0>
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	63 e0       	ldi	r22, 0x03	; 3
    3852:	40 e0       	ldi	r20, 0x00	; 0
    3854:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3858:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	86 95       	lsr	r24
    3860:	86 95       	lsr	r24
    3862:	86 95       	lsr	r24
    3864:	88 2f       	mov	r24, r24
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	81 70       	andi	r24, 0x01	; 1
    386a:	90 70       	andi	r25, 0x00	; 0
    386c:	88 23       	and	r24, r24
    386e:	31 f0       	breq	.+12     	; 0x387c <Lcd_ES_tsendChar+0xd4>
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	66 e0       	ldi	r22, 0x06	; 6
    3874:	41 e0       	ldi	r20, 0x01	; 1
    3876:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    387a:	05 c0       	rjmp	.+10     	; 0x3886 <Lcd_ES_tsendChar+0xde>
    387c:	80 e0       	ldi	r24, 0x00	; 0
    387e:	66 e0       	ldi	r22, 0x06	; 6
    3880:	40 e0       	ldi	r20, 0x00	; 0
    3882:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	86 95       	lsr	r24
    388a:	86 95       	lsr	r24
    388c:	88 2f       	mov	r24, r24
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	81 70       	andi	r24, 0x01	; 1
    3892:	90 70       	andi	r25, 0x00	; 0
    3894:	88 23       	and	r24, r24
    3896:	31 f0       	breq	.+12     	; 0x38a4 <Lcd_ES_tsendChar+0xfc>
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	65 e0       	ldi	r22, 0x05	; 5
    389c:	41 e0       	ldi	r20, 0x01	; 1
    389e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    38a2:	05 c0       	rjmp	.+10     	; 0x38ae <Lcd_ES_tsendChar+0x106>
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	65 e0       	ldi	r22, 0x05	; 5
    38a8:	40 e0       	ldi	r20, 0x00	; 0
    38aa:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	86 95       	lsr	r24
    38b2:	88 2f       	mov	r24, r24
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	81 70       	andi	r24, 0x01	; 1
    38b8:	90 70       	andi	r25, 0x00	; 0
    38ba:	88 23       	and	r24, r24
    38bc:	31 f0       	breq	.+12     	; 0x38ca <Lcd_ES_tsendChar+0x122>
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	64 e0       	ldi	r22, 0x04	; 4
    38c2:	41 e0       	ldi	r20, 0x01	; 1
    38c4:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    38c8:	05 c0       	rjmp	.+10     	; 0x38d4 <Lcd_ES_tsendChar+0x12c>
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	64 e0       	ldi	r22, 0x04	; 4
    38ce:	40 e0       	ldi	r20, 0x00	; 0
    38d0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	88 2f       	mov	r24, r24
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	81 70       	andi	r24, 0x01	; 1
    38dc:	90 70       	andi	r25, 0x00	; 0
    38de:	88 23       	and	r24, r24
    38e0:	31 f0       	breq	.+12     	; 0x38ee <Lcd_ES_tsendChar+0x146>
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	63 e0       	ldi	r22, 0x03	; 3
    38e6:	41 e0       	ldi	r20, 0x01	; 1
    38e8:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    38ec:	05 c0       	rjmp	.+10     	; 0x38f8 <Lcd_ES_tsendChar+0x150>
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	63 e0       	ldi	r22, 0x03	; 3
    38f2:	40 e0       	ldi	r20, 0x00	; 0
    38f4:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    38f8:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <LCD_ES_tTrigger_Enable>
	return ES_OK;
    38fc:	80 e0       	ldi	r24, 0x00	; 0
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
#endif

}
    38fe:	0f 90       	pop	r0
    3900:	cf 91       	pop	r28
    3902:	df 91       	pop	r29
    3904:	08 95       	ret

00003906 <Lcd_ES_tsendString>:

ES_t Lcd_ES_tsendString(char *data)
{
    3906:	df 93       	push	r29
    3908:	cf 93       	push	r28
    390a:	00 d0       	rcall	.+0      	; 0x390c <Lcd_ES_tsendString+0x6>
    390c:	0f 92       	push	r0
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	9b 83       	std	Y+3, r25	; 0x03
    3914:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	61 e0       	ldi	r22, 0x01	; 1
    391a:	41 e0       	ldi	r20, 0x01	; 1
    391c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>

	unsigned char i=0;
    3920:	19 82       	std	Y+1, r1	; 0x01
    3922:	0e c0       	rjmp	.+28     	; 0x3940 <Lcd_ES_tsendString+0x3a>
	while(data[i]!=0)
	{
		Lcd_ES_tsendChar(data[i]);
    3924:	89 81       	ldd	r24, Y+1	; 0x01
    3926:	28 2f       	mov	r18, r24
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	8a 81       	ldd	r24, Y+2	; 0x02
    392c:	9b 81       	ldd	r25, Y+3	; 0x03
    392e:	fc 01       	movw	r30, r24
    3930:	e2 0f       	add	r30, r18
    3932:	f3 1f       	adc	r31, r19
    3934:	80 81       	ld	r24, Z
    3936:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <Lcd_ES_tsendChar>
		i++;
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	8f 5f       	subi	r24, 0xFF	; 255
    393e:	89 83       	std	Y+1, r24	; 0x01
ES_t Lcd_ES_tsendString(char *data)
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);

	unsigned char i=0;
	while(data[i]!=0)
    3940:	89 81       	ldd	r24, Y+1	; 0x01
    3942:	28 2f       	mov	r18, r24
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	8a 81       	ldd	r24, Y+2	; 0x02
    3948:	9b 81       	ldd	r25, Y+3	; 0x03
    394a:	fc 01       	movw	r30, r24
    394c:	e2 0f       	add	r30, r18
    394e:	f3 1f       	adc	r31, r19
    3950:	80 81       	ld	r24, Z
    3952:	88 23       	and	r24, r24
    3954:	39 f7       	brne	.-50     	; 0x3924 <Lcd_ES_tsendString+0x1e>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
    3956:	80 e0       	ldi	r24, 0x00	; 0
}
    3958:	0f 90       	pop	r0
    395a:	0f 90       	pop	r0
    395c:	0f 90       	pop	r0
    395e:	cf 91       	pop	r28
    3960:	df 91       	pop	r29
    3962:	08 95       	ret

00003964 <Lcd_ES_tsendString_xy>:

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
    3964:	df 93       	push	r29
    3966:	cf 93       	push	r28
    3968:	00 d0       	rcall	.+0      	; 0x396a <Lcd_ES_tsendString_xy+0x6>
    396a:	00 d0       	rcall	.+0      	; 0x396c <Lcd_ES_tsendString_xy+0x8>
    396c:	cd b7       	in	r28, 0x3d	; 61
    396e:	de b7       	in	r29, 0x3e	; 62
    3970:	9a 83       	std	Y+2, r25	; 0x02
    3972:	89 83       	std	Y+1, r24	; 0x01
    3974:	6b 83       	std	Y+3, r22	; 0x03
    3976:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	61 e0       	ldi	r22, 0x01	; 1
    397c:	41 e0       	ldi	r20, 0x01	; 1
    397e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>


	LCD_ES_tSet_Cursor_Pos(row,col);
    3982:	8b 81       	ldd	r24, Y+3	; 0x03
    3984:	6c 81       	ldd	r22, Y+4	; 0x04
    3986:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <LCD_ES_tSet_Cursor_Pos>
	Lcd_ES_tsendString(data);
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	9a 81       	ldd	r25, Y+2	; 0x02
    398e:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
	return ES_OK;
    3992:	80 e0       	ldi	r24, 0x00	; 0

}
    3994:	0f 90       	pop	r0
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	0f 90       	pop	r0
    399c:	cf 91       	pop	r28
    399e:	df 91       	pop	r29
    39a0:	08 95       	ret

000039a2 <Lcd_ES_tdisplayNum>:


//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
    39a2:	df 93       	push	r29
    39a4:	cf 93       	push	r28
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	2e 97       	sbiw	r28, 0x0e	; 14
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	9e 87       	std	Y+14, r25	; 0x0e
    39b8:	8d 87       	std	Y+13, r24	; 0x0d
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	61 e0       	ldi	r22, 0x01	; 1
    39be:	41 e0       	ldi	r20, 0x01	; 1
    39c0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>


	uint8_t ch[10],i=0,j=0;
    39c4:	1a 82       	std	Y+2, r1	; 0x02
    39c6:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    39c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    39cc:	00 97       	sbiw	r24, 0x00	; 0
    39ce:	11 f5       	brne	.+68     	; 0x3a14 <Lcd_ES_tdisplayNum+0x72>
	{
		Lcd_ES_tsendChar('0');
    39d0:	80 e3       	ldi	r24, 0x30	; 48
    39d2:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <Lcd_ES_tsendChar>
    39d6:	39 c0       	rjmp	.+114    	; 0x3a4a <Lcd_ES_tdisplayNum+0xa8>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
    39d8:	8a 81       	ldd	r24, Y+2	; 0x02
    39da:	e8 2f       	mov	r30, r24
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	8d 85       	ldd	r24, Y+13	; 0x0d
    39e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e2:	2a e0       	ldi	r18, 0x0A	; 10
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	b9 01       	movw	r22, r18
    39e8:	0e 94 b8 2a 	call	0x5570	; 0x5570 <__udivmodhi4>
    39ec:	28 2f       	mov	r18, r24
    39ee:	20 5d       	subi	r18, 0xD0	; 208
    39f0:	ce 01       	movw	r24, r28
    39f2:	03 96       	adiw	r24, 0x03	; 3
    39f4:	e8 0f       	add	r30, r24
    39f6:	f9 1f       	adc	r31, r25
    39f8:	20 83       	st	Z, r18
			num /= 10;
    39fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    39fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fe:	2a e0       	ldi	r18, 0x0A	; 10
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	b9 01       	movw	r22, r18
    3a04:	0e 94 b8 2a 	call	0x5570	; 0x5570 <__udivmodhi4>
    3a08:	cb 01       	movw	r24, r22
    3a0a:	9e 87       	std	Y+14, r25	; 0x0e
    3a0c:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	8f 5f       	subi	r24, 0xFF	; 255
    3a12:	8a 83       	std	Y+2, r24	; 0x02
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
    3a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a18:	00 97       	sbiw	r24, 0x00	; 0
    3a1a:	f1 f6       	brne	.-68     	; 0x39d8 <Lcd_ES_tdisplayNum+0x36>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    3a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1e:	89 83       	std	Y+1, r24	; 0x01
    3a20:	11 c0       	rjmp	.+34     	; 0x3a44 <Lcd_ES_tdisplayNum+0xa2>
		{
			Lcd_ES_tsendChar(ch[j-1]);
    3a22:	89 81       	ldd	r24, Y+1	; 0x01
    3a24:	88 2f       	mov	r24, r24
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	9c 01       	movw	r18, r24
    3a2a:	21 50       	subi	r18, 0x01	; 1
    3a2c:	30 40       	sbci	r19, 0x00	; 0
    3a2e:	ce 01       	movw	r24, r28
    3a30:	03 96       	adiw	r24, 0x03	; 3
    3a32:	fc 01       	movw	r30, r24
    3a34:	e2 0f       	add	r30, r18
    3a36:	f3 1f       	adc	r31, r19
    3a38:	80 81       	ld	r24, Z
    3a3a:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
    3a40:	81 50       	subi	r24, 0x01	; 1
    3a42:	89 83       	std	Y+1, r24	; 0x01
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	88 23       	and	r24, r24
    3a48:	61 f7       	brne	.-40     	; 0x3a22 <Lcd_ES_tdisplayNum+0x80>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
}
    3a4c:	2e 96       	adiw	r28, 0x0e	; 14
    3a4e:	0f b6       	in	r0, 0x3f	; 63
    3a50:	f8 94       	cli
    3a52:	de bf       	out	0x3e, r29	; 62
    3a54:	0f be       	out	0x3f, r0	; 63
    3a56:	cd bf       	out	0x3d, r28	; 61
    3a58:	cf 91       	pop	r28
    3a5a:	df 91       	pop	r29
    3a5c:	08 95       	ret

00003a5e <Lcd_ES_tdisplayNum_xy>:

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
    3a5e:	df 93       	push	r29
    3a60:	cf 93       	push	r28
    3a62:	cd b7       	in	r28, 0x3d	; 61
    3a64:	de b7       	in	r29, 0x3e	; 62
    3a66:	a3 97       	sbiw	r28, 0x23	; 35
    3a68:	0f b6       	in	r0, 0x3f	; 63
    3a6a:	f8 94       	cli
    3a6c:	de bf       	out	0x3e, r29	; 62
    3a6e:	0f be       	out	0x3f, r0	; 63
    3a70:	cd bf       	out	0x3d, r28	; 61
    3a72:	98 a3       	std	Y+32, r25	; 0x20
    3a74:	8f 8f       	std	Y+31, r24	; 0x1f
    3a76:	69 a3       	std	Y+33, r22	; 0x21
    3a78:	4a a3       	std	Y+34, r20	; 0x22

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	61 e0       	ldi	r22, 0x01	; 1
    3a7e:	41 e0       	ldi	r20, 0x01	; 1
    3a80:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>


	if(row == 1){
    3a84:	89 a1       	ldd	r24, Y+33	; 0x21
    3a86:	81 30       	cpi	r24, 0x01	; 1
    3a88:	09 f0       	breq	.+2      	; 0x3a8c <Lcd_ES_tdisplayNum_xy+0x2e>
    3a8a:	76 c0       	rjmp	.+236    	; 0x3b78 <Lcd_ES_tdisplayNum_xy+0x11a>
		Lcd_ES_tsendCmd(Force1stline);
    3a8c:	80 e8       	ldi	r24, 0x80	; 128
    3a8e:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	a0 e8       	ldi	r26, 0x80	; 128
    3a98:	bf e3       	ldi	r27, 0x3F	; 63
    3a9a:	89 8f       	std	Y+25, r24	; 0x19
    3a9c:	9a 8f       	std	Y+26, r25	; 0x1a
    3a9e:	ab 8f       	std	Y+27, r26	; 0x1b
    3aa0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa2:	69 8d       	ldd	r22, Y+25	; 0x19
    3aa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3aa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	4a e7       	ldi	r20, 0x7A	; 122
    3ab0:	55 e4       	ldi	r21, 0x45	; 69
    3ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	8d 8b       	std	Y+21, r24	; 0x15
    3abc:	9e 8b       	std	Y+22, r25	; 0x16
    3abe:	af 8b       	std	Y+23, r26	; 0x17
    3ac0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	40 e8       	ldi	r20, 0x80	; 128
    3ad0:	5f e3       	ldi	r21, 0x3F	; 63
    3ad2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ad6:	88 23       	and	r24, r24
    3ad8:	2c f4       	brge	.+10     	; 0x3ae4 <Lcd_ES_tdisplayNum_xy+0x86>
		__ticks = 1;
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	9c 8b       	std	Y+20, r25	; 0x14
    3ae0:	8b 8b       	std	Y+19, r24	; 0x13
    3ae2:	3f c0       	rjmp	.+126    	; 0x3b62 <Lcd_ES_tdisplayNum_xy+0x104>
	else if (__tmp > 65535)
    3ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    3aea:	98 8d       	ldd	r25, Y+24	; 0x18
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	3f ef       	ldi	r19, 0xFF	; 255
    3af0:	4f e7       	ldi	r20, 0x7F	; 127
    3af2:	57 e4       	ldi	r21, 0x47	; 71
    3af4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3af8:	18 16       	cp	r1, r24
    3afa:	4c f5       	brge	.+82     	; 0x3b4e <Lcd_ES_tdisplayNum_xy+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3afc:	69 8d       	ldd	r22, Y+25	; 0x19
    3afe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	40 e2       	ldi	r20, 0x20	; 32
    3b0a:	51 e4       	ldi	r21, 0x41	; 65
    3b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	bc 01       	movw	r22, r24
    3b16:	cd 01       	movw	r24, r26
    3b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	9c 8b       	std	Y+20, r25	; 0x14
    3b22:	8b 8b       	std	Y+19, r24	; 0x13
    3b24:	0f c0       	rjmp	.+30     	; 0x3b44 <Lcd_ES_tdisplayNum_xy+0xe6>
    3b26:	80 e9       	ldi	r24, 0x90	; 144
    3b28:	91 e0       	ldi	r25, 0x01	; 1
    3b2a:	9a 8b       	std	Y+18, r25	; 0x12
    3b2c:	89 8b       	std	Y+17, r24	; 0x11
    3b2e:	89 89       	ldd	r24, Y+17	; 0x11
    3b30:	9a 89       	ldd	r25, Y+18	; 0x12
    3b32:	01 97       	sbiw	r24, 0x01	; 1
    3b34:	f1 f7       	brne	.-4      	; 0x3b32 <Lcd_ES_tdisplayNum_xy+0xd4>
    3b36:	9a 8b       	std	Y+18, r25	; 0x12
    3b38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b3e:	01 97       	sbiw	r24, 0x01	; 1
    3b40:	9c 8b       	std	Y+20, r25	; 0x14
    3b42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b44:	8b 89       	ldd	r24, Y+19	; 0x13
    3b46:	9c 89       	ldd	r25, Y+20	; 0x14
    3b48:	00 97       	sbiw	r24, 0x00	; 0
    3b4a:	69 f7       	brne	.-38     	; 0x3b26 <Lcd_ES_tdisplayNum_xy+0xc8>
    3b4c:	92 c0       	rjmp	.+292    	; 0x3c72 <Lcd_ES_tdisplayNum_xy+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b50:	7e 89       	ldd	r23, Y+22	; 0x16
    3b52:	8f 89       	ldd	r24, Y+23	; 0x17
    3b54:	98 8d       	ldd	r25, Y+24	; 0x18
    3b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	9c 8b       	std	Y+20, r25	; 0x14
    3b60:	8b 8b       	std	Y+19, r24	; 0x13
    3b62:	8b 89       	ldd	r24, Y+19	; 0x13
    3b64:	9c 89       	ldd	r25, Y+20	; 0x14
    3b66:	98 8b       	std	Y+16, r25	; 0x10
    3b68:	8f 87       	std	Y+15, r24	; 0x0f
    3b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b6c:	98 89       	ldd	r25, Y+16	; 0x10
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	f1 f7       	brne	.-4      	; 0x3b6e <Lcd_ES_tdisplayNum_xy+0x110>
    3b72:	98 8b       	std	Y+16, r25	; 0x10
    3b74:	8f 87       	std	Y+15, r24	; 0x0f
    3b76:	7d c0       	rjmp	.+250    	; 0x3c72 <Lcd_ES_tdisplayNum_xy+0x214>
		_delay_ms(1);
	}else if(row == 2){
    3b78:	89 a1       	ldd	r24, Y+33	; 0x21
    3b7a:	82 30       	cpi	r24, 0x02	; 2
    3b7c:	09 f0       	breq	.+2      	; 0x3b80 <Lcd_ES_tdisplayNum_xy+0x122>
    3b7e:	76 c0       	rjmp	.+236    	; 0x3c6c <Lcd_ES_tdisplayNum_xy+0x20e>
		Lcd_ES_tsendCmd(Force2ndline);
    3b80:	80 ec       	ldi	r24, 0xC0	; 192
    3b82:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	a0 e2       	ldi	r26, 0x20	; 32
    3b8c:	b1 e4       	ldi	r27, 0x41	; 65
    3b8e:	8b 87       	std	Y+11, r24	; 0x0b
    3b90:	9c 87       	std	Y+12, r25	; 0x0c
    3b92:	ad 87       	std	Y+13, r26	; 0x0d
    3b94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	4a e7       	ldi	r20, 0x7A	; 122
    3ba4:	55 e4       	ldi	r21, 0x45	; 69
    3ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	8f 83       	std	Y+7, r24	; 0x07
    3bb0:	98 87       	std	Y+8, r25	; 0x08
    3bb2:	a9 87       	std	Y+9, r26	; 0x09
    3bb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb8:	78 85       	ldd	r23, Y+8	; 0x08
    3bba:	89 85       	ldd	r24, Y+9	; 0x09
    3bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	40 e8       	ldi	r20, 0x80	; 128
    3bc4:	5f e3       	ldi	r21, 0x3F	; 63
    3bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bca:	88 23       	and	r24, r24
    3bcc:	2c f4       	brge	.+10     	; 0x3bd8 <Lcd_ES_tdisplayNum_xy+0x17a>
		__ticks = 1;
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	9e 83       	std	Y+6, r25	; 0x06
    3bd4:	8d 83       	std	Y+5, r24	; 0x05
    3bd6:	3f c0       	rjmp	.+126    	; 0x3c56 <Lcd_ES_tdisplayNum_xy+0x1f8>
	else if (__tmp > 65535)
    3bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bda:	78 85       	ldd	r23, Y+8	; 0x08
    3bdc:	89 85       	ldd	r24, Y+9	; 0x09
    3bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	3f ef       	ldi	r19, 0xFF	; 255
    3be4:	4f e7       	ldi	r20, 0x7F	; 127
    3be6:	57 e4       	ldi	r21, 0x47	; 71
    3be8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bec:	18 16       	cp	r1, r24
    3bee:	4c f5       	brge	.+82     	; 0x3c42 <Lcd_ES_tdisplayNum_xy+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	40 e2       	ldi	r20, 0x20	; 32
    3bfe:	51 e4       	ldi	r21, 0x41	; 65
    3c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	bc 01       	movw	r22, r24
    3c0a:	cd 01       	movw	r24, r26
    3c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	9e 83       	std	Y+6, r25	; 0x06
    3c16:	8d 83       	std	Y+5, r24	; 0x05
    3c18:	0f c0       	rjmp	.+30     	; 0x3c38 <Lcd_ES_tdisplayNum_xy+0x1da>
    3c1a:	80 e9       	ldi	r24, 0x90	; 144
    3c1c:	91 e0       	ldi	r25, 0x01	; 1
    3c1e:	9c 83       	std	Y+4, r25	; 0x04
    3c20:	8b 83       	std	Y+3, r24	; 0x03
    3c22:	8b 81       	ldd	r24, Y+3	; 0x03
    3c24:	9c 81       	ldd	r25, Y+4	; 0x04
    3c26:	01 97       	sbiw	r24, 0x01	; 1
    3c28:	f1 f7       	brne	.-4      	; 0x3c26 <Lcd_ES_tdisplayNum_xy+0x1c8>
    3c2a:	9c 83       	std	Y+4, r25	; 0x04
    3c2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c30:	9e 81       	ldd	r25, Y+6	; 0x06
    3c32:	01 97       	sbiw	r24, 0x01	; 1
    3c34:	9e 83       	std	Y+6, r25	; 0x06
    3c36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c38:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3c:	00 97       	sbiw	r24, 0x00	; 0
    3c3e:	69 f7       	brne	.-38     	; 0x3c1a <Lcd_ES_tdisplayNum_xy+0x1bc>
    3c40:	18 c0       	rjmp	.+48     	; 0x3c72 <Lcd_ES_tdisplayNum_xy+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c42:	6f 81       	ldd	r22, Y+7	; 0x07
    3c44:	78 85       	ldd	r23, Y+8	; 0x08
    3c46:	89 85       	ldd	r24, Y+9	; 0x09
    3c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	9e 83       	std	Y+6, r25	; 0x06
    3c54:	8d 83       	std	Y+5, r24	; 0x05
    3c56:	8d 81       	ldd	r24, Y+5	; 0x05
    3c58:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5a:	9a 83       	std	Y+2, r25	; 0x02
    3c5c:	89 83       	std	Y+1, r24	; 0x01
    3c5e:	89 81       	ldd	r24, Y+1	; 0x01
    3c60:	9a 81       	ldd	r25, Y+2	; 0x02
    3c62:	01 97       	sbiw	r24, 0x01	; 1
    3c64:	f1 f7       	brne	.-4      	; 0x3c62 <Lcd_ES_tdisplayNum_xy+0x204>
    3c66:	9a 83       	std	Y+2, r25	; 0x02
    3c68:	89 83       	std	Y+1, r24	; 0x01
    3c6a:	03 c0       	rjmp	.+6      	; 0x3c72 <Lcd_ES_tdisplayNum_xy+0x214>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	8b a3       	std	Y+35, r24	; 0x23
    3c70:	1a c0       	rjmp	.+52     	; 0x3ca6 <Lcd_ES_tdisplayNum_xy+0x248>
	}


	for(int j=1;j<=col;j++){
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	9e 8f       	std	Y+30, r25	; 0x1e
    3c78:	8d 8f       	std	Y+29, r24	; 0x1d
    3c7a:	08 c0       	rjmp	.+16     	; 0x3c8c <Lcd_ES_tdisplayNum_xy+0x22e>
		Lcd_ES_tsendCmd(ShiftRight);
    3c7c:	8c e1       	ldi	r24, 0x1C	; 28
    3c7e:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
    3c82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c86:	01 96       	adiw	r24, 0x01	; 1
    3c88:	9e 8f       	std	Y+30, r25	; 0x1e
    3c8a:	8d 8f       	std	Y+29, r24	; 0x1d
    3c8c:	8a a1       	ldd	r24, Y+34	; 0x22
    3c8e:	28 2f       	mov	r18, r24
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c96:	28 17       	cp	r18, r24
    3c98:	39 07       	cpc	r19, r25
    3c9a:	84 f7       	brge	.-32     	; 0x3c7c <Lcd_ES_tdisplayNum_xy+0x21e>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
    3c9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c9e:	98 a1       	ldd	r25, Y+32	; 0x20
    3ca0:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <Lcd_ES_tdisplayNum>
	return ES_OK;
    3ca4:	1b a2       	std	Y+35, r1	; 0x23
    3ca6:	8b a1       	ldd	r24, Y+35	; 0x23

}
    3ca8:	a3 96       	adiw	r28, 0x23	; 35
    3caa:	0f b6       	in	r0, 0x3f	; 63
    3cac:	f8 94       	cli
    3cae:	de bf       	out	0x3e, r29	; 62
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	cd bf       	out	0x3d, r28	; 61
    3cb4:	cf 91       	pop	r28
    3cb6:	df 91       	pop	r29
    3cb8:	08 95       	ret

00003cba <Lcd_ES_tsendChar_xy>:

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
    3cba:	df 93       	push	r29
    3cbc:	cf 93       	push	r28
    3cbe:	cd b7       	in	r28, 0x3d	; 61
    3cc0:	de b7       	in	r29, 0x3e	; 62
    3cc2:	a2 97       	sbiw	r28, 0x22	; 34
    3cc4:	0f b6       	in	r0, 0x3f	; 63
    3cc6:	f8 94       	cli
    3cc8:	de bf       	out	0x3e, r29	; 62
    3cca:	0f be       	out	0x3f, r0	; 63
    3ccc:	cd bf       	out	0x3d, r28	; 61
    3cce:	8f 8f       	std	Y+31, r24	; 0x1f
    3cd0:	68 a3       	std	Y+32, r22	; 0x20
    3cd2:	49 a3       	std	Y+33, r20	; 0x21
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	61 e0       	ldi	r22, 0x01	; 1
    3cd8:	41 e0       	ldi	r20, 0x01	; 1
    3cda:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>


	if(row == 1){
    3cde:	88 a1       	ldd	r24, Y+32	; 0x20
    3ce0:	81 30       	cpi	r24, 0x01	; 1
    3ce2:	09 f0       	breq	.+2      	; 0x3ce6 <Lcd_ES_tsendChar_xy+0x2c>
    3ce4:	76 c0       	rjmp	.+236    	; 0x3dd2 <Lcd_ES_tsendChar_xy+0x118>
		Lcd_ES_tsendCmd(Force1stline);
    3ce6:	80 e8       	ldi	r24, 0x80	; 128
    3ce8:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
    3cec:	80 e0       	ldi	r24, 0x00	; 0
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	a0 e8       	ldi	r26, 0x80	; 128
    3cf2:	bf e3       	ldi	r27, 0x3F	; 63
    3cf4:	89 8f       	std	Y+25, r24	; 0x19
    3cf6:	9a 8f       	std	Y+26, r25	; 0x1a
    3cf8:	ab 8f       	std	Y+27, r26	; 0x1b
    3cfa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cfc:	69 8d       	ldd	r22, Y+25	; 0x19
    3cfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	4a e7       	ldi	r20, 0x7A	; 122
    3d0a:	55 e4       	ldi	r21, 0x45	; 69
    3d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	8d 8b       	std	Y+21, r24	; 0x15
    3d16:	9e 8b       	std	Y+22, r25	; 0x16
    3d18:	af 8b       	std	Y+23, r26	; 0x17
    3d1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d20:	8f 89       	ldd	r24, Y+23	; 0x17
    3d22:	98 8d       	ldd	r25, Y+24	; 0x18
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	40 e8       	ldi	r20, 0x80	; 128
    3d2a:	5f e3       	ldi	r21, 0x3F	; 63
    3d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d30:	88 23       	and	r24, r24
    3d32:	2c f4       	brge	.+10     	; 0x3d3e <Lcd_ES_tsendChar_xy+0x84>
		__ticks = 1;
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	9c 8b       	std	Y+20, r25	; 0x14
    3d3a:	8b 8b       	std	Y+19, r24	; 0x13
    3d3c:	3f c0       	rjmp	.+126    	; 0x3dbc <Lcd_ES_tsendChar_xy+0x102>
	else if (__tmp > 65535)
    3d3e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d40:	7e 89       	ldd	r23, Y+22	; 0x16
    3d42:	8f 89       	ldd	r24, Y+23	; 0x17
    3d44:	98 8d       	ldd	r25, Y+24	; 0x18
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	3f ef       	ldi	r19, 0xFF	; 255
    3d4a:	4f e7       	ldi	r20, 0x7F	; 127
    3d4c:	57 e4       	ldi	r21, 0x47	; 71
    3d4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d52:	18 16       	cp	r1, r24
    3d54:	4c f5       	brge	.+82     	; 0x3da8 <Lcd_ES_tsendChar_xy+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d56:	69 8d       	ldd	r22, Y+25	; 0x19
    3d58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e2       	ldi	r20, 0x20	; 32
    3d64:	51 e4       	ldi	r21, 0x41	; 65
    3d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	bc 01       	movw	r22, r24
    3d70:	cd 01       	movw	r24, r26
    3d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	9c 8b       	std	Y+20, r25	; 0x14
    3d7c:	8b 8b       	std	Y+19, r24	; 0x13
    3d7e:	0f c0       	rjmp	.+30     	; 0x3d9e <Lcd_ES_tsendChar_xy+0xe4>
    3d80:	80 e9       	ldi	r24, 0x90	; 144
    3d82:	91 e0       	ldi	r25, 0x01	; 1
    3d84:	9a 8b       	std	Y+18, r25	; 0x12
    3d86:	89 8b       	std	Y+17, r24	; 0x11
    3d88:	89 89       	ldd	r24, Y+17	; 0x11
    3d8a:	9a 89       	ldd	r25, Y+18	; 0x12
    3d8c:	01 97       	sbiw	r24, 0x01	; 1
    3d8e:	f1 f7       	brne	.-4      	; 0x3d8c <Lcd_ES_tsendChar_xy+0xd2>
    3d90:	9a 8b       	std	Y+18, r25	; 0x12
    3d92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d94:	8b 89       	ldd	r24, Y+19	; 0x13
    3d96:	9c 89       	ldd	r25, Y+20	; 0x14
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	9c 8b       	std	Y+20, r25	; 0x14
    3d9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3da0:	9c 89       	ldd	r25, Y+20	; 0x14
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	69 f7       	brne	.-38     	; 0x3d80 <Lcd_ES_tsendChar_xy+0xc6>
    3da6:	92 c0       	rjmp	.+292    	; 0x3ecc <Lcd_ES_tsendChar_xy+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da8:	6d 89       	ldd	r22, Y+21	; 0x15
    3daa:	7e 89       	ldd	r23, Y+22	; 0x16
    3dac:	8f 89       	ldd	r24, Y+23	; 0x17
    3dae:	98 8d       	ldd	r25, Y+24	; 0x18
    3db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db4:	dc 01       	movw	r26, r24
    3db6:	cb 01       	movw	r24, r22
    3db8:	9c 8b       	std	Y+20, r25	; 0x14
    3dba:	8b 8b       	std	Y+19, r24	; 0x13
    3dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    3dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    3dc0:	98 8b       	std	Y+16, r25	; 0x10
    3dc2:	8f 87       	std	Y+15, r24	; 0x0f
    3dc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dc6:	98 89       	ldd	r25, Y+16	; 0x10
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
    3dca:	f1 f7       	brne	.-4      	; 0x3dc8 <Lcd_ES_tsendChar_xy+0x10e>
    3dcc:	98 8b       	std	Y+16, r25	; 0x10
    3dce:	8f 87       	std	Y+15, r24	; 0x0f
    3dd0:	7d c0       	rjmp	.+250    	; 0x3ecc <Lcd_ES_tsendChar_xy+0x212>
		_delay_ms(1);
	}else if(row == 2){
    3dd2:	88 a1       	ldd	r24, Y+32	; 0x20
    3dd4:	82 30       	cpi	r24, 0x02	; 2
    3dd6:	09 f0       	breq	.+2      	; 0x3dda <Lcd_ES_tsendChar_xy+0x120>
    3dd8:	76 c0       	rjmp	.+236    	; 0x3ec6 <Lcd_ES_tsendChar_xy+0x20c>
		Lcd_ES_tsendCmd(Force2ndline);
    3dda:	80 ec       	ldi	r24, 0xC0	; 192
    3ddc:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	a0 e2       	ldi	r26, 0x20	; 32
    3de6:	b1 e4       	ldi	r27, 0x41	; 65
    3de8:	8b 87       	std	Y+11, r24	; 0x0b
    3dea:	9c 87       	std	Y+12, r25	; 0x0c
    3dec:	ad 87       	std	Y+13, r26	; 0x0d
    3dee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	4a e7       	ldi	r20, 0x7A	; 122
    3dfe:	55 e4       	ldi	r21, 0x45	; 69
    3e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e04:	dc 01       	movw	r26, r24
    3e06:	cb 01       	movw	r24, r22
    3e08:	8f 83       	std	Y+7, r24	; 0x07
    3e0a:	98 87       	std	Y+8, r25	; 0x08
    3e0c:	a9 87       	std	Y+9, r26	; 0x09
    3e0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e10:	6f 81       	ldd	r22, Y+7	; 0x07
    3e12:	78 85       	ldd	r23, Y+8	; 0x08
    3e14:	89 85       	ldd	r24, Y+9	; 0x09
    3e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	40 e8       	ldi	r20, 0x80	; 128
    3e1e:	5f e3       	ldi	r21, 0x3F	; 63
    3e20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e24:	88 23       	and	r24, r24
    3e26:	2c f4       	brge	.+10     	; 0x3e32 <Lcd_ES_tsendChar_xy+0x178>
		__ticks = 1;
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	9e 83       	std	Y+6, r25	; 0x06
    3e2e:	8d 83       	std	Y+5, r24	; 0x05
    3e30:	3f c0       	rjmp	.+126    	; 0x3eb0 <Lcd_ES_tsendChar_xy+0x1f6>
	else if (__tmp > 65535)
    3e32:	6f 81       	ldd	r22, Y+7	; 0x07
    3e34:	78 85       	ldd	r23, Y+8	; 0x08
    3e36:	89 85       	ldd	r24, Y+9	; 0x09
    3e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e3a:	20 e0       	ldi	r18, 0x00	; 0
    3e3c:	3f ef       	ldi	r19, 0xFF	; 255
    3e3e:	4f e7       	ldi	r20, 0x7F	; 127
    3e40:	57 e4       	ldi	r21, 0x47	; 71
    3e42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e46:	18 16       	cp	r1, r24
    3e48:	4c f5       	brge	.+82     	; 0x3e9c <Lcd_ES_tsendChar_xy+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	40 e2       	ldi	r20, 0x20	; 32
    3e58:	51 e4       	ldi	r21, 0x41	; 65
    3e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e5e:	dc 01       	movw	r26, r24
    3e60:	cb 01       	movw	r24, r22
    3e62:	bc 01       	movw	r22, r24
    3e64:	cd 01       	movw	r24, r26
    3e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	9e 83       	std	Y+6, r25	; 0x06
    3e70:	8d 83       	std	Y+5, r24	; 0x05
    3e72:	0f c0       	rjmp	.+30     	; 0x3e92 <Lcd_ES_tsendChar_xy+0x1d8>
    3e74:	80 e9       	ldi	r24, 0x90	; 144
    3e76:	91 e0       	ldi	r25, 0x01	; 1
    3e78:	9c 83       	std	Y+4, r25	; 0x04
    3e7a:	8b 83       	std	Y+3, r24	; 0x03
    3e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e80:	01 97       	sbiw	r24, 0x01	; 1
    3e82:	f1 f7       	brne	.-4      	; 0x3e80 <Lcd_ES_tsendChar_xy+0x1c6>
    3e84:	9c 83       	std	Y+4, r25	; 0x04
    3e86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e88:	8d 81       	ldd	r24, Y+5	; 0x05
    3e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e8c:	01 97       	sbiw	r24, 0x01	; 1
    3e8e:	9e 83       	std	Y+6, r25	; 0x06
    3e90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e92:	8d 81       	ldd	r24, Y+5	; 0x05
    3e94:	9e 81       	ldd	r25, Y+6	; 0x06
    3e96:	00 97       	sbiw	r24, 0x00	; 0
    3e98:	69 f7       	brne	.-38     	; 0x3e74 <Lcd_ES_tsendChar_xy+0x1ba>
    3e9a:	18 c0       	rjmp	.+48     	; 0x3ecc <Lcd_ES_tsendChar_xy+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e9e:	78 85       	ldd	r23, Y+8	; 0x08
    3ea0:	89 85       	ldd	r24, Y+9	; 0x09
    3ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	9e 83       	std	Y+6, r25	; 0x06
    3eae:	8d 83       	std	Y+5, r24	; 0x05
    3eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb4:	9a 83       	std	Y+2, r25	; 0x02
    3eb6:	89 83       	std	Y+1, r24	; 0x01
    3eb8:	89 81       	ldd	r24, Y+1	; 0x01
    3eba:	9a 81       	ldd	r25, Y+2	; 0x02
    3ebc:	01 97       	sbiw	r24, 0x01	; 1
    3ebe:	f1 f7       	brne	.-4      	; 0x3ebc <Lcd_ES_tsendChar_xy+0x202>
    3ec0:	9a 83       	std	Y+2, r25	; 0x02
    3ec2:	89 83       	std	Y+1, r24	; 0x01
    3ec4:	03 c0       	rjmp	.+6      	; 0x3ecc <Lcd_ES_tsendChar_xy+0x212>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    3ec8:	8a a3       	std	Y+34, r24	; 0x22
    3eca:	19 c0       	rjmp	.+50     	; 0x3efe <Lcd_ES_tsendChar_xy+0x244>
	}

	for(int j=1;j<=col;j++){
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	9e 8f       	std	Y+30, r25	; 0x1e
    3ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    3ed4:	08 c0       	rjmp	.+16     	; 0x3ee6 <Lcd_ES_tsendChar_xy+0x22c>
		Lcd_ES_tsendCmd(ShiftRight);
    3ed6:	8c e1       	ldi	r24, 0x1C	; 28
    3ed8:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
    3edc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ede:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ee0:	01 96       	adiw	r24, 0x01	; 1
    3ee2:	9e 8f       	std	Y+30, r25	; 0x1e
    3ee4:	8d 8f       	std	Y+29, r24	; 0x1d
    3ee6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ee8:	28 2f       	mov	r18, r24
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3eee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ef0:	28 17       	cp	r18, r24
    3ef2:	39 07       	cpc	r19, r25
    3ef4:	84 f7       	brge	.-32     	; 0x3ed6 <Lcd_ES_tsendChar_xy+0x21c>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
    3ef6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ef8:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <Lcd_ES_tsendChar>
	return ES_OK;
    3efc:	1a a2       	std	Y+34, r1	; 0x22
    3efe:	8a a1       	ldd	r24, Y+34	; 0x22
}
    3f00:	a2 96       	adiw	r28, 0x22	; 34
    3f02:	0f b6       	in	r0, 0x3f	; 63
    3f04:	f8 94       	cli
    3f06:	de bf       	out	0x3e, r29	; 62
    3f08:	0f be       	out	0x3f, r0	; 63
    3f0a:	cd bf       	out	0x3d, r28	; 61
    3f0c:	cf 91       	pop	r28
    3f0e:	df 91       	pop	r29
    3f10:	08 95       	ret

00003f12 <LCD_ES_tSet_Cursor_Pos>:

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
    3f12:	df 93       	push	r29
    3f14:	cf 93       	push	r28
    3f16:	00 d0       	rcall	.+0      	; 0x3f18 <LCD_ES_tSet_Cursor_Pos+0x6>
    3f18:	00 d0       	rcall	.+0      	; 0x3f1a <LCD_ES_tSet_Cursor_Pos+0x8>
    3f1a:	0f 92       	push	r0
    3f1c:	cd b7       	in	r28, 0x3d	; 61
    3f1e:	de b7       	in	r29, 0x3e	; 62
    3f20:	89 83       	std	Y+1, r24	; 0x01
    3f22:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    3f24:	8a 81       	ldd	r24, Y+2	; 0x02
    3f26:	81 50       	subi	r24, 0x01	; 1
    3f28:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    3f2a:	89 81       	ldd	r24, Y+1	; 0x01
    3f2c:	28 2f       	mov	r18, r24
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	3d 83       	std	Y+5, r19	; 0x05
    3f32:	2c 83       	std	Y+4, r18	; 0x04
    3f34:	8c 81       	ldd	r24, Y+4	; 0x04
    3f36:	9d 81       	ldd	r25, Y+5	; 0x05
    3f38:	81 30       	cpi	r24, 0x01	; 1
    3f3a:	91 05       	cpc	r25, r1
    3f3c:	31 f0       	breq	.+12     	; 0x3f4a <LCD_ES_tSet_Cursor_Pos+0x38>
    3f3e:	2c 81       	ldd	r18, Y+4	; 0x04
    3f40:	3d 81       	ldd	r19, Y+5	; 0x05
    3f42:	22 30       	cpi	r18, 0x02	; 2
    3f44:	31 05       	cpc	r19, r1
    3f46:	31 f0       	breq	.+12     	; 0x3f54 <LCD_ES_tSet_Cursor_Pos+0x42>
    3f48:	0a c0       	rjmp	.+20     	; 0x3f5e <LCD_ES_tSet_Cursor_Pos+0x4c>
	case 1:
		Lcd_ES_tsendCmd((0x80 + column));
    3f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4c:	80 58       	subi	r24, 0x80	; 128
    3f4e:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
    3f52:	08 c0       	rjmp	.+16     	; 0x3f64 <LCD_ES_tSet_Cursor_Pos+0x52>
		break;
	case 2:
		Lcd_ES_tsendCmd((0xc0 + column));
    3f54:	8a 81       	ldd	r24, Y+2	; 0x02
    3f56:	80 54       	subi	r24, 0x40	; 64
    3f58:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
    3f5c:	03 c0       	rjmp	.+6      	; 0x3f64 <LCD_ES_tSet_Cursor_Pos+0x52>
		break;
	default:
		return ES_NOT_OK;
    3f5e:	31 e0       	ldi	r19, 0x01	; 1
    3f60:	3b 83       	std	Y+3, r19	; 0x03
    3f62:	01 c0       	rjmp	.+2      	; 0x3f66 <LCD_ES_tSet_Cursor_Pos+0x54>
	}
	return ES_OK;
    3f64:	1b 82       	std	Y+3, r1	; 0x03
    3f66:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3f68:	0f 90       	pop	r0
    3f6a:	0f 90       	pop	r0
    3f6c:	0f 90       	pop	r0
    3f6e:	0f 90       	pop	r0
    3f70:	0f 90       	pop	r0
    3f72:	cf 91       	pop	r28
    3f74:	df 91       	pop	r29
    3f76:	08 95       	ret

00003f78 <LCD_ES_tGoTo>:

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
    3f78:	df 93       	push	r29
    3f7a:	cf 93       	push	r28
    3f7c:	00 d0       	rcall	.+0      	; 0x3f7e <LCD_ES_tGoTo+0x6>
    3f7e:	0f 92       	push	r0
    3f80:	cd b7       	in	r28, 0x3d	; 61
    3f82:	de b7       	in	r29, 0x3e	; 62
    3f84:	89 83       	std	Y+1, r24	; 0x01
    3f86:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    3f88:	89 81       	ldd	r24, Y+1	; 0x01
    3f8a:	88 23       	and	r24, r24
    3f8c:	41 f4       	brne	.+16     	; 0x3f9e <LCD_ES_tGoTo+0x26>
	{
		if ( x <=15)
    3f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f90:	80 31       	cpi	r24, 0x10	; 16
    3f92:	48 f5       	brcc	.+82     	; 0x3fe6 <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0x80 + x);
    3f94:	8a 81       	ldd	r24, Y+2	; 0x02
    3f96:	80 58       	subi	r24, 0x80	; 128
    3f98:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
    3f9c:	24 c0       	rjmp	.+72     	; 0x3fe6 <LCD_ES_tGoTo+0x6e>
		}
	}
	else if (1 == Line)
    3f9e:	89 81       	ldd	r24, Y+1	; 0x01
    3fa0:	81 30       	cpi	r24, 0x01	; 1
    3fa2:	41 f4       	brne	.+16     	; 0x3fb4 <LCD_ES_tGoTo+0x3c>
	{
		if ( x <=15)
    3fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa6:	80 31       	cpi	r24, 0x10	; 16
    3fa8:	f0 f4       	brcc	.+60     	; 0x3fe6 <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
    3faa:	8a 81       	ldd	r24, Y+2	; 0x02
    3fac:	80 54       	subi	r24, 0x40	; 64
    3fae:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
    3fb2:	19 c0       	rjmp	.+50     	; 0x3fe6 <LCD_ES_tGoTo+0x6e>
		}
	}// In case of 16*4 lcd
	else if(2 == Line)
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	82 30       	cpi	r24, 0x02	; 2
    3fb8:	41 f4       	brne	.+16     	; 0x3fca <LCD_ES_tGoTo+0x52>
	{
		if ( x <=15)
    3fba:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbc:	80 31       	cpi	r24, 0x10	; 16
    3fbe:	98 f4       	brcc	.+38     	; 0x3fe6 <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0x90 + x);
    3fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc2:	80 57       	subi	r24, 0x70	; 112
    3fc4:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
    3fc8:	0e c0       	rjmp	.+28     	; 0x3fe6 <LCD_ES_tGoTo+0x6e>
		}
	}else if(3 == Line)
    3fca:	89 81       	ldd	r24, Y+1	; 0x01
    3fcc:	83 30       	cpi	r24, 0x03	; 3
    3fce:	41 f4       	brne	.+16     	; 0x3fe0 <LCD_ES_tGoTo+0x68>
	{
		if ( x <=15)
    3fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd2:	80 31       	cpi	r24, 0x10	; 16
    3fd4:	40 f4       	brcc	.+16     	; 0x3fe6 <LCD_ES_tGoTo+0x6e>
		{
			Lcd_ES_tsendCmd(0xD0 + x);
    3fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd8:	80 53       	subi	r24, 0x30	; 48
    3fda:	0e 94 25 1b 	call	0x364a	; 0x364a <Lcd_ES_tsendCmd>
    3fde:	03 c0       	rjmp	.+6      	; 0x3fe6 <LCD_ES_tGoTo+0x6e>
		}
	}
	else{
		return ES_NOT_OK;
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	8b 83       	std	Y+3, r24	; 0x03
    3fe4:	01 c0       	rjmp	.+2      	; 0x3fe8 <LCD_ES_tGoTo+0x70>
	}
	return ES_OK;
    3fe6:	1b 82       	std	Y+3, r1	; 0x03
    3fe8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3fea:	0f 90       	pop	r0
    3fec:	0f 90       	pop	r0
    3fee:	0f 90       	pop	r0
    3ff0:	cf 91       	pop	r28
    3ff2:	df 91       	pop	r29
    3ff4:	08 95       	ret

00003ff6 <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
    3ffe:	65 97       	sbiw	r28, 0x15	; 21
    4000:	0f b6       	in	r0, 0x3f	; 63
    4002:	f8 94       	cli
    4004:	de bf       	out	0x3e, r29	; 62
    4006:	0f be       	out	0x3f, r0	; 63
    4008:	cd bf       	out	0x3d, r28	; 61
    400a:	9c 8b       	std	Y+20, r25	; 0x14
    400c:	8b 8b       	std	Y+19, r24	; 0x13
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
    400e:	eb 89       	ldd	r30, Y+19	; 0x13
    4010:	fc 89       	ldd	r31, Y+20	; 0x14
    4012:	8f ef       	ldi	r24, 0xFF	; 255
    4014:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
    4016:	1f 86       	std	Y+15, r1	; 0x0f
	if(copy_pu8ReturnedKey != NULL)
    4018:	8b 89       	ldd	r24, Y+19	; 0x13
    401a:	9c 89       	ldd	r25, Y+20	; 0x14
    401c:	00 97       	sbiw	r24, 0x00	; 0
    401e:	09 f4       	brne	.+2      	; 0x4022 <KPD_ES_tGetKeyPressed+0x2c>
    4020:	ed c0       	rjmp	.+474    	; 0x41fc <KPD_ES_tGetKeyPressed+0x206>
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    4022:	19 8a       	std	Y+17, r1	; 0x11
    4024:	e5 c0       	rjmp	.+458    	; 0x41f0 <KPD_ES_tGetKeyPressed+0x1fa>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
    4026:	89 89       	ldd	r24, Y+17	; 0x11
    4028:	88 2f       	mov	r24, r24
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	fc 01       	movw	r30, r24
    402e:	ea 53       	subi	r30, 0x3A	; 58
    4030:	fd 4f       	sbci	r31, 0xFD	; 253
    4032:	90 81       	ld	r25, Z
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	69 2f       	mov	r22, r25
    4038:	40 e0       	ldi	r20, 0x00	; 0
    403a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    403e:	18 8a       	std	Y+16, r1	; 0x10
    4040:	c1 c0       	rjmp	.+386    	; 0x41c4 <KPD_ES_tGetKeyPressed+0x1ce>
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    4042:	88 89       	ldd	r24, Y+16	; 0x10
    4044:	88 2f       	mov	r24, r24
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	fc 01       	movw	r30, r24
    404a:	e6 53       	subi	r30, 0x36	; 54
    404c:	fd 4f       	sbci	r31, 0xFD	; 253
    404e:	90 81       	ld	r25, Z
    4050:	9e 01       	movw	r18, r28
    4052:	2e 5e       	subi	r18, 0xEE	; 238
    4054:	3f 4f       	sbci	r19, 0xFF	; 255
    4056:	83 e0       	ldi	r24, 0x03	; 3
    4058:	69 2f       	mov	r22, r25
    405a:	a9 01       	movw	r20, r18
    405c:	0e 94 43 11 	call	0x2286	; 0x2286 <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    4060:	8a 89       	ldd	r24, Y+18	; 0x12
    4062:	88 23       	and	r24, r24
    4064:	09 f0       	breq	.+2      	; 0x4068 <KPD_ES_tGetKeyPressed+0x72>
    4066:	ab c0       	rjmp	.+342    	; 0x41be <KPD_ES_tGetKeyPressed+0x1c8>
    4068:	80 e0       	ldi	r24, 0x00	; 0
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	a0 ea       	ldi	r26, 0xA0	; 160
    406e:	b1 e4       	ldi	r27, 0x41	; 65
    4070:	8b 87       	std	Y+11, r24	; 0x0b
    4072:	9c 87       	std	Y+12, r25	; 0x0c
    4074:	ad 87       	std	Y+13, r26	; 0x0d
    4076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4078:	6b 85       	ldd	r22, Y+11	; 0x0b
    407a:	7c 85       	ldd	r23, Y+12	; 0x0c
    407c:	8d 85       	ldd	r24, Y+13	; 0x0d
    407e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	4a e7       	ldi	r20, 0x7A	; 122
    4086:	55 e4       	ldi	r21, 0x45	; 69
    4088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	8f 83       	std	Y+7, r24	; 0x07
    4092:	98 87       	std	Y+8, r25	; 0x08
    4094:	a9 87       	std	Y+9, r26	; 0x09
    4096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4098:	6f 81       	ldd	r22, Y+7	; 0x07
    409a:	78 85       	ldd	r23, Y+8	; 0x08
    409c:	89 85       	ldd	r24, Y+9	; 0x09
    409e:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	40 e8       	ldi	r20, 0x80	; 128
    40a6:	5f e3       	ldi	r21, 0x3F	; 63
    40a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40ac:	88 23       	and	r24, r24
    40ae:	2c f4       	brge	.+10     	; 0x40ba <KPD_ES_tGetKeyPressed+0xc4>
		__ticks = 1;
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	9e 83       	std	Y+6, r25	; 0x06
    40b6:	8d 83       	std	Y+5, r24	; 0x05
    40b8:	3f c0       	rjmp	.+126    	; 0x4138 <KPD_ES_tGetKeyPressed+0x142>
	else if (__tmp > 65535)
    40ba:	6f 81       	ldd	r22, Y+7	; 0x07
    40bc:	78 85       	ldd	r23, Y+8	; 0x08
    40be:	89 85       	ldd	r24, Y+9	; 0x09
    40c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c2:	20 e0       	ldi	r18, 0x00	; 0
    40c4:	3f ef       	ldi	r19, 0xFF	; 255
    40c6:	4f e7       	ldi	r20, 0x7F	; 127
    40c8:	57 e4       	ldi	r21, 0x47	; 71
    40ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40ce:	18 16       	cp	r1, r24
    40d0:	4c f5       	brge	.+82     	; 0x4124 <KPD_ES_tGetKeyPressed+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    40d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    40d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	40 e2       	ldi	r20, 0x20	; 32
    40e0:	51 e4       	ldi	r21, 0x41	; 65
    40e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e6:	dc 01       	movw	r26, r24
    40e8:	cb 01       	movw	r24, r22
    40ea:	bc 01       	movw	r22, r24
    40ec:	cd 01       	movw	r24, r26
    40ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f2:	dc 01       	movw	r26, r24
    40f4:	cb 01       	movw	r24, r22
    40f6:	9e 83       	std	Y+6, r25	; 0x06
    40f8:	8d 83       	std	Y+5, r24	; 0x05
    40fa:	0f c0       	rjmp	.+30     	; 0x411a <KPD_ES_tGetKeyPressed+0x124>
    40fc:	80 e9       	ldi	r24, 0x90	; 144
    40fe:	91 e0       	ldi	r25, 0x01	; 1
    4100:	9c 83       	std	Y+4, r25	; 0x04
    4102:	8b 83       	std	Y+3, r24	; 0x03
    4104:	8b 81       	ldd	r24, Y+3	; 0x03
    4106:	9c 81       	ldd	r25, Y+4	; 0x04
    4108:	01 97       	sbiw	r24, 0x01	; 1
    410a:	f1 f7       	brne	.-4      	; 0x4108 <KPD_ES_tGetKeyPressed+0x112>
    410c:	9c 83       	std	Y+4, r25	; 0x04
    410e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4110:	8d 81       	ldd	r24, Y+5	; 0x05
    4112:	9e 81       	ldd	r25, Y+6	; 0x06
    4114:	01 97       	sbiw	r24, 0x01	; 1
    4116:	9e 83       	std	Y+6, r25	; 0x06
    4118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    411a:	8d 81       	ldd	r24, Y+5	; 0x05
    411c:	9e 81       	ldd	r25, Y+6	; 0x06
    411e:	00 97       	sbiw	r24, 0x00	; 0
    4120:	69 f7       	brne	.-38     	; 0x40fc <KPD_ES_tGetKeyPressed+0x106>
    4122:	14 c0       	rjmp	.+40     	; 0x414c <KPD_ES_tGetKeyPressed+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4124:	6f 81       	ldd	r22, Y+7	; 0x07
    4126:	78 85       	ldd	r23, Y+8	; 0x08
    4128:	89 85       	ldd	r24, Y+9	; 0x09
    412a:	9a 85       	ldd	r25, Y+10	; 0x0a
    412c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	9e 83       	std	Y+6, r25	; 0x06
    4136:	8d 83       	std	Y+5, r24	; 0x05
    4138:	8d 81       	ldd	r24, Y+5	; 0x05
    413a:	9e 81       	ldd	r25, Y+6	; 0x06
    413c:	9a 83       	std	Y+2, r25	; 0x02
    413e:	89 83       	std	Y+1, r24	; 0x01
    4140:	89 81       	ldd	r24, Y+1	; 0x01
    4142:	9a 81       	ldd	r25, Y+2	; 0x02
    4144:	01 97       	sbiw	r24, 0x01	; 1
    4146:	f1 f7       	brne	.-4      	; 0x4144 <KPD_ES_tGetKeyPressed+0x14e>
    4148:	9a 83       	std	Y+2, r25	; 0x02
    414a:	89 83       	std	Y+1, r24	; 0x01
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    414c:	88 89       	ldd	r24, Y+16	; 0x10
    414e:	88 2f       	mov	r24, r24
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	fc 01       	movw	r30, r24
    4154:	e6 53       	subi	r30, 0x36	; 54
    4156:	fd 4f       	sbci	r31, 0xFD	; 253
    4158:	90 81       	ld	r25, Z
    415a:	9e 01       	movw	r18, r28
    415c:	2e 5e       	subi	r18, 0xEE	; 238
    415e:	3f 4f       	sbci	r19, 0xFF	; 255
    4160:	83 e0       	ldi	r24, 0x03	; 3
    4162:	69 2f       	mov	r22, r25
    4164:	a9 01       	movw	r20, r18
    4166:	0e 94 43 11 	call	0x2286	; 0x2286 <DIO_ES_tGetPinValue>
    416a:	0f c0       	rjmp	.+30     	; 0x418a <KPD_ES_tGetKeyPressed+0x194>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    416c:	88 89       	ldd	r24, Y+16	; 0x10
    416e:	88 2f       	mov	r24, r24
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	fc 01       	movw	r30, r24
    4174:	e6 53       	subi	r30, 0x36	; 54
    4176:	fd 4f       	sbci	r31, 0xFD	; 253
    4178:	90 81       	ld	r25, Z
    417a:	9e 01       	movw	r18, r28
    417c:	2e 5e       	subi	r18, 0xEE	; 238
    417e:	3f 4f       	sbci	r19, 0xFF	; 255
    4180:	83 e0       	ldi	r24, 0x03	; 3
    4182:	69 2f       	mov	r22, r25
    4184:	a9 01       	movw	r20, r18
    4186:	0e 94 43 11 	call	0x2286	; 0x2286 <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    418a:	8a 89       	ldd	r24, Y+18	; 0x12
    418c:	88 23       	and	r24, r24
    418e:	71 f3       	breq	.-36     	; 0x416c <KPD_ES_tGetKeyPressed+0x176>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    4190:	89 89       	ldd	r24, Y+17	; 0x11
    4192:	48 2f       	mov	r20, r24
    4194:	50 e0       	ldi	r21, 0x00	; 0
    4196:	88 89       	ldd	r24, Y+16	; 0x10
    4198:	28 2f       	mov	r18, r24
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	ca 01       	movw	r24, r20
    419e:	88 0f       	add	r24, r24
    41a0:	99 1f       	adc	r25, r25
    41a2:	88 0f       	add	r24, r24
    41a4:	99 1f       	adc	r25, r25
    41a6:	82 0f       	add	r24, r18
    41a8:	93 1f       	adc	r25, r19
    41aa:	fc 01       	movw	r30, r24
    41ac:	ea 54       	subi	r30, 0x4A	; 74
    41ae:	fd 4f       	sbci	r31, 0xFD	; 253
    41b0:	80 81       	ld	r24, Z
    41b2:	eb 89       	ldd	r30, Y+19	; 0x13
    41b4:	fc 89       	ldd	r31, Y+20	; 0x14
    41b6:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	8f 87       	std	Y+15, r24	; 0x0f
    41bc:	07 c0       	rjmp	.+14     	; 0x41cc <KPD_ES_tGetKeyPressed+0x1d6>
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
    41be:	88 89       	ldd	r24, Y+16	; 0x10
    41c0:	8f 5f       	subi	r24, 0xFF	; 255
    41c2:	88 8b       	std	Y+16, r24	; 0x10
    41c4:	88 89       	ldd	r24, Y+16	; 0x10
    41c6:	84 30       	cpi	r24, 0x04	; 4
    41c8:	08 f4       	brcc	.+2      	; 0x41cc <KPD_ES_tGetKeyPressed+0x1d6>
    41ca:	3b cf       	rjmp	.-394    	; 0x4042 <KPD_ES_tGetKeyPressed+0x4c>
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    41cc:	89 89       	ldd	r24, Y+17	; 0x11
    41ce:	88 2f       	mov	r24, r24
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	fc 01       	movw	r30, r24
    41d4:	ea 53       	subi	r30, 0x3A	; 58
    41d6:	fd 4f       	sbci	r31, 0xFD	; 253
    41d8:	90 81       	ld	r25, Z
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	69 2f       	mov	r22, r25
    41de:	41 e0       	ldi	r20, 0x01	; 1
    41e0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
			if(Local_u8Flag == HIGH)
    41e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41e6:	81 30       	cpi	r24, 0x01	; 1
    41e8:	39 f0       	breq	.+14     	; 0x41f8 <KPD_ES_tGetKeyPressed+0x202>
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    41ea:	89 89       	ldd	r24, Y+17	; 0x11
    41ec:	8f 5f       	subi	r24, 0xFF	; 255
    41ee:	89 8b       	std	Y+17, r24	; 0x11
    41f0:	89 89       	ldd	r24, Y+17	; 0x11
    41f2:	84 30       	cpi	r24, 0x04	; 4
    41f4:	08 f4       	brcc	.+2      	; 0x41f8 <KPD_ES_tGetKeyPressed+0x202>
    41f6:	17 cf       	rjmp	.-466    	; 0x4026 <KPD_ES_tGetKeyPressed+0x30>


	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
    41f8:	1d 8a       	std	Y+21, r1	; 0x15
    41fa:	02 c0       	rjmp	.+4      	; 0x4200 <KPD_ES_tGetKeyPressed+0x20a>
				break;
		}


	}else{
		return ES_NOT_OK;
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	8d 8b       	std	Y+21, r24	; 0x15
    4200:	8d 89       	ldd	r24, Y+21	; 0x15
	}
	return ES_OK;
}
    4202:	65 96       	adiw	r28, 0x15	; 21
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	f8 94       	cli
    4208:	de bf       	out	0x3e, r29	; 62
    420a:	0f be       	out	0x3f, r0	; 63
    420c:	cd bf       	out	0x3d, r28	; 61
    420e:	cf 91       	pop	r28
    4210:	df 91       	pop	r29
    4212:	08 95       	ret

00004214 <DC_Motor_Init>:
#include "DC_Motor.h"
#include "DC_MotorCfg.h"


ES_t DC_Motor_Init(DC_MOTOR_Index Motor)
{
    4214:	df 93       	push	r29
    4216:	cf 93       	push	r28
    4218:	00 d0       	rcall	.+0      	; 0x421a <DC_Motor_Init+0x6>
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
    421e:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    4220:	89 81       	ldd	r24, Y+1	; 0x01
    4222:	88 23       	and	r24, r24
    4224:	59 f4       	brne	.+22     	; 0x423c <DC_Motor_Init+0x28>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN1, OUTPUT);
    4226:	82 e0       	ldi	r24, 0x02	; 2
    4228:	61 e0       	ldi	r22, 0x01	; 1
    422a:	41 e0       	ldi	r20, 0x01	; 1
    422c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN2, OUTPUT);
    4230:	82 e0       	ldi	r24, 0x02	; 2
    4232:	62 e0       	ldi	r22, 0x02	; 2
    4234:	41 e0       	ldi	r20, 0x01	; 1
    4236:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
    423a:	11 c0       	rjmp	.+34     	; 0x425e <DC_Motor_Init+0x4a>
	}else if(Motor == DC_MOTOR_1){
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	81 30       	cpi	r24, 0x01	; 1
    4240:	59 f4       	brne	.+22     	; 0x4258 <DC_Motor_Init+0x44>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN3, OUTPUT);
    4242:	82 e0       	ldi	r24, 0x02	; 2
    4244:	63 e0       	ldi	r22, 0x03	; 3
    4246:	41 e0       	ldi	r20, 0x01	; 1
    4248:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
		DIO_ES_tSetPinDirection(DC_MOTOR_REG, IN4, OUTPUT);
    424c:	82 e0       	ldi	r24, 0x02	; 2
    424e:	64 e0       	ldi	r22, 0x04	; 4
    4250:	41 e0       	ldi	r20, 0x01	; 1
    4252:	0e 94 65 0f 	call	0x1eca	; 0x1eca <DIO_ES_tSetPinDirection>
    4256:	03 c0       	rjmp	.+6      	; 0x425e <DC_Motor_Init+0x4a>
	}else{
		return ES_NOT_OK;
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	8a 83       	std	Y+2, r24	; 0x02
    425c:	01 c0       	rjmp	.+2      	; 0x4260 <DC_Motor_Init+0x4c>
	}
	return ES_OK;
    425e:	1a 82       	std	Y+2, r1	; 0x02
    4260:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4262:	0f 90       	pop	r0
    4264:	0f 90       	pop	r0
    4266:	cf 91       	pop	r28
    4268:	df 91       	pop	r29
    426a:	08 95       	ret

0000426c <DC_Motor_Stop>:


ES_t DC_Motor_Stop(DC_MOTOR_Index Motor)
{
    426c:	df 93       	push	r29
    426e:	cf 93       	push	r28
    4270:	00 d0       	rcall	.+0      	; 0x4272 <DC_Motor_Stop+0x6>
    4272:	cd b7       	in	r28, 0x3d	; 61
    4274:	de b7       	in	r29, 0x3e	; 62
    4276:	89 83       	std	Y+1, r24	; 0x01
	if(Motor == DC_MOTOR_0){
    4278:	89 81       	ldd	r24, Y+1	; 0x01
    427a:	88 23       	and	r24, r24
    427c:	59 f4       	brne	.+22     	; 0x4294 <DC_Motor_Stop+0x28>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    427e:	82 e0       	ldi	r24, 0x02	; 2
    4280:	61 e0       	ldi	r22, 0x01	; 1
    4282:	40 e0       	ldi	r20, 0x00	; 0
    4284:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    4288:	82 e0       	ldi	r24, 0x02	; 2
    428a:	62 e0       	ldi	r22, 0x02	; 2
    428c:	40 e0       	ldi	r20, 0x00	; 0
    428e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    4292:	11 c0       	rjmp	.+34     	; 0x42b6 <DC_Motor_Stop+0x4a>
	}else if(Motor == DC_MOTOR_1){
    4294:	89 81       	ldd	r24, Y+1	; 0x01
    4296:	81 30       	cpi	r24, 0x01	; 1
    4298:	59 f4       	brne	.+22     	; 0x42b0 <DC_Motor_Stop+0x44>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    429a:	82 e0       	ldi	r24, 0x02	; 2
    429c:	63 e0       	ldi	r22, 0x03	; 3
    429e:	40 e0       	ldi	r20, 0x00	; 0
    42a0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    42a4:	82 e0       	ldi	r24, 0x02	; 2
    42a6:	64 e0       	ldi	r22, 0x04	; 4
    42a8:	40 e0       	ldi	r20, 0x00	; 0
    42aa:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    42ae:	03 c0       	rjmp	.+6      	; 0x42b6 <DC_Motor_Stop+0x4a>
	}else{
		return ES_NOT_OK;
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	8a 83       	std	Y+2, r24	; 0x02
    42b4:	01 c0       	rjmp	.+2      	; 0x42b8 <DC_Motor_Stop+0x4c>
	}
	return ES_OK;
    42b6:	1a 82       	std	Y+2, r1	; 0x02
    42b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    42ba:	0f 90       	pop	r0
    42bc:	0f 90       	pop	r0
    42be:	cf 91       	pop	r28
    42c0:	df 91       	pop	r29
    42c2:	08 95       	ret

000042c4 <DC_Motor_Move>:


ES_t DC_Motor_Move(DC_MOTOR_Index Motor,DC_MOTOR_Cfg MotorCfg)
{
    42c4:	df 93       	push	r29
    42c6:	cf 93       	push	r28
    42c8:	00 d0       	rcall	.+0      	; 0x42ca <DC_Motor_Move+0x6>
    42ca:	00 d0       	rcall	.+0      	; 0x42cc <DC_Motor_Move+0x8>
    42cc:	0f 92       	push	r0
    42ce:	cd b7       	in	r28, 0x3d	; 61
    42d0:	de b7       	in	r29, 0x3e	; 62
    42d2:	89 83       	std	Y+1, r24	; 0x01
    42d4:	6a 83       	std	Y+2, r22	; 0x02
	switch(MotorCfg){
    42d6:	8a 81       	ldd	r24, Y+2	; 0x02
    42d8:	28 2f       	mov	r18, r24
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	3d 83       	std	Y+5, r19	; 0x05
    42de:	2c 83       	std	Y+4, r18	; 0x04
    42e0:	8c 81       	ldd	r24, Y+4	; 0x04
    42e2:	9d 81       	ldd	r25, Y+5	; 0x05
    42e4:	00 97       	sbiw	r24, 0x00	; 0
    42e6:	31 f0       	breq	.+12     	; 0x42f4 <DC_Motor_Move+0x30>
    42e8:	2c 81       	ldd	r18, Y+4	; 0x04
    42ea:	3d 81       	ldd	r19, Y+5	; 0x05
    42ec:	21 30       	cpi	r18, 0x01	; 1
    42ee:	31 05       	cpc	r19, r1
    42f0:	e9 f0       	breq	.+58     	; 0x432c <DC_Motor_Move+0x68>
    42f2:	38 c0       	rjmp	.+112    	; 0x4364 <DC_Motor_Move+0xa0>
	case DC_MOTOR_CW:
		if(Motor == DC_MOTOR_0){
    42f4:	89 81       	ldd	r24, Y+1	; 0x01
    42f6:	88 23       	and	r24, r24
    42f8:	59 f4       	brne	.+22     	; 0x4310 <DC_Motor_Move+0x4c>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, HIGH);
    42fa:	82 e0       	ldi	r24, 0x02	; 2
    42fc:	61 e0       	ldi	r22, 0x01	; 1
    42fe:	41 e0       	ldi	r20, 0x01	; 1
    4300:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, LOW);
    4304:	82 e0       	ldi	r24, 0x02	; 2
    4306:	62 e0       	ldi	r22, 0x02	; 2
    4308:	40 e0       	ldi	r20, 0x00	; 0
    430a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    430e:	2d c0       	rjmp	.+90     	; 0x436a <DC_Motor_Move+0xa6>
		}else if(Motor == DC_MOTOR_1){
    4310:	89 81       	ldd	r24, Y+1	; 0x01
    4312:	81 30       	cpi	r24, 0x01	; 1
    4314:	51 f5       	brne	.+84     	; 0x436a <DC_Motor_Move+0xa6>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, HIGH);
    4316:	82 e0       	ldi	r24, 0x02	; 2
    4318:	63 e0       	ldi	r22, 0x03	; 3
    431a:	41 e0       	ldi	r20, 0x01	; 1
    431c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, LOW);
    4320:	82 e0       	ldi	r24, 0x02	; 2
    4322:	64 e0       	ldi	r22, 0x04	; 4
    4324:	40 e0       	ldi	r20, 0x00	; 0
    4326:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    432a:	1f c0       	rjmp	.+62     	; 0x436a <DC_Motor_Move+0xa6>
		}
		break;
	case DC_MOTOR_CCW:
		if(Motor == DC_MOTOR_0){
    432c:	89 81       	ldd	r24, Y+1	; 0x01
    432e:	88 23       	and	r24, r24
    4330:	59 f4       	brne	.+22     	; 0x4348 <DC_Motor_Move+0x84>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN1, LOW);
    4332:	82 e0       	ldi	r24, 0x02	; 2
    4334:	61 e0       	ldi	r22, 0x01	; 1
    4336:	40 e0       	ldi	r20, 0x00	; 0
    4338:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN2, HIGH);
    433c:	82 e0       	ldi	r24, 0x02	; 2
    433e:	62 e0       	ldi	r22, 0x02	; 2
    4340:	41 e0       	ldi	r20, 0x01	; 1
    4342:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    4346:	11 c0       	rjmp	.+34     	; 0x436a <DC_Motor_Move+0xa6>
		}else if(Motor == DC_MOTOR_1){
    4348:	89 81       	ldd	r24, Y+1	; 0x01
    434a:	81 30       	cpi	r24, 0x01	; 1
    434c:	71 f4       	brne	.+28     	; 0x436a <DC_Motor_Move+0xa6>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN3, LOW);
    434e:	82 e0       	ldi	r24, 0x02	; 2
    4350:	63 e0       	ldi	r22, 0x03	; 3
    4352:	40 e0       	ldi	r20, 0x00	; 0
    4354:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DC_MOTOR_REG, IN4, HIGH);
    4358:	82 e0       	ldi	r24, 0x02	; 2
    435a:	64 e0       	ldi	r22, 0x04	; 4
    435c:	41 e0       	ldi	r20, 0x01	; 1
    435e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <DIO_ES_tSetPinValue>
    4362:	03 c0       	rjmp	.+6      	; 0x436a <DC_Motor_Move+0xa6>
		}
		break;
	default:
		return ES_NOT_OK;
    4364:	31 e0       	ldi	r19, 0x01	; 1
    4366:	3b 83       	std	Y+3, r19	; 0x03
    4368:	01 c0       	rjmp	.+2      	; 0x436c <DC_Motor_Move+0xa8>
	}
	return ES_OK;
    436a:	1b 82       	std	Y+3, r1	; 0x03
    436c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    436e:	0f 90       	pop	r0
    4370:	0f 90       	pop	r0
    4372:	0f 90       	pop	r0
    4374:	0f 90       	pop	r0
    4376:	0f 90       	pop	r0
    4378:	cf 91       	pop	r28
    437a:	df 91       	pop	r29
    437c:	08 95       	ret

0000437e <DC_Motor_SetSpeed>:


ES_t DC_Motor_SetSpeed(DC_MOTOR_Index Motor, u8 Speed)
{
    437e:	df 93       	push	r29
    4380:	cf 93       	push	r28
    4382:	cd b7       	in	r28, 0x3d	; 61
    4384:	de b7       	in	r29, 0x3e	; 62
    4386:	2c 97       	sbiw	r28, 0x0c	; 12
    4388:	0f b6       	in	r0, 0x3f	; 63
    438a:	f8 94       	cli
    438c:	de bf       	out	0x3e, r29	; 62
    438e:	0f be       	out	0x3f, r0	; 63
    4390:	cd bf       	out	0x3d, r28	; 61
    4392:	8e 83       	std	Y+6, r24	; 0x06
    4394:	6f 83       	std	Y+7, r22	; 0x07
	TIMER0_Config_t Timer0Cfg = {TIMER0_PHASE_CORRECT_MODE, TIMER0_PRESCALAR_64, OC0_NON_INVERTING, TOIE0_DISABLE, OCIE0_DISABLE};
    4396:	ce 01       	movw	r24, r28
    4398:	01 96       	adiw	r24, 0x01	; 1
    439a:	99 87       	std	Y+9, r25	; 0x09
    439c:	88 87       	std	Y+8, r24	; 0x08
    439e:	ee ec       	ldi	r30, 0xCE	; 206
    43a0:	f2 e0       	ldi	r31, 0x02	; 2
    43a2:	fb 87       	std	Y+11, r31	; 0x0b
    43a4:	ea 87       	std	Y+10, r30	; 0x0a
    43a6:	f5 e0       	ldi	r31, 0x05	; 5
    43a8:	fc 87       	std	Y+12, r31	; 0x0c
    43aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    43ac:	fb 85       	ldd	r31, Y+11	; 0x0b
    43ae:	00 80       	ld	r0, Z
    43b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    43b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    43b4:	01 96       	adiw	r24, 0x01	; 1
    43b6:	9b 87       	std	Y+11, r25	; 0x0b
    43b8:	8a 87       	std	Y+10, r24	; 0x0a
    43ba:	e8 85       	ldd	r30, Y+8	; 0x08
    43bc:	f9 85       	ldd	r31, Y+9	; 0x09
    43be:	00 82       	st	Z, r0
    43c0:	88 85       	ldd	r24, Y+8	; 0x08
    43c2:	99 85       	ldd	r25, Y+9	; 0x09
    43c4:	01 96       	adiw	r24, 0x01	; 1
    43c6:	99 87       	std	Y+9, r25	; 0x09
    43c8:	88 87       	std	Y+8, r24	; 0x08
    43ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    43cc:	91 50       	subi	r25, 0x01	; 1
    43ce:	9c 87       	std	Y+12, r25	; 0x0c
    43d0:	ec 85       	ldd	r30, Y+12	; 0x0c
    43d2:	ee 23       	and	r30, r30
    43d4:	51 f7       	brne	.-44     	; 0x43aa <DC_Motor_SetSpeed+0x2c>
	TIMER0_Init(&Timer0Cfg);
    43d6:	ce 01       	movw	r24, r28
    43d8:	01 96       	adiw	r24, 0x01	; 1
    43da:	0e 94 75 07 	call	0xeea	; 0xeea <TIMER0_Init>


	switch(Motor)
    43de:	8e 81       	ldd	r24, Y+6	; 0x06
    43e0:	88 2f       	mov	r24, r24
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	00 97       	sbiw	r24, 0x00	; 0
    43e6:	79 f4       	brne	.+30     	; 0x4406 <DC_Motor_SetSpeed+0x88>
	{
	case DC_MOTOR_0:
		PWM_Set_DutyCycle(Speed);
    43e8:	8f 81       	ldd	r24, Y+7	; 0x07
    43ea:	88 2f       	mov	r24, r24
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	a0 e0       	ldi	r26, 0x00	; 0
    43f0:	b0 e0       	ldi	r27, 0x00	; 0
    43f2:	bc 01       	movw	r22, r24
    43f4:	cd 01       	movw	r24, r26
    43f6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	bc 01       	movw	r22, r24
    4400:	cd 01       	movw	r24, r26
    4402:	0e 94 c8 08 	call	0x1190	; 0x1190 <PWM_Set_DutyCycle>
	}


	return ES_OK;
    4406:	80 e0       	ldi	r24, 0x00	; 0
}
    4408:	2c 96       	adiw	r28, 0x0c	; 12
    440a:	0f b6       	in	r0, 0x3f	; 63
    440c:	f8 94       	cli
    440e:	de bf       	out	0x3e, r29	; 62
    4410:	0f be       	out	0x3f, r0	; 63
    4412:	cd bf       	out	0x3d, r28	; 61
    4414:	cf 91       	pop	r28
    4416:	df 91       	pop	r29
    4418:	08 95       	ret

0000441a <Enter_IRQ_CallBack>:
State currentState;



void Enter_IRQ_CallBack(void)
{
    441a:	df 93       	push	r29
    441c:	cf 93       	push	r28
    441e:	cd b7       	in	r28, 0x3d	; 61
    4420:	de b7       	in	r29, 0x3e	; 62
	currentState = STATE_MAIN_SCREEN;
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	80 93 1a 03 	sts	0x031A, r24
}
    4428:	cf 91       	pop	r28
    442a:	df 91       	pop	r29
    442c:	08 95       	ret

0000442e <main>:



int main()
{
    442e:	0f 93       	push	r16
    4430:	1f 93       	push	r17
    4432:	df 93       	push	r29
    4434:	cf 93       	push	r28
    4436:	cd b7       	in	r28, 0x3d	; 61
    4438:	de b7       	in	r29, 0x3e	; 62
    443a:	cb 58       	subi	r28, 0x8B	; 139
    443c:	d0 40       	sbci	r29, 0x00	; 0
    443e:	0f b6       	in	r0, 0x3f	; 63
    4440:	f8 94       	cli
    4442:	de bf       	out	0x3e, r29	; 62
    4444:	0f be       	out	0x3f, r0	; 63
    4446:	cd bf       	out	0x3d, r28	; 61
	DIO_ES_tInit();
    4448:	0e 94 0e 13 	call	0x261c	; 0x261c <DIO_ES_tInit>
	Lcd_ES_tInit();
    444c:	0e 94 85 1a 	call	0x350a	; 0x350a <Lcd_ES_tInit>
	Stepper_Init();
    4450:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <Stepper_Init>
	sei();
    4454:	78 94       	sei


	DC_Motor_Init(DC_MOTOR_0);
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	0e 94 0a 21 	call	0x4214	; 0x4214 <DC_Motor_Init>

	u8 Value;
	char Option,Option2,Option3,Option4,Option5;
	u8 count=0;
    445c:	fe 01       	movw	r30, r28
    445e:	ed 57       	subi	r30, 0x7D	; 125
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	10 82       	st	Z, r1
	u8 stepperAngle=0;
    4464:	fe 01       	movw	r30, r28
    4466:	ee 57       	subi	r30, 0x7E	; 126
    4468:	ff 4f       	sbci	r31, 0xFF	; 255
    446a:	10 82       	st	Z, r1
	int ServoAngle=0;
    446c:	fe 01       	movw	r30, r28
    446e:	e0 58       	subi	r30, 0x80	; 128
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	11 82       	std	Z+1, r1	; 0x01
    4474:	10 82       	st	Z, r1

	u8 flag=0;
    4476:	fe 01       	movw	r30, r28
    4478:	e1 58       	subi	r30, 0x81	; 129
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	10 82       	st	Z, r1

	EXI_TriggerEdge(EX_INT2,RISING_EDGE);
    447e:	82 e0       	ldi	r24, 0x02	; 2
    4480:	63 e0       	ldi	r22, 0x03	; 3
    4482:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <EXI_TriggerEdge>
	EXI_ENABLE(EX_INT2);
    4486:	82 e0       	ldi	r24, 0x02	; 2
    4488:	0e 94 56 0d 	call	0x1aac	; 0x1aac <EXI_ENABLE>
	EXI_Set_CallBack(EX_INT2,Enter_IRQ_CallBack);
    448c:	2d e0       	ldi	r18, 0x0D	; 13
    448e:	32 e2       	ldi	r19, 0x22	; 34
    4490:	82 e0       	ldi	r24, 0x02	; 2
    4492:	b9 01       	movw	r22, r18
    4494:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <EXI_Set_CallBack>


	currentState = STATE_NULL_STATE;
    4498:	10 92 1a 03 	sts	0x031A, r1


	Lcd_ES_tsendString("Enter Password !");
    449c:	80 e6       	ldi	r24, 0x60	; 96
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
	LCD_ES_tGoTo(1, 5);
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	65 e0       	ldi	r22, 0x05	; 5
    44a8:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <LCD_ES_tGoTo>

	while(1)
	{
		switch(currentState)
    44ac:	80 91 1a 03 	lds	r24, 0x031A
    44b0:	28 2f       	mov	r18, r24
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	c6 57       	subi	r28, 0x76	; 118
    44b6:	df 4f       	sbci	r29, 0xFF	; 255
    44b8:	39 83       	std	Y+1, r19	; 0x01
    44ba:	28 83       	st	Y, r18
    44bc:	ca 58       	subi	r28, 0x8A	; 138
    44be:	d0 40       	sbci	r29, 0x00	; 0
    44c0:	c6 57       	subi	r28, 0x76	; 118
    44c2:	df 4f       	sbci	r29, 0xFF	; 255
    44c4:	48 81       	ld	r20, Y
    44c6:	59 81       	ldd	r21, Y+1	; 0x01
    44c8:	ca 58       	subi	r28, 0x8A	; 138
    44ca:	d0 40       	sbci	r29, 0x00	; 0
    44cc:	43 30       	cpi	r20, 0x03	; 3
    44ce:	51 05       	cpc	r21, r1
    44d0:	09 f4       	brne	.+2      	; 0x44d4 <main+0xa6>
    44d2:	e5 c3       	rjmp	.+1994   	; 0x4c9e <main+0x870>
    44d4:	c6 57       	subi	r28, 0x76	; 118
    44d6:	df 4f       	sbci	r29, 0xFF	; 255
    44d8:	88 81       	ld	r24, Y
    44da:	99 81       	ldd	r25, Y+1	; 0x01
    44dc:	ca 58       	subi	r28, 0x8A	; 138
    44de:	d0 40       	sbci	r29, 0x00	; 0
    44e0:	84 30       	cpi	r24, 0x04	; 4
    44e2:	91 05       	cpc	r25, r1
    44e4:	f4 f4       	brge	.+60     	; 0x4522 <main+0xf4>
    44e6:	c6 57       	subi	r28, 0x76	; 118
    44e8:	df 4f       	sbci	r29, 0xFF	; 255
    44ea:	e8 81       	ld	r30, Y
    44ec:	f9 81       	ldd	r31, Y+1	; 0x01
    44ee:	ca 58       	subi	r28, 0x8A	; 138
    44f0:	d0 40       	sbci	r29, 0x00	; 0
    44f2:	e1 30       	cpi	r30, 0x01	; 1
    44f4:	f1 05       	cpc	r31, r1
    44f6:	09 f4       	brne	.+2      	; 0x44fa <main+0xcc>
    44f8:	ec c0       	rjmp	.+472    	; 0x46d2 <main+0x2a4>
    44fa:	c6 57       	subi	r28, 0x76	; 118
    44fc:	df 4f       	sbci	r29, 0xFF	; 255
    44fe:	28 81       	ld	r18, Y
    4500:	39 81       	ldd	r19, Y+1	; 0x01
    4502:	ca 58       	subi	r28, 0x8A	; 138
    4504:	d0 40       	sbci	r29, 0x00	; 0
    4506:	22 30       	cpi	r18, 0x02	; 2
    4508:	31 05       	cpc	r19, r1
    450a:	0c f0       	brlt	.+2      	; 0x450e <main+0xe0>
    450c:	bf c2       	rjmp	.+1406   	; 0x4a8c <main+0x65e>
    450e:	c6 57       	subi	r28, 0x76	; 118
    4510:	df 4f       	sbci	r29, 0xFF	; 255
    4512:	48 81       	ld	r20, Y
    4514:	59 81       	ldd	r21, Y+1	; 0x01
    4516:	ca 58       	subi	r28, 0x8A	; 138
    4518:	d0 40       	sbci	r29, 0x00	; 0
    451a:	41 15       	cp	r20, r1
    451c:	51 05       	cpc	r21, r1
    451e:	01 f1       	breq	.+64     	; 0x4560 <main+0x132>
    4520:	c5 cf       	rjmp	.-118    	; 0x44ac <main+0x7e>
    4522:	c6 57       	subi	r28, 0x76	; 118
    4524:	df 4f       	sbci	r29, 0xFF	; 255
    4526:	88 81       	ld	r24, Y
    4528:	99 81       	ldd	r25, Y+1	; 0x01
    452a:	ca 58       	subi	r28, 0x8A	; 138
    452c:	d0 40       	sbci	r29, 0x00	; 0
    452e:	85 30       	cpi	r24, 0x05	; 5
    4530:	91 05       	cpc	r25, r1
    4532:	09 f4       	brne	.+2      	; 0x4536 <main+0x108>
    4534:	6b c6       	rjmp	.+3286   	; 0x520c <main+0xdde>
    4536:	c6 57       	subi	r28, 0x76	; 118
    4538:	df 4f       	sbci	r29, 0xFF	; 255
    453a:	e8 81       	ld	r30, Y
    453c:	f9 81       	ldd	r31, Y+1	; 0x01
    453e:	ca 58       	subi	r28, 0x8A	; 138
    4540:	d0 40       	sbci	r29, 0x00	; 0
    4542:	e5 30       	cpi	r30, 0x05	; 5
    4544:	f1 05       	cpc	r31, r1
    4546:	0c f4       	brge	.+2      	; 0x454a <main+0x11c>
    4548:	e7 c5       	rjmp	.+3022   	; 0x5118 <main+0xcea>
    454a:	c6 57       	subi	r28, 0x76	; 118
    454c:	df 4f       	sbci	r29, 0xFF	; 255
    454e:	28 81       	ld	r18, Y
    4550:	39 81       	ldd	r19, Y+1	; 0x01
    4552:	ca 58       	subi	r28, 0x8A	; 138
    4554:	d0 40       	sbci	r29, 0x00	; 0
    4556:	26 30       	cpi	r18, 0x06	; 6
    4558:	31 05       	cpc	r19, r1
    455a:	09 f4       	brne	.+2      	; 0x455e <main+0x130>
    455c:	64 c7       	rjmp	.+3784   	; 0x5426 <main+0xff8>
    455e:	a6 cf       	rjmp	.-180    	; 0x44ac <main+0x7e>
		{
		case STATE_NULL_STATE:
			DIO_ES_tTOGPin(DIO_U8_PORT_D, DIO_U8_PIN_7);
    4560:	83 e0       	ldi	r24, 0x03	; 3
    4562:	67 e0       	ldi	r22, 0x07	; 7
    4564:	0e 94 99 12 	call	0x2532	; 0x2532 <DIO_ES_tTOGPin>
    4568:	fe 01       	movw	r30, r28
    456a:	e5 58       	subi	r30, 0x85	; 133
    456c:	ff 4f       	sbci	r31, 0xFF	; 255
    456e:	80 e0       	ldi	r24, 0x00	; 0
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	aa ef       	ldi	r26, 0xFA	; 250
    4574:	b3 e4       	ldi	r27, 0x43	; 67
    4576:	80 83       	st	Z, r24
    4578:	91 83       	std	Z+1, r25	; 0x01
    457a:	a2 83       	std	Z+2, r26	; 0x02
    457c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    457e:	8e 01       	movw	r16, r28
    4580:	09 58       	subi	r16, 0x89	; 137
    4582:	1f 4f       	sbci	r17, 0xFF	; 255
    4584:	fe 01       	movw	r30, r28
    4586:	e5 58       	subi	r30, 0x85	; 133
    4588:	ff 4f       	sbci	r31, 0xFF	; 255
    458a:	60 81       	ld	r22, Z
    458c:	71 81       	ldd	r23, Z+1	; 0x01
    458e:	82 81       	ldd	r24, Z+2	; 0x02
    4590:	93 81       	ldd	r25, Z+3	; 0x03
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	4a e7       	ldi	r20, 0x7A	; 122
    4598:	55 e4       	ldi	r21, 0x45	; 69
    459a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459e:	dc 01       	movw	r26, r24
    45a0:	cb 01       	movw	r24, r22
    45a2:	f8 01       	movw	r30, r16
    45a4:	80 83       	st	Z, r24
    45a6:	91 83       	std	Z+1, r25	; 0x01
    45a8:	a2 83       	std	Z+2, r26	; 0x02
    45aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45ac:	fe 01       	movw	r30, r28
    45ae:	e9 58       	subi	r30, 0x89	; 137
    45b0:	ff 4f       	sbci	r31, 0xFF	; 255
    45b2:	60 81       	ld	r22, Z
    45b4:	71 81       	ldd	r23, Z+1	; 0x01
    45b6:	82 81       	ldd	r24, Z+2	; 0x02
    45b8:	93 81       	ldd	r25, Z+3	; 0x03
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	40 e8       	ldi	r20, 0x80	; 128
    45c0:	5f e3       	ldi	r21, 0x3F	; 63
    45c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45c6:	88 23       	and	r24, r24
    45c8:	44 f4       	brge	.+16     	; 0x45da <main+0x1ac>
		__ticks = 1;
    45ca:	fe 01       	movw	r30, r28
    45cc:	eb 58       	subi	r30, 0x8B	; 139
    45ce:	ff 4f       	sbci	r31, 0xFF	; 255
    45d0:	81 e0       	ldi	r24, 0x01	; 1
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	91 83       	std	Z+1, r25	; 0x01
    45d6:	80 83       	st	Z, r24
    45d8:	64 c0       	rjmp	.+200    	; 0x46a2 <main+0x274>
	else if (__tmp > 65535)
    45da:	fe 01       	movw	r30, r28
    45dc:	e9 58       	subi	r30, 0x89	; 137
    45de:	ff 4f       	sbci	r31, 0xFF	; 255
    45e0:	60 81       	ld	r22, Z
    45e2:	71 81       	ldd	r23, Z+1	; 0x01
    45e4:	82 81       	ldd	r24, Z+2	; 0x02
    45e6:	93 81       	ldd	r25, Z+3	; 0x03
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	3f ef       	ldi	r19, 0xFF	; 255
    45ec:	4f e7       	ldi	r20, 0x7F	; 127
    45ee:	57 e4       	ldi	r21, 0x47	; 71
    45f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45f4:	18 16       	cp	r1, r24
    45f6:	0c f0       	brlt	.+2      	; 0x45fa <main+0x1cc>
    45f8:	43 c0       	rjmp	.+134    	; 0x4680 <main+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45fa:	fe 01       	movw	r30, r28
    45fc:	e5 58       	subi	r30, 0x85	; 133
    45fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4600:	60 81       	ld	r22, Z
    4602:	71 81       	ldd	r23, Z+1	; 0x01
    4604:	82 81       	ldd	r24, Z+2	; 0x02
    4606:	93 81       	ldd	r25, Z+3	; 0x03
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	40 e2       	ldi	r20, 0x20	; 32
    460e:	51 e4       	ldi	r21, 0x41	; 65
    4610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4614:	dc 01       	movw	r26, r24
    4616:	cb 01       	movw	r24, r22
    4618:	8e 01       	movw	r16, r28
    461a:	0b 58       	subi	r16, 0x8B	; 139
    461c:	1f 4f       	sbci	r17, 0xFF	; 255
    461e:	bc 01       	movw	r22, r24
    4620:	cd 01       	movw	r24, r26
    4622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4626:	dc 01       	movw	r26, r24
    4628:	cb 01       	movw	r24, r22
    462a:	f8 01       	movw	r30, r16
    462c:	91 83       	std	Z+1, r25	; 0x01
    462e:	80 83       	st	Z, r24
    4630:	1f c0       	rjmp	.+62     	; 0x4670 <main+0x242>
    4632:	fe 01       	movw	r30, r28
    4634:	ed 58       	subi	r30, 0x8D	; 141
    4636:	ff 4f       	sbci	r31, 0xFF	; 255
    4638:	80 e9       	ldi	r24, 0x90	; 144
    463a:	91 e0       	ldi	r25, 0x01	; 1
    463c:	91 83       	std	Z+1, r25	; 0x01
    463e:	80 83       	st	Z, r24
    4640:	fe 01       	movw	r30, r28
    4642:	ed 58       	subi	r30, 0x8D	; 141
    4644:	ff 4f       	sbci	r31, 0xFF	; 255
    4646:	80 81       	ld	r24, Z
    4648:	91 81       	ldd	r25, Z+1	; 0x01
    464a:	01 97       	sbiw	r24, 0x01	; 1
    464c:	f1 f7       	brne	.-4      	; 0x464a <main+0x21c>
    464e:	fe 01       	movw	r30, r28
    4650:	ed 58       	subi	r30, 0x8D	; 141
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	91 83       	std	Z+1, r25	; 0x01
    4656:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4658:	de 01       	movw	r26, r28
    465a:	ab 58       	subi	r26, 0x8B	; 139
    465c:	bf 4f       	sbci	r27, 0xFF	; 255
    465e:	fe 01       	movw	r30, r28
    4660:	eb 58       	subi	r30, 0x8B	; 139
    4662:	ff 4f       	sbci	r31, 0xFF	; 255
    4664:	80 81       	ld	r24, Z
    4666:	91 81       	ldd	r25, Z+1	; 0x01
    4668:	01 97       	sbiw	r24, 0x01	; 1
    466a:	11 96       	adiw	r26, 0x01	; 1
    466c:	9c 93       	st	X, r25
    466e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4670:	fe 01       	movw	r30, r28
    4672:	eb 58       	subi	r30, 0x8B	; 139
    4674:	ff 4f       	sbci	r31, 0xFF	; 255
    4676:	80 81       	ld	r24, Z
    4678:	91 81       	ldd	r25, Z+1	; 0x01
    467a:	00 97       	sbiw	r24, 0x00	; 0
    467c:	d1 f6       	brne	.-76     	; 0x4632 <main+0x204>
    467e:	16 cf       	rjmp	.-468    	; 0x44ac <main+0x7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4680:	8e 01       	movw	r16, r28
    4682:	0b 58       	subi	r16, 0x8B	; 139
    4684:	1f 4f       	sbci	r17, 0xFF	; 255
    4686:	fe 01       	movw	r30, r28
    4688:	e9 58       	subi	r30, 0x89	; 137
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	60 81       	ld	r22, Z
    468e:	71 81       	ldd	r23, Z+1	; 0x01
    4690:	82 81       	ldd	r24, Z+2	; 0x02
    4692:	93 81       	ldd	r25, Z+3	; 0x03
    4694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	f8 01       	movw	r30, r16
    469e:	91 83       	std	Z+1, r25	; 0x01
    46a0:	80 83       	st	Z, r24
    46a2:	de 01       	movw	r26, r28
    46a4:	af 58       	subi	r26, 0x8F	; 143
    46a6:	bf 4f       	sbci	r27, 0xFF	; 255
    46a8:	fe 01       	movw	r30, r28
    46aa:	eb 58       	subi	r30, 0x8B	; 139
    46ac:	ff 4f       	sbci	r31, 0xFF	; 255
    46ae:	80 81       	ld	r24, Z
    46b0:	91 81       	ldd	r25, Z+1	; 0x01
    46b2:	11 96       	adiw	r26, 0x01	; 1
    46b4:	9c 93       	st	X, r25
    46b6:	8e 93       	st	-X, r24
    46b8:	fe 01       	movw	r30, r28
    46ba:	ef 58       	subi	r30, 0x8F	; 143
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	80 81       	ld	r24, Z
    46c0:	91 81       	ldd	r25, Z+1	; 0x01
    46c2:	01 97       	sbiw	r24, 0x01	; 1
    46c4:	f1 f7       	brne	.-4      	; 0x46c2 <main+0x294>
    46c6:	fe 01       	movw	r30, r28
    46c8:	ef 58       	subi	r30, 0x8F	; 143
    46ca:	ff 4f       	sbci	r31, 0xFF	; 255
    46cc:	91 83       	std	Z+1, r25	; 0x01
    46ce:	80 83       	st	Z, r24
    46d0:	ed ce       	rjmp	.-550    	; 0x44ac <main+0x7e>
			_delay_ms(500);
			break;


		case STATE_MAIN_SCREEN:
			KPD_ES_tGetKeyPressed(&Value);
    46d2:	ce 01       	movw	r24, r28
    46d4:	8c 57       	subi	r24, 0x7C	; 124
    46d6:	9f 4f       	sbci	r25, 0xFF	; 255
    46d8:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <KPD_ES_tGetKeyPressed>
			if(Value != KPD_U8_NOT_PRESSED){
    46dc:	fe 01       	movw	r30, r28
    46de:	ec 57       	subi	r30, 0x7C	; 124
    46e0:	ff 4f       	sbci	r31, 0xFF	; 255
    46e2:	80 81       	ld	r24, Z
    46e4:	8f 3f       	cpi	r24, 0xFF	; 255
    46e6:	09 f4       	brne	.+2      	; 0x46ea <main+0x2bc>
    46e8:	e1 ce       	rjmp	.-574    	; 0x44ac <main+0x7e>

				Lcd_ES_tsendChar('*');
    46ea:	8a e2       	ldi	r24, 0x2A	; 42
    46ec:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <Lcd_ES_tsendChar>
				input[indexz] = Value; // Store input in array
    46f0:	80 91 f5 02 	lds	r24, 0x02F5
    46f4:	88 2f       	mov	r24, r24
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	fe 01       	movw	r30, r28
    46fa:	ec 57       	subi	r30, 0x7C	; 124
    46fc:	ff 4f       	sbci	r31, 0xFF	; 255
    46fe:	20 81       	ld	r18, Z
    4700:	fc 01       	movw	r30, r24
    4702:	e0 51       	subi	r30, 0x10	; 16
    4704:	fd 4f       	sbci	r31, 0xFD	; 253
    4706:	20 83       	st	Z, r18
				indexz++;
    4708:	80 91 f5 02 	lds	r24, 0x02F5
    470c:	8f 5f       	subi	r24, 0xFF	; 255
    470e:	80 93 f5 02 	sts	0x02F5, r24
				if (indexz >= 4) { // Check if password entered
    4712:	80 91 f5 02 	lds	r24, 0x02F5
    4716:	84 30       	cpi	r24, 0x04	; 4
    4718:	08 f4       	brcc	.+2      	; 0x471c <main+0x2ee>
    471a:	c8 ce       	rjmp	.-624    	; 0x44ac <main+0x7e>
					if (strcmp(input, password) == 0) {
    471c:	80 ef       	ldi	r24, 0xF0	; 240
    471e:	92 e0       	ldi	r25, 0x02	; 2
    4720:	2c ea       	ldi	r18, 0xAC	; 172
    4722:	32 e0       	ldi	r19, 0x02	; 2
    4724:	b9 01       	movw	r22, r18
    4726:	0e 94 2c 2b 	call	0x5658	; 0x5658 <strcmp>
    472a:	00 97       	sbiw	r24, 0x00	; 0
    472c:	09 f0       	breq	.+2      	; 0x4730 <main+0x302>
    472e:	c6 c0       	rjmp	.+396    	; 0x48bc <main+0x48e>
						// Password is correct, perform action
						lcd_ES_tclear();
    4730:	0e 94 9c 1a 	call	0x3538	; 0x3538 <lcd_ES_tclear>
						Lcd_ES_tsendString("Welcome to Motor");
    4734:	81 e7       	ldi	r24, 0x71	; 113
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 0);
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	60 e0       	ldi	r22, 0x00	; 0
    4740:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <LCD_ES_tGoTo>
						Lcd_ES_tsendString("Dash board");
    4744:	82 e8       	ldi	r24, 0x82	; 130
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
    474c:	fe 01       	movw	r30, r28
    474e:	e3 59       	subi	r30, 0x93	; 147
    4750:	ff 4f       	sbci	r31, 0xFF	; 255
    4752:	80 e0       	ldi	r24, 0x00	; 0
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	aa ef       	ldi	r26, 0xFA	; 250
    4758:	b4 e4       	ldi	r27, 0x44	; 68
    475a:	80 83       	st	Z, r24
    475c:	91 83       	std	Z+1, r25	; 0x01
    475e:	a2 83       	std	Z+2, r26	; 0x02
    4760:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4762:	8e 01       	movw	r16, r28
    4764:	07 59       	subi	r16, 0x97	; 151
    4766:	1f 4f       	sbci	r17, 0xFF	; 255
    4768:	fe 01       	movw	r30, r28
    476a:	e3 59       	subi	r30, 0x93	; 147
    476c:	ff 4f       	sbci	r31, 0xFF	; 255
    476e:	60 81       	ld	r22, Z
    4770:	71 81       	ldd	r23, Z+1	; 0x01
    4772:	82 81       	ldd	r24, Z+2	; 0x02
    4774:	93 81       	ldd	r25, Z+3	; 0x03
    4776:	20 e0       	ldi	r18, 0x00	; 0
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	4a e7       	ldi	r20, 0x7A	; 122
    477c:	55 e4       	ldi	r21, 0x45	; 69
    477e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4782:	dc 01       	movw	r26, r24
    4784:	cb 01       	movw	r24, r22
    4786:	f8 01       	movw	r30, r16
    4788:	80 83       	st	Z, r24
    478a:	91 83       	std	Z+1, r25	; 0x01
    478c:	a2 83       	std	Z+2, r26	; 0x02
    478e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4790:	fe 01       	movw	r30, r28
    4792:	e7 59       	subi	r30, 0x97	; 151
    4794:	ff 4f       	sbci	r31, 0xFF	; 255
    4796:	60 81       	ld	r22, Z
    4798:	71 81       	ldd	r23, Z+1	; 0x01
    479a:	82 81       	ldd	r24, Z+2	; 0x02
    479c:	93 81       	ldd	r25, Z+3	; 0x03
    479e:	20 e0       	ldi	r18, 0x00	; 0
    47a0:	30 e0       	ldi	r19, 0x00	; 0
    47a2:	40 e8       	ldi	r20, 0x80	; 128
    47a4:	5f e3       	ldi	r21, 0x3F	; 63
    47a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47aa:	88 23       	and	r24, r24
    47ac:	44 f4       	brge	.+16     	; 0x47be <main+0x390>
		__ticks = 1;
    47ae:	fe 01       	movw	r30, r28
    47b0:	e9 59       	subi	r30, 0x99	; 153
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	81 e0       	ldi	r24, 0x01	; 1
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	91 83       	std	Z+1, r25	; 0x01
    47ba:	80 83       	st	Z, r24
    47bc:	64 c0       	rjmp	.+200    	; 0x4886 <main+0x458>
	else if (__tmp > 65535)
    47be:	fe 01       	movw	r30, r28
    47c0:	e7 59       	subi	r30, 0x97	; 151
    47c2:	ff 4f       	sbci	r31, 0xFF	; 255
    47c4:	60 81       	ld	r22, Z
    47c6:	71 81       	ldd	r23, Z+1	; 0x01
    47c8:	82 81       	ldd	r24, Z+2	; 0x02
    47ca:	93 81       	ldd	r25, Z+3	; 0x03
    47cc:	20 e0       	ldi	r18, 0x00	; 0
    47ce:	3f ef       	ldi	r19, 0xFF	; 255
    47d0:	4f e7       	ldi	r20, 0x7F	; 127
    47d2:	57 e4       	ldi	r21, 0x47	; 71
    47d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47d8:	18 16       	cp	r1, r24
    47da:	0c f0       	brlt	.+2      	; 0x47de <main+0x3b0>
    47dc:	43 c0       	rjmp	.+134    	; 0x4864 <main+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47de:	fe 01       	movw	r30, r28
    47e0:	e3 59       	subi	r30, 0x93	; 147
    47e2:	ff 4f       	sbci	r31, 0xFF	; 255
    47e4:	60 81       	ld	r22, Z
    47e6:	71 81       	ldd	r23, Z+1	; 0x01
    47e8:	82 81       	ldd	r24, Z+2	; 0x02
    47ea:	93 81       	ldd	r25, Z+3	; 0x03
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	40 e2       	ldi	r20, 0x20	; 32
    47f2:	51 e4       	ldi	r21, 0x41	; 65
    47f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f8:	dc 01       	movw	r26, r24
    47fa:	cb 01       	movw	r24, r22
    47fc:	8e 01       	movw	r16, r28
    47fe:	09 59       	subi	r16, 0x99	; 153
    4800:	1f 4f       	sbci	r17, 0xFF	; 255
    4802:	bc 01       	movw	r22, r24
    4804:	cd 01       	movw	r24, r26
    4806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    480a:	dc 01       	movw	r26, r24
    480c:	cb 01       	movw	r24, r22
    480e:	f8 01       	movw	r30, r16
    4810:	91 83       	std	Z+1, r25	; 0x01
    4812:	80 83       	st	Z, r24
    4814:	1f c0       	rjmp	.+62     	; 0x4854 <main+0x426>
    4816:	fe 01       	movw	r30, r28
    4818:	eb 59       	subi	r30, 0x9B	; 155
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	80 e9       	ldi	r24, 0x90	; 144
    481e:	91 e0       	ldi	r25, 0x01	; 1
    4820:	91 83       	std	Z+1, r25	; 0x01
    4822:	80 83       	st	Z, r24
    4824:	fe 01       	movw	r30, r28
    4826:	eb 59       	subi	r30, 0x9B	; 155
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	80 81       	ld	r24, Z
    482c:	91 81       	ldd	r25, Z+1	; 0x01
    482e:	01 97       	sbiw	r24, 0x01	; 1
    4830:	f1 f7       	brne	.-4      	; 0x482e <main+0x400>
    4832:	fe 01       	movw	r30, r28
    4834:	eb 59       	subi	r30, 0x9B	; 155
    4836:	ff 4f       	sbci	r31, 0xFF	; 255
    4838:	91 83       	std	Z+1, r25	; 0x01
    483a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    483c:	de 01       	movw	r26, r28
    483e:	a9 59       	subi	r26, 0x99	; 153
    4840:	bf 4f       	sbci	r27, 0xFF	; 255
    4842:	fe 01       	movw	r30, r28
    4844:	e9 59       	subi	r30, 0x99	; 153
    4846:	ff 4f       	sbci	r31, 0xFF	; 255
    4848:	80 81       	ld	r24, Z
    484a:	91 81       	ldd	r25, Z+1	; 0x01
    484c:	01 97       	sbiw	r24, 0x01	; 1
    484e:	11 96       	adiw	r26, 0x01	; 1
    4850:	9c 93       	st	X, r25
    4852:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4854:	fe 01       	movw	r30, r28
    4856:	e9 59       	subi	r30, 0x99	; 153
    4858:	ff 4f       	sbci	r31, 0xFF	; 255
    485a:	80 81       	ld	r24, Z
    485c:	91 81       	ldd	r25, Z+1	; 0x01
    485e:	00 97       	sbiw	r24, 0x00	; 0
    4860:	d1 f6       	brne	.-76     	; 0x4816 <main+0x3e8>
    4862:	28 c0       	rjmp	.+80     	; 0x48b4 <main+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4864:	8e 01       	movw	r16, r28
    4866:	09 59       	subi	r16, 0x99	; 153
    4868:	1f 4f       	sbci	r17, 0xFF	; 255
    486a:	fe 01       	movw	r30, r28
    486c:	e7 59       	subi	r30, 0x97	; 151
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	60 81       	ld	r22, Z
    4872:	71 81       	ldd	r23, Z+1	; 0x01
    4874:	82 81       	ldd	r24, Z+2	; 0x02
    4876:	93 81       	ldd	r25, Z+3	; 0x03
    4878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	f8 01       	movw	r30, r16
    4882:	91 83       	std	Z+1, r25	; 0x01
    4884:	80 83       	st	Z, r24
    4886:	de 01       	movw	r26, r28
    4888:	ad 59       	subi	r26, 0x9D	; 157
    488a:	bf 4f       	sbci	r27, 0xFF	; 255
    488c:	fe 01       	movw	r30, r28
    488e:	e9 59       	subi	r30, 0x99	; 153
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	80 81       	ld	r24, Z
    4894:	91 81       	ldd	r25, Z+1	; 0x01
    4896:	11 96       	adiw	r26, 0x01	; 1
    4898:	9c 93       	st	X, r25
    489a:	8e 93       	st	-X, r24
    489c:	fe 01       	movw	r30, r28
    489e:	ed 59       	subi	r30, 0x9D	; 157
    48a0:	ff 4f       	sbci	r31, 0xFF	; 255
    48a2:	80 81       	ld	r24, Z
    48a4:	91 81       	ldd	r25, Z+1	; 0x01
    48a6:	01 97       	sbiw	r24, 0x01	; 1
    48a8:	f1 f7       	brne	.-4      	; 0x48a6 <main+0x478>
    48aa:	fe 01       	movw	r30, r28
    48ac:	ed 59       	subi	r30, 0x9D	; 157
    48ae:	ff 4f       	sbci	r31, 0xFF	; 255
    48b0:	91 83       	std	Z+1, r25	; 0x01
    48b2:	80 83       	st	Z, r24
						_delay_ms(2000);
						currentState = STATE_MOTOR_OPTIONS;
    48b4:	82 e0       	ldi	r24, 0x02	; 2
    48b6:	80 93 1a 03 	sts	0x031A, r24
    48ba:	f8 cd       	rjmp	.-1040   	; 0x44ac <main+0x7e>
					}
					else {
						// Password is incorrect, reset input
						lcd_ES_tclear();
    48bc:	0e 94 9c 1a 	call	0x3538	; 0x3538 <lcd_ES_tclear>
						Lcd_ES_tsendString("Wrong Password");
    48c0:	8d e8       	ldi	r24, 0x8D	; 141
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
						memset(input, '\0', sizeof(input));
    48c8:	80 ef       	ldi	r24, 0xF0	; 240
    48ca:	92 e0       	ldi	r25, 0x02	; 2
    48cc:	60 e0       	ldi	r22, 0x00	; 0
    48ce:	70 e0       	ldi	r23, 0x00	; 0
    48d0:	45 e0       	ldi	r20, 0x05	; 5
    48d2:	50 e0       	ldi	r21, 0x00	; 0
    48d4:	0e 94 25 2b 	call	0x564a	; 0x564a <memset>
						indexz = 0;
    48d8:	10 92 f5 02 	sts	0x02F5, r1
    48dc:	fe 01       	movw	r30, r28
    48de:	e1 5a       	subi	r30, 0xA1	; 161
    48e0:	ff 4f       	sbci	r31, 0xFF	; 255
    48e2:	80 e0       	ldi	r24, 0x00	; 0
    48e4:	90 e8       	ldi	r25, 0x80	; 128
    48e6:	ab eb       	ldi	r26, 0xBB	; 187
    48e8:	b4 e4       	ldi	r27, 0x44	; 68
    48ea:	80 83       	st	Z, r24
    48ec:	91 83       	std	Z+1, r25	; 0x01
    48ee:	a2 83       	std	Z+2, r26	; 0x02
    48f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48f2:	8e 01       	movw	r16, r28
    48f4:	05 5a       	subi	r16, 0xA5	; 165
    48f6:	1f 4f       	sbci	r17, 0xFF	; 255
    48f8:	fe 01       	movw	r30, r28
    48fa:	e1 5a       	subi	r30, 0xA1	; 161
    48fc:	ff 4f       	sbci	r31, 0xFF	; 255
    48fe:	60 81       	ld	r22, Z
    4900:	71 81       	ldd	r23, Z+1	; 0x01
    4902:	82 81       	ldd	r24, Z+2	; 0x02
    4904:	93 81       	ldd	r25, Z+3	; 0x03
    4906:	20 e0       	ldi	r18, 0x00	; 0
    4908:	30 e0       	ldi	r19, 0x00	; 0
    490a:	4a e7       	ldi	r20, 0x7A	; 122
    490c:	55 e4       	ldi	r21, 0x45	; 69
    490e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4912:	dc 01       	movw	r26, r24
    4914:	cb 01       	movw	r24, r22
    4916:	f8 01       	movw	r30, r16
    4918:	80 83       	st	Z, r24
    491a:	91 83       	std	Z+1, r25	; 0x01
    491c:	a2 83       	std	Z+2, r26	; 0x02
    491e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4920:	fe 01       	movw	r30, r28
    4922:	e5 5a       	subi	r30, 0xA5	; 165
    4924:	ff 4f       	sbci	r31, 0xFF	; 255
    4926:	60 81       	ld	r22, Z
    4928:	71 81       	ldd	r23, Z+1	; 0x01
    492a:	82 81       	ldd	r24, Z+2	; 0x02
    492c:	93 81       	ldd	r25, Z+3	; 0x03
    492e:	20 e0       	ldi	r18, 0x00	; 0
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	40 e8       	ldi	r20, 0x80	; 128
    4934:	5f e3       	ldi	r21, 0x3F	; 63
    4936:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    493a:	88 23       	and	r24, r24
    493c:	44 f4       	brge	.+16     	; 0x494e <main+0x520>
		__ticks = 1;
    493e:	fe 01       	movw	r30, r28
    4940:	e7 5a       	subi	r30, 0xA7	; 167
    4942:	ff 4f       	sbci	r31, 0xFF	; 255
    4944:	81 e0       	ldi	r24, 0x01	; 1
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	91 83       	std	Z+1, r25	; 0x01
    494a:	80 83       	st	Z, r24
    494c:	64 c0       	rjmp	.+200    	; 0x4a16 <main+0x5e8>
	else if (__tmp > 65535)
    494e:	fe 01       	movw	r30, r28
    4950:	e5 5a       	subi	r30, 0xA5	; 165
    4952:	ff 4f       	sbci	r31, 0xFF	; 255
    4954:	60 81       	ld	r22, Z
    4956:	71 81       	ldd	r23, Z+1	; 0x01
    4958:	82 81       	ldd	r24, Z+2	; 0x02
    495a:	93 81       	ldd	r25, Z+3	; 0x03
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	3f ef       	ldi	r19, 0xFF	; 255
    4960:	4f e7       	ldi	r20, 0x7F	; 127
    4962:	57 e4       	ldi	r21, 0x47	; 71
    4964:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4968:	18 16       	cp	r1, r24
    496a:	0c f0       	brlt	.+2      	; 0x496e <main+0x540>
    496c:	43 c0       	rjmp	.+134    	; 0x49f4 <main+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    496e:	fe 01       	movw	r30, r28
    4970:	e1 5a       	subi	r30, 0xA1	; 161
    4972:	ff 4f       	sbci	r31, 0xFF	; 255
    4974:	60 81       	ld	r22, Z
    4976:	71 81       	ldd	r23, Z+1	; 0x01
    4978:	82 81       	ldd	r24, Z+2	; 0x02
    497a:	93 81       	ldd	r25, Z+3	; 0x03
    497c:	20 e0       	ldi	r18, 0x00	; 0
    497e:	30 e0       	ldi	r19, 0x00	; 0
    4980:	40 e2       	ldi	r20, 0x20	; 32
    4982:	51 e4       	ldi	r21, 0x41	; 65
    4984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4988:	dc 01       	movw	r26, r24
    498a:	cb 01       	movw	r24, r22
    498c:	8e 01       	movw	r16, r28
    498e:	07 5a       	subi	r16, 0xA7	; 167
    4990:	1f 4f       	sbci	r17, 0xFF	; 255
    4992:	bc 01       	movw	r22, r24
    4994:	cd 01       	movw	r24, r26
    4996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    499a:	dc 01       	movw	r26, r24
    499c:	cb 01       	movw	r24, r22
    499e:	f8 01       	movw	r30, r16
    49a0:	91 83       	std	Z+1, r25	; 0x01
    49a2:	80 83       	st	Z, r24
    49a4:	1f c0       	rjmp	.+62     	; 0x49e4 <main+0x5b6>
    49a6:	fe 01       	movw	r30, r28
    49a8:	e9 5a       	subi	r30, 0xA9	; 169
    49aa:	ff 4f       	sbci	r31, 0xFF	; 255
    49ac:	80 e9       	ldi	r24, 0x90	; 144
    49ae:	91 e0       	ldi	r25, 0x01	; 1
    49b0:	91 83       	std	Z+1, r25	; 0x01
    49b2:	80 83       	st	Z, r24
    49b4:	fe 01       	movw	r30, r28
    49b6:	e9 5a       	subi	r30, 0xA9	; 169
    49b8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ba:	80 81       	ld	r24, Z
    49bc:	91 81       	ldd	r25, Z+1	; 0x01
    49be:	01 97       	sbiw	r24, 0x01	; 1
    49c0:	f1 f7       	brne	.-4      	; 0x49be <main+0x590>
    49c2:	fe 01       	movw	r30, r28
    49c4:	e9 5a       	subi	r30, 0xA9	; 169
    49c6:	ff 4f       	sbci	r31, 0xFF	; 255
    49c8:	91 83       	std	Z+1, r25	; 0x01
    49ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49cc:	de 01       	movw	r26, r28
    49ce:	a7 5a       	subi	r26, 0xA7	; 167
    49d0:	bf 4f       	sbci	r27, 0xFF	; 255
    49d2:	fe 01       	movw	r30, r28
    49d4:	e7 5a       	subi	r30, 0xA7	; 167
    49d6:	ff 4f       	sbci	r31, 0xFF	; 255
    49d8:	80 81       	ld	r24, Z
    49da:	91 81       	ldd	r25, Z+1	; 0x01
    49dc:	01 97       	sbiw	r24, 0x01	; 1
    49de:	11 96       	adiw	r26, 0x01	; 1
    49e0:	9c 93       	st	X, r25
    49e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49e4:	fe 01       	movw	r30, r28
    49e6:	e7 5a       	subi	r30, 0xA7	; 167
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	80 81       	ld	r24, Z
    49ec:	91 81       	ldd	r25, Z+1	; 0x01
    49ee:	00 97       	sbiw	r24, 0x00	; 0
    49f0:	d1 f6       	brne	.-76     	; 0x49a6 <main+0x578>
    49f2:	27 c0       	rjmp	.+78     	; 0x4a42 <main+0x614>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49f4:	8e 01       	movw	r16, r28
    49f6:	07 5a       	subi	r16, 0xA7	; 167
    49f8:	1f 4f       	sbci	r17, 0xFF	; 255
    49fa:	fe 01       	movw	r30, r28
    49fc:	e5 5a       	subi	r30, 0xA5	; 165
    49fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4a00:	60 81       	ld	r22, Z
    4a02:	71 81       	ldd	r23, Z+1	; 0x01
    4a04:	82 81       	ldd	r24, Z+2	; 0x02
    4a06:	93 81       	ldd	r25, Z+3	; 0x03
    4a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	cb 01       	movw	r24, r22
    4a10:	f8 01       	movw	r30, r16
    4a12:	91 83       	std	Z+1, r25	; 0x01
    4a14:	80 83       	st	Z, r24
    4a16:	de 01       	movw	r26, r28
    4a18:	ab 5a       	subi	r26, 0xAB	; 171
    4a1a:	bf 4f       	sbci	r27, 0xFF	; 255
    4a1c:	fe 01       	movw	r30, r28
    4a1e:	e7 5a       	subi	r30, 0xA7	; 167
    4a20:	ff 4f       	sbci	r31, 0xFF	; 255
    4a22:	80 81       	ld	r24, Z
    4a24:	91 81       	ldd	r25, Z+1	; 0x01
    4a26:	8d 93       	st	X+, r24
    4a28:	9c 93       	st	X, r25
    4a2a:	fe 01       	movw	r30, r28
    4a2c:	eb 5a       	subi	r30, 0xAB	; 171
    4a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a30:	80 81       	ld	r24, Z
    4a32:	91 81       	ldd	r25, Z+1	; 0x01
    4a34:	01 97       	sbiw	r24, 0x01	; 1
    4a36:	f1 f7       	brne	.-4      	; 0x4a34 <main+0x606>
    4a38:	fe 01       	movw	r30, r28
    4a3a:	eb 5a       	subi	r30, 0xAB	; 171
    4a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3e:	91 83       	std	Z+1, r25	; 0x01
    4a40:	80 83       	st	Z, r24
						_delay_ms(1500);
						count++;
    4a42:	de 01       	movw	r26, r28
    4a44:	ad 57       	subi	r26, 0x7D	; 125
    4a46:	bf 4f       	sbci	r27, 0xFF	; 255
    4a48:	fe 01       	movw	r30, r28
    4a4a:	ed 57       	subi	r30, 0x7D	; 125
    4a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4e:	80 81       	ld	r24, Z
    4a50:	8f 5f       	subi	r24, 0xFF	; 255
    4a52:	8c 93       	st	X, r24
						lcd_ES_tclear();
    4a54:	0e 94 9c 1a 	call	0x3538	; 0x3538 <lcd_ES_tclear>
						Lcd_ES_tsendString("Try again");
    4a58:	8c e9       	ldi	r24, 0x9C	; 156
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 5);
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	65 e0       	ldi	r22, 0x05	; 5
    4a64:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <LCD_ES_tGoTo>
						if(count == 3){
    4a68:	fe 01       	movw	r30, r28
    4a6a:	ed 57       	subi	r30, 0x7D	; 125
    4a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6e:	80 81       	ld	r24, Z
    4a70:	83 30       	cpi	r24, 0x03	; 3
    4a72:	09 f0       	breq	.+2      	; 0x4a76 <main+0x648>
    4a74:	1b cd       	rjmp	.-1482   	; 0x44ac <main+0x7e>
							lcd_ES_tclear();
    4a76:	0e 94 9c 1a 	call	0x3538	; 0x3538 <lcd_ES_tclear>
							Lcd_ES_tsendString("Blocked !!!");
    4a7a:	86 ea       	ldi	r24, 0xA6	; 166
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
							count=0;
    4a82:	fe 01       	movw	r30, r28
    4a84:	ed 57       	subi	r30, 0x7D	; 125
    4a86:	ff 4f       	sbci	r31, 0xFF	; 255
    4a88:	10 82       	st	Z, r1
    4a8a:	10 cd       	rjmp	.-1504   	; 0x44ac <main+0x7e>

			break;


		case STATE_MOTOR_OPTIONS:
			if (!gettingMotorOption) {
    4a8c:	80 91 08 03 	lds	r24, 0x0308
    4a90:	88 23       	and	r24, r24
    4a92:	c9 f4       	brne	.+50     	; 0x4ac6 <main+0x698>
				lcd_ES_tclear();
    4a94:	0e 94 9c 1a 	call	0x3538	; 0x3538 <lcd_ES_tclear>
				Lcd_ES_tsendString("1- DC Motor");
    4a98:	82 eb       	ldi	r24, 0xB2	; 178
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(1, 0);
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	60 e0       	ldi	r22, 0x00	; 0
    4aa4:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <LCD_ES_tGoTo>
				Lcd_ES_tsendString("2- Stepper");
    4aa8:	8e eb       	ldi	r24, 0xBE	; 190
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
				LCD_ES_tGoTo(2, 0);
    4ab0:	82 e0       	ldi	r24, 0x02	; 2
    4ab2:	60 e0       	ldi	r22, 0x00	; 0
    4ab4:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <LCD_ES_tGoTo>
				Lcd_ES_tsendString("3- Servo Motor");
    4ab8:	89 ec       	ldi	r24, 0xC9	; 201
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
				gettingMotorOption = 1;
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
    4ac2:	80 93 08 03 	sts	0x0308, r24
			}

			KPD_ES_tGetKeyPressed(&Option);
    4ac6:	ce 01       	movw	r24, r28
    4ac8:	8b 57       	subi	r24, 0x7B	; 123
    4aca:	9f 4f       	sbci	r25, 0xFF	; 255
    4acc:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <KPD_ES_tGetKeyPressed>
			if (Option != KPD_U8_NOT_PRESSED) {
    4ad0:	fe 01       	movw	r30, r28
    4ad2:	eb 57       	subi	r30, 0x7B	; 123
    4ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad6:	80 81       	ld	r24, Z
    4ad8:	8f 3f       	cpi	r24, 0xFF	; 255
    4ada:	09 f4       	brne	.+2      	; 0x4ade <main+0x6b0>
    4adc:	e7 cc       	rjmp	.-1586   	; 0x44ac <main+0x7e>
				if (Option == '1') {  // DC Motor
    4ade:	fe 01       	movw	r30, r28
    4ae0:	eb 57       	subi	r30, 0x7B	; 123
    4ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae4:	80 81       	ld	r24, Z
    4ae6:	81 33       	cpi	r24, 0x31	; 49
    4ae8:	31 f4       	brne	.+12     	; 0x4af6 <main+0x6c8>
					gettingMotorOption = 0;
    4aea:	10 92 08 03 	sts	0x0308, r1
					currentState = STATE_DC_MOTOR_MOVE;
    4aee:	83 e0       	ldi	r24, 0x03	; 3
    4af0:	80 93 1a 03 	sts	0x031A, r24
    4af4:	db cc       	rjmp	.-1610   	; 0x44ac <main+0x7e>
				} else if (Option == '2') {  // Stepper Motor
    4af6:	fe 01       	movw	r30, r28
    4af8:	eb 57       	subi	r30, 0x7B	; 123
    4afa:	ff 4f       	sbci	r31, 0xFF	; 255
    4afc:	80 81       	ld	r24, Z
    4afe:	82 33       	cpi	r24, 0x32	; 50
    4b00:	21 f4       	brne	.+8      	; 0x4b0a <main+0x6dc>
					currentState = STATE_STEPPER_MOVE;
    4b02:	84 e0       	ldi	r24, 0x04	; 4
    4b04:	80 93 1a 03 	sts	0x031A, r24
    4b08:	d1 cc       	rjmp	.-1630   	; 0x44ac <main+0x7e>
				}else if (Option == '3') {  // Stepper Motor
    4b0a:	fe 01       	movw	r30, r28
    4b0c:	eb 57       	subi	r30, 0x7B	; 123
    4b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b10:	80 81       	ld	r24, Z
    4b12:	83 33       	cpi	r24, 0x33	; 51
    4b14:	21 f4       	brne	.+8      	; 0x4b1e <main+0x6f0>
					currentState = STATE_SERVO_MOVE;
    4b16:	85 e0       	ldi	r24, 0x05	; 5
    4b18:	80 93 1a 03 	sts	0x031A, r24
    4b1c:	c7 cc       	rjmp	.-1650   	; 0x44ac <main+0x7e>
				}else {
					lcd_ES_tclear();
    4b1e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <lcd_ES_tclear>
					Lcd_ES_tsendString("Invalid Option");
    4b22:	88 ed       	ldi	r24, 0xD8	; 216
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
    4b2a:	fe 01       	movw	r30, r28
    4b2c:	ef 5a       	subi	r30, 0xAF	; 175
    4b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b30:	80 e0       	ldi	r24, 0x00	; 0
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	aa ef       	ldi	r26, 0xFA	; 250
    4b36:	b4 e4       	ldi	r27, 0x44	; 68
    4b38:	80 83       	st	Z, r24
    4b3a:	91 83       	std	Z+1, r25	; 0x01
    4b3c:	a2 83       	std	Z+2, r26	; 0x02
    4b3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b40:	8e 01       	movw	r16, r28
    4b42:	03 5b       	subi	r16, 0xB3	; 179
    4b44:	1f 4f       	sbci	r17, 0xFF	; 255
    4b46:	fe 01       	movw	r30, r28
    4b48:	ef 5a       	subi	r30, 0xAF	; 175
    4b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4c:	60 81       	ld	r22, Z
    4b4e:	71 81       	ldd	r23, Z+1	; 0x01
    4b50:	82 81       	ldd	r24, Z+2	; 0x02
    4b52:	93 81       	ldd	r25, Z+3	; 0x03
    4b54:	20 e0       	ldi	r18, 0x00	; 0
    4b56:	30 e0       	ldi	r19, 0x00	; 0
    4b58:	4a e7       	ldi	r20, 0x7A	; 122
    4b5a:	55 e4       	ldi	r21, 0x45	; 69
    4b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b60:	dc 01       	movw	r26, r24
    4b62:	cb 01       	movw	r24, r22
    4b64:	f8 01       	movw	r30, r16
    4b66:	80 83       	st	Z, r24
    4b68:	91 83       	std	Z+1, r25	; 0x01
    4b6a:	a2 83       	std	Z+2, r26	; 0x02
    4b6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b6e:	fe 01       	movw	r30, r28
    4b70:	e3 5b       	subi	r30, 0xB3	; 179
    4b72:	ff 4f       	sbci	r31, 0xFF	; 255
    4b74:	60 81       	ld	r22, Z
    4b76:	71 81       	ldd	r23, Z+1	; 0x01
    4b78:	82 81       	ldd	r24, Z+2	; 0x02
    4b7a:	93 81       	ldd	r25, Z+3	; 0x03
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	40 e8       	ldi	r20, 0x80	; 128
    4b82:	5f e3       	ldi	r21, 0x3F	; 63
    4b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b88:	88 23       	and	r24, r24
    4b8a:	44 f4       	brge	.+16     	; 0x4b9c <main+0x76e>
		__ticks = 1;
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	e5 5b       	subi	r30, 0xB5	; 181
    4b90:	ff 4f       	sbci	r31, 0xFF	; 255
    4b92:	81 e0       	ldi	r24, 0x01	; 1
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	91 83       	std	Z+1, r25	; 0x01
    4b98:	80 83       	st	Z, r24
    4b9a:	64 c0       	rjmp	.+200    	; 0x4c64 <main+0x836>
	else if (__tmp > 65535)
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	e3 5b       	subi	r30, 0xB3	; 179
    4ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba2:	60 81       	ld	r22, Z
    4ba4:	71 81       	ldd	r23, Z+1	; 0x01
    4ba6:	82 81       	ldd	r24, Z+2	; 0x02
    4ba8:	93 81       	ldd	r25, Z+3	; 0x03
    4baa:	20 e0       	ldi	r18, 0x00	; 0
    4bac:	3f ef       	ldi	r19, 0xFF	; 255
    4bae:	4f e7       	ldi	r20, 0x7F	; 127
    4bb0:	57 e4       	ldi	r21, 0x47	; 71
    4bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bb6:	18 16       	cp	r1, r24
    4bb8:	0c f0       	brlt	.+2      	; 0x4bbc <main+0x78e>
    4bba:	43 c0       	rjmp	.+134    	; 0x4c42 <main+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bbc:	fe 01       	movw	r30, r28
    4bbe:	ef 5a       	subi	r30, 0xAF	; 175
    4bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc2:	60 81       	ld	r22, Z
    4bc4:	71 81       	ldd	r23, Z+1	; 0x01
    4bc6:	82 81       	ldd	r24, Z+2	; 0x02
    4bc8:	93 81       	ldd	r25, Z+3	; 0x03
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
    4bce:	40 e2       	ldi	r20, 0x20	; 32
    4bd0:	51 e4       	ldi	r21, 0x41	; 65
    4bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bd6:	dc 01       	movw	r26, r24
    4bd8:	cb 01       	movw	r24, r22
    4bda:	8e 01       	movw	r16, r28
    4bdc:	05 5b       	subi	r16, 0xB5	; 181
    4bde:	1f 4f       	sbci	r17, 0xFF	; 255
    4be0:	bc 01       	movw	r22, r24
    4be2:	cd 01       	movw	r24, r26
    4be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be8:	dc 01       	movw	r26, r24
    4bea:	cb 01       	movw	r24, r22
    4bec:	f8 01       	movw	r30, r16
    4bee:	91 83       	std	Z+1, r25	; 0x01
    4bf0:	80 83       	st	Z, r24
    4bf2:	1f c0       	rjmp	.+62     	; 0x4c32 <main+0x804>
    4bf4:	fe 01       	movw	r30, r28
    4bf6:	e7 5b       	subi	r30, 0xB7	; 183
    4bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfa:	80 e9       	ldi	r24, 0x90	; 144
    4bfc:	91 e0       	ldi	r25, 0x01	; 1
    4bfe:	91 83       	std	Z+1, r25	; 0x01
    4c00:	80 83       	st	Z, r24
    4c02:	fe 01       	movw	r30, r28
    4c04:	e7 5b       	subi	r30, 0xB7	; 183
    4c06:	ff 4f       	sbci	r31, 0xFF	; 255
    4c08:	80 81       	ld	r24, Z
    4c0a:	91 81       	ldd	r25, Z+1	; 0x01
    4c0c:	01 97       	sbiw	r24, 0x01	; 1
    4c0e:	f1 f7       	brne	.-4      	; 0x4c0c <main+0x7de>
    4c10:	fe 01       	movw	r30, r28
    4c12:	e7 5b       	subi	r30, 0xB7	; 183
    4c14:	ff 4f       	sbci	r31, 0xFF	; 255
    4c16:	91 83       	std	Z+1, r25	; 0x01
    4c18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c1a:	de 01       	movw	r26, r28
    4c1c:	a5 5b       	subi	r26, 0xB5	; 181
    4c1e:	bf 4f       	sbci	r27, 0xFF	; 255
    4c20:	fe 01       	movw	r30, r28
    4c22:	e5 5b       	subi	r30, 0xB5	; 181
    4c24:	ff 4f       	sbci	r31, 0xFF	; 255
    4c26:	80 81       	ld	r24, Z
    4c28:	91 81       	ldd	r25, Z+1	; 0x01
    4c2a:	01 97       	sbiw	r24, 0x01	; 1
    4c2c:	11 96       	adiw	r26, 0x01	; 1
    4c2e:	9c 93       	st	X, r25
    4c30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c32:	fe 01       	movw	r30, r28
    4c34:	e5 5b       	subi	r30, 0xB5	; 181
    4c36:	ff 4f       	sbci	r31, 0xFF	; 255
    4c38:	80 81       	ld	r24, Z
    4c3a:	91 81       	ldd	r25, Z+1	; 0x01
    4c3c:	00 97       	sbiw	r24, 0x00	; 0
    4c3e:	d1 f6       	brne	.-76     	; 0x4bf4 <main+0x7c6>
    4c40:	28 c0       	rjmp	.+80     	; 0x4c92 <main+0x864>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c42:	8e 01       	movw	r16, r28
    4c44:	05 5b       	subi	r16, 0xB5	; 181
    4c46:	1f 4f       	sbci	r17, 0xFF	; 255
    4c48:	fe 01       	movw	r30, r28
    4c4a:	e3 5b       	subi	r30, 0xB3	; 179
    4c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4e:	60 81       	ld	r22, Z
    4c50:	71 81       	ldd	r23, Z+1	; 0x01
    4c52:	82 81       	ldd	r24, Z+2	; 0x02
    4c54:	93 81       	ldd	r25, Z+3	; 0x03
    4c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c5a:	dc 01       	movw	r26, r24
    4c5c:	cb 01       	movw	r24, r22
    4c5e:	f8 01       	movw	r30, r16
    4c60:	91 83       	std	Z+1, r25	; 0x01
    4c62:	80 83       	st	Z, r24
    4c64:	de 01       	movw	r26, r28
    4c66:	a9 5b       	subi	r26, 0xB9	; 185
    4c68:	bf 4f       	sbci	r27, 0xFF	; 255
    4c6a:	fe 01       	movw	r30, r28
    4c6c:	e5 5b       	subi	r30, 0xB5	; 181
    4c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c70:	80 81       	ld	r24, Z
    4c72:	91 81       	ldd	r25, Z+1	; 0x01
    4c74:	11 96       	adiw	r26, 0x01	; 1
    4c76:	9c 93       	st	X, r25
    4c78:	8e 93       	st	-X, r24
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	e9 5b       	subi	r30, 0xB9	; 185
    4c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c80:	80 81       	ld	r24, Z
    4c82:	91 81       	ldd	r25, Z+1	; 0x01
    4c84:	01 97       	sbiw	r24, 0x01	; 1
    4c86:	f1 f7       	brne	.-4      	; 0x4c84 <main+0x856>
    4c88:	fe 01       	movw	r30, r28
    4c8a:	e9 5b       	subi	r30, 0xB9	; 185
    4c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8e:	91 83       	std	Z+1, r25	; 0x01
    4c90:	80 83       	st	Z, r24
					_delay_ms(2000);
					gettingMotorOption=0;
    4c92:	10 92 08 03 	sts	0x0308, r1
					currentState = STATE_MOTOR_OPTIONS;
    4c96:	82 e0       	ldi	r24, 0x02	; 2
    4c98:	80 93 1a 03 	sts	0x031A, r24
    4c9c:	07 cc       	rjmp	.-2034   	; 0x44ac <main+0x7e>
				}
			}
			break;

		case STATE_DC_MOTOR_MOVE:
			if(!flag)
    4c9e:	fe 01       	movw	r30, r28
    4ca0:	e1 58       	subi	r30, 0x81	; 129
    4ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca4:	80 81       	ld	r24, Z
    4ca6:	88 23       	and	r24, r24
    4ca8:	09 f0       	breq	.+2      	; 0x4cac <main+0x87e>
    4caa:	60 c0       	rjmp	.+192    	; 0x4d6c <main+0x93e>
			{
				if(!gettingSpeedOption){
    4cac:	80 91 0b 03 	lds	r24, 0x030B
    4cb0:	88 23       	and	r24, r24
    4cb2:	49 f4       	brne	.+18     	; 0x4cc6 <main+0x898>
					lcd_ES_tclear();
    4cb4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <lcd_ES_tclear>
					Lcd_ES_tsendString("Speed(0-99): ");
    4cb8:	87 ee       	ldi	r24, 0xE7	; 231
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
					gettingSpeedOption = 1;
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
    4cc2:	80 93 0b 03 	sts	0x030B, r24
				}
				KPD_ES_tGetKeyPressed(&Option5);
    4cc6:	ce 01       	movw	r24, r28
    4cc8:	87 57       	subi	r24, 0x77	; 119
    4cca:	9f 4f       	sbci	r25, 0xFF	; 255
    4ccc:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <KPD_ES_tGetKeyPressed>
				if(Option5 != KPD_U8_NOT_PRESSED){
    4cd0:	fe 01       	movw	r30, r28
    4cd2:	e7 57       	subi	r30, 0x77	; 119
    4cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd6:	80 81       	ld	r24, Z
    4cd8:	8f 3f       	cpi	r24, 0xFF	; 255
    4cda:	09 f4       	brne	.+2      	; 0x4cde <main+0x8b0>
    4cdc:	e7 cb       	rjmp	.-2098   	; 0x44ac <main+0x7e>
					LCD_ES_tGoTo(1, 0);
    4cde:	81 e0       	ldi	r24, 0x01	; 1
    4ce0:	60 e0       	ldi	r22, 0x00	; 0
    4ce2:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <LCD_ES_tGoTo>
					Lcd_ES_tsendChar(Option5);
    4ce6:	fe 01       	movw	r30, r28
    4ce8:	e7 57       	subi	r30, 0x77	; 119
    4cea:	ff 4f       	sbci	r31, 0xFF	; 255
    4cec:	80 81       	ld	r24, Z
    4cee:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <Lcd_ES_tsendChar>
					inputSpeed[indexSpeed] = Option5 - '0';
    4cf2:	80 91 06 03 	lds	r24, 0x0306
    4cf6:	28 2f       	mov	r18, r24
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	fe 01       	movw	r30, r28
    4cfc:	e7 57       	subi	r30, 0x77	; 119
    4cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4d00:	80 81       	ld	r24, Z
    4d02:	80 53       	subi	r24, 0x30	; 48
    4d04:	f9 01       	movw	r30, r18
    4d06:	ee 5f       	subi	r30, 0xFE	; 254
    4d08:	fc 4f       	sbci	r31, 0xFC	; 252
    4d0a:	80 83       	st	Z, r24
					indexSpeed++;
    4d0c:	80 91 06 03 	lds	r24, 0x0306
    4d10:	8f 5f       	subi	r24, 0xFF	; 255
    4d12:	80 93 06 03 	sts	0x0306, r24
					if(indexSpeed>=2)
    4d16:	80 91 06 03 	lds	r24, 0x0306
    4d1a:	82 30       	cpi	r24, 0x02	; 2
    4d1c:	08 f4       	brcc	.+2      	; 0x4d20 <main+0x8f2>
    4d1e:	c6 cb       	rjmp	.-2164   	; 0x44ac <main+0x7e>
					{
						Speed = (inputSpeed[0] * 10) + inputSpeed[1];
    4d20:	80 91 02 03 	lds	r24, 0x0302
    4d24:	88 2f       	mov	r24, r24
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	9c 01       	movw	r18, r24
    4d2a:	22 0f       	add	r18, r18
    4d2c:	33 1f       	adc	r19, r19
    4d2e:	c9 01       	movw	r24, r18
    4d30:	88 0f       	add	r24, r24
    4d32:	99 1f       	adc	r25, r25
    4d34:	88 0f       	add	r24, r24
    4d36:	99 1f       	adc	r25, r25
    4d38:	82 0f       	add	r24, r18
    4d3a:	93 1f       	adc	r25, r19
    4d3c:	98 2f       	mov	r25, r24
    4d3e:	80 91 03 03 	lds	r24, 0x0303
    4d42:	89 0f       	add	r24, r25
    4d44:	80 93 07 03 	sts	0x0307, r24
						memset(inputSpeed, '\0', sizeof(inputSteper));
    4d48:	82 e0       	ldi	r24, 0x02	; 2
    4d4a:	93 e0       	ldi	r25, 0x03	; 3
    4d4c:	60 e0       	ldi	r22, 0x00	; 0
    4d4e:	70 e0       	ldi	r23, 0x00	; 0
    4d50:	45 e0       	ldi	r20, 0x05	; 5
    4d52:	50 e0       	ldi	r21, 0x00	; 0
    4d54:	0e 94 25 2b 	call	0x564a	; 0x564a <memset>
						indexSpeed = 0;
    4d58:	10 92 06 03 	sts	0x0306, r1
						gettingSpeedOption = 0;
    4d5c:	10 92 0b 03 	sts	0x030B, r1
						flag = 1;
    4d60:	fe 01       	movw	r30, r28
    4d62:	e1 58       	subi	r30, 0x81	; 129
    4d64:	ff 4f       	sbci	r31, 0xFF	; 255
    4d66:	81 e0       	ldi	r24, 0x01	; 1
    4d68:	80 83       	st	Z, r24
    4d6a:	a0 cb       	rjmp	.-2240   	; 0x44ac <main+0x7e>
					}
				}
			}else
			{
				if (!gettingMovingOption) {
    4d6c:	80 91 09 03 	lds	r24, 0x0309
    4d70:	88 23       	and	r24, r24
    4d72:	89 f4       	brne	.+34     	; 0x4d96 <main+0x968>
					lcd_ES_tclear();
    4d74:	0e 94 9c 1a 	call	0x3538	; 0x3538 <lcd_ES_tclear>
					Lcd_ES_tsendString("1- Rotate CW");
    4d78:	85 ef       	ldi	r24, 0xF5	; 245
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
					LCD_ES_tGoTo(1, 0);
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	60 e0       	ldi	r22, 0x00	; 0
    4d84:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <LCD_ES_tGoTo>
					Lcd_ES_tsendString("2- Rotate CCW");
    4d88:	82 e0       	ldi	r24, 0x02	; 2
    4d8a:	91 e0       	ldi	r25, 0x01	; 1
    4d8c:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
					gettingMovingOption = 1;
    4d90:	81 e0       	ldi	r24, 0x01	; 1
    4d92:	80 93 09 03 	sts	0x0309, r24
				}
				KPD_ES_tGetKeyPressed(&Option2);
    4d96:	ce 01       	movw	r24, r28
    4d98:	8a 57       	subi	r24, 0x7A	; 122
    4d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d9c:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <KPD_ES_tGetKeyPressed>
				if (Option2 != KPD_U8_NOT_PRESSED) {
    4da0:	fe 01       	movw	r30, r28
    4da2:	ea 57       	subi	r30, 0x7A	; 122
    4da4:	ff 4f       	sbci	r31, 0xFF	; 255
    4da6:	80 81       	ld	r24, Z
    4da8:	8f 3f       	cpi	r24, 0xFF	; 255
    4daa:	09 f4       	brne	.+2      	; 0x4dae <main+0x980>
    4dac:	b2 c1       	rjmp	.+868    	; 0x5112 <main+0xce4>
					if (Option2 == '1') {
    4dae:	fe 01       	movw	r30, r28
    4db0:	ea 57       	subi	r30, 0x7A	; 122
    4db2:	ff 4f       	sbci	r31, 0xFF	; 255
    4db4:	80 81       	ld	r24, Z
    4db6:	81 33       	cpi	r24, 0x31	; 49
    4db8:	09 f0       	breq	.+2      	; 0x4dbc <main+0x98e>
    4dba:	9c c0       	rjmp	.+312    	; 0x4ef4 <main+0xac6>
						DC_Motor_SetSpeed(DC_MOTOR_0,Speed);
    4dbc:	90 91 07 03 	lds	r25, 0x0307
    4dc0:	80 e0       	ldi	r24, 0x00	; 0
    4dc2:	69 2f       	mov	r22, r25
    4dc4:	0e 94 bf 21 	call	0x437e	; 0x437e <DC_Motor_SetSpeed>
						DC_Motor_Move(DC_MOTOR_0, DC_MOTOR_CW);
    4dc8:	80 e0       	ldi	r24, 0x00	; 0
    4dca:	60 e0       	ldi	r22, 0x00	; 0
    4dcc:	0e 94 62 21 	call	0x42c4	; 0x42c4 <DC_Motor_Move>
    4dd0:	fe 01       	movw	r30, r28
    4dd2:	ed 5b       	subi	r30, 0xBD	; 189
    4dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd6:	80 e0       	ldi	r24, 0x00	; 0
    4dd8:	90 e8       	ldi	r25, 0x80	; 128
    4dda:	ab e3       	ldi	r26, 0x3B	; 59
    4ddc:	b5 e4       	ldi	r27, 0x45	; 69
    4dde:	80 83       	st	Z, r24
    4de0:	91 83       	std	Z+1, r25	; 0x01
    4de2:	a2 83       	std	Z+2, r26	; 0x02
    4de4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4de6:	8e 01       	movw	r16, r28
    4de8:	01 5c       	subi	r16, 0xC1	; 193
    4dea:	1f 4f       	sbci	r17, 0xFF	; 255
    4dec:	fe 01       	movw	r30, r28
    4dee:	ed 5b       	subi	r30, 0xBD	; 189
    4df0:	ff 4f       	sbci	r31, 0xFF	; 255
    4df2:	60 81       	ld	r22, Z
    4df4:	71 81       	ldd	r23, Z+1	; 0x01
    4df6:	82 81       	ldd	r24, Z+2	; 0x02
    4df8:	93 81       	ldd	r25, Z+3	; 0x03
    4dfa:	20 e0       	ldi	r18, 0x00	; 0
    4dfc:	30 e0       	ldi	r19, 0x00	; 0
    4dfe:	4a e7       	ldi	r20, 0x7A	; 122
    4e00:	55 e4       	ldi	r21, 0x45	; 69
    4e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e06:	dc 01       	movw	r26, r24
    4e08:	cb 01       	movw	r24, r22
    4e0a:	f8 01       	movw	r30, r16
    4e0c:	80 83       	st	Z, r24
    4e0e:	91 83       	std	Z+1, r25	; 0x01
    4e10:	a2 83       	std	Z+2, r26	; 0x02
    4e12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e14:	fe 01       	movw	r30, r28
    4e16:	ff 96       	adiw	r30, 0x3f	; 63
    4e18:	60 81       	ld	r22, Z
    4e1a:	71 81       	ldd	r23, Z+1	; 0x01
    4e1c:	82 81       	ldd	r24, Z+2	; 0x02
    4e1e:	93 81       	ldd	r25, Z+3	; 0x03
    4e20:	20 e0       	ldi	r18, 0x00	; 0
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	40 e8       	ldi	r20, 0x80	; 128
    4e26:	5f e3       	ldi	r21, 0x3F	; 63
    4e28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e2c:	88 23       	and	r24, r24
    4e2e:	2c f4       	brge	.+10     	; 0x4e3a <main+0xa0c>
		__ticks = 1;
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	9e af       	std	Y+62, r25	; 0x3e
    4e36:	8d af       	std	Y+61, r24	; 0x3d
    4e38:	46 c0       	rjmp	.+140    	; 0x4ec6 <main+0xa98>
	else if (__tmp > 65535)
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	ff 96       	adiw	r30, 0x3f	; 63
    4e3e:	60 81       	ld	r22, Z
    4e40:	71 81       	ldd	r23, Z+1	; 0x01
    4e42:	82 81       	ldd	r24, Z+2	; 0x02
    4e44:	93 81       	ldd	r25, Z+3	; 0x03
    4e46:	20 e0       	ldi	r18, 0x00	; 0
    4e48:	3f ef       	ldi	r19, 0xFF	; 255
    4e4a:	4f e7       	ldi	r20, 0x7F	; 127
    4e4c:	57 e4       	ldi	r21, 0x47	; 71
    4e4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e52:	18 16       	cp	r1, r24
    4e54:	64 f5       	brge	.+88     	; 0x4eae <main+0xa80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e56:	fe 01       	movw	r30, r28
    4e58:	ed 5b       	subi	r30, 0xBD	; 189
    4e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5c:	60 81       	ld	r22, Z
    4e5e:	71 81       	ldd	r23, Z+1	; 0x01
    4e60:	82 81       	ldd	r24, Z+2	; 0x02
    4e62:	93 81       	ldd	r25, Z+3	; 0x03
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	40 e2       	ldi	r20, 0x20	; 32
    4e6a:	51 e4       	ldi	r21, 0x41	; 65
    4e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	bc 01       	movw	r22, r24
    4e76:	cd 01       	movw	r24, r26
    4e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e7c:	dc 01       	movw	r26, r24
    4e7e:	cb 01       	movw	r24, r22
    4e80:	9e af       	std	Y+62, r25	; 0x3e
    4e82:	8d af       	std	Y+61, r24	; 0x3d
    4e84:	0f c0       	rjmp	.+30     	; 0x4ea4 <main+0xa76>
    4e86:	80 e9       	ldi	r24, 0x90	; 144
    4e88:	91 e0       	ldi	r25, 0x01	; 1
    4e8a:	9c af       	std	Y+60, r25	; 0x3c
    4e8c:	8b af       	std	Y+59, r24	; 0x3b
    4e8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4e90:	9c ad       	ldd	r25, Y+60	; 0x3c
    4e92:	01 97       	sbiw	r24, 0x01	; 1
    4e94:	f1 f7       	brne	.-4      	; 0x4e92 <main+0xa64>
    4e96:	9c af       	std	Y+60, r25	; 0x3c
    4e98:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4e9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4e9e:	01 97       	sbiw	r24, 0x01	; 1
    4ea0:	9e af       	std	Y+62, r25	; 0x3e
    4ea2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ea4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ea6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ea8:	00 97       	sbiw	r24, 0x00	; 0
    4eaa:	69 f7       	brne	.-38     	; 0x4e86 <main+0xa58>
    4eac:	16 c0       	rjmp	.+44     	; 0x4eda <main+0xaac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eae:	fe 01       	movw	r30, r28
    4eb0:	ff 96       	adiw	r30, 0x3f	; 63
    4eb2:	60 81       	ld	r22, Z
    4eb4:	71 81       	ldd	r23, Z+1	; 0x01
    4eb6:	82 81       	ldd	r24, Z+2	; 0x02
    4eb8:	93 81       	ldd	r25, Z+3	; 0x03
    4eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ebe:	dc 01       	movw	r26, r24
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	9e af       	std	Y+62, r25	; 0x3e
    4ec4:	8d af       	std	Y+61, r24	; 0x3d
    4ec6:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ec8:	9e ad       	ldd	r25, Y+62	; 0x3e
    4eca:	9a af       	std	Y+58, r25	; 0x3a
    4ecc:	89 af       	std	Y+57, r24	; 0x39
    4ece:	89 ad       	ldd	r24, Y+57	; 0x39
    4ed0:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ed2:	01 97       	sbiw	r24, 0x01	; 1
    4ed4:	f1 f7       	brne	.-4      	; 0x4ed2 <main+0xaa4>
    4ed6:	9a af       	std	Y+58, r25	; 0x3a
    4ed8:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(3000);
						DC_Motor_Stop(DC_MOTOR_0);
    4eda:	80 e0       	ldi	r24, 0x00	; 0
    4edc:	0e 94 36 21 	call	0x426c	; 0x426c <DC_Motor_Stop>
						gettingMovingOption = 0;
    4ee0:	10 92 09 03 	sts	0x0309, r1
						flag = 0; // Reset the flag after direction selection
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	e1 58       	subi	r30, 0x81	; 129
    4ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eea:	10 82       	st	Z, r1
						currentState = STATE_MOTOR_OPTIONS;
    4eec:	82 e0       	ldi	r24, 0x02	; 2
    4eee:	80 93 1a 03 	sts	0x031A, r24
    4ef2:	0f c1       	rjmp	.+542    	; 0x5112 <main+0xce4>
					} else if (Option2 == '2') {
    4ef4:	fe 01       	movw	r30, r28
    4ef6:	ea 57       	subi	r30, 0x7A	; 122
    4ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    4efa:	80 81       	ld	r24, Z
    4efc:	82 33       	cpi	r24, 0x32	; 50
    4efe:	09 f0       	breq	.+2      	; 0x4f02 <main+0xad4>
    4f00:	89 c0       	rjmp	.+274    	; 0x5014 <main+0xbe6>
						DC_Motor_SetSpeed(DC_MOTOR_0,Speed);
    4f02:	90 91 07 03 	lds	r25, 0x0307
    4f06:	80 e0       	ldi	r24, 0x00	; 0
    4f08:	69 2f       	mov	r22, r25
    4f0a:	0e 94 bf 21 	call	0x437e	; 0x437e <DC_Motor_SetSpeed>
						DC_Motor_Move(DC_MOTOR_0, DC_MOTOR_CCW);
    4f0e:	80 e0       	ldi	r24, 0x00	; 0
    4f10:	61 e0       	ldi	r22, 0x01	; 1
    4f12:	0e 94 62 21 	call	0x42c4	; 0x42c4 <DC_Motor_Move>
    4f16:	80 e0       	ldi	r24, 0x00	; 0
    4f18:	90 e8       	ldi	r25, 0x80	; 128
    4f1a:	ab e3       	ldi	r26, 0x3B	; 59
    4f1c:	b5 e4       	ldi	r27, 0x45	; 69
    4f1e:	8d ab       	std	Y+53, r24	; 0x35
    4f20:	9e ab       	std	Y+54, r25	; 0x36
    4f22:	af ab       	std	Y+55, r26	; 0x37
    4f24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f26:	6d a9       	ldd	r22, Y+53	; 0x35
    4f28:	7e a9       	ldd	r23, Y+54	; 0x36
    4f2a:	8f a9       	ldd	r24, Y+55	; 0x37
    4f2c:	98 ad       	ldd	r25, Y+56	; 0x38
    4f2e:	20 e0       	ldi	r18, 0x00	; 0
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	4a e7       	ldi	r20, 0x7A	; 122
    4f34:	55 e4       	ldi	r21, 0x45	; 69
    4f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f3a:	dc 01       	movw	r26, r24
    4f3c:	cb 01       	movw	r24, r22
    4f3e:	89 ab       	std	Y+49, r24	; 0x31
    4f40:	9a ab       	std	Y+50, r25	; 0x32
    4f42:	ab ab       	std	Y+51, r26	; 0x33
    4f44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4f46:	69 a9       	ldd	r22, Y+49	; 0x31
    4f48:	7a a9       	ldd	r23, Y+50	; 0x32
    4f4a:	8b a9       	ldd	r24, Y+51	; 0x33
    4f4c:	9c a9       	ldd	r25, Y+52	; 0x34
    4f4e:	20 e0       	ldi	r18, 0x00	; 0
    4f50:	30 e0       	ldi	r19, 0x00	; 0
    4f52:	40 e8       	ldi	r20, 0x80	; 128
    4f54:	5f e3       	ldi	r21, 0x3F	; 63
    4f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f5a:	88 23       	and	r24, r24
    4f5c:	2c f4       	brge	.+10     	; 0x4f68 <main+0xb3a>
		__ticks = 1;
    4f5e:	81 e0       	ldi	r24, 0x01	; 1
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	98 ab       	std	Y+48, r25	; 0x30
    4f64:	8f a7       	std	Y+47, r24	; 0x2f
    4f66:	3f c0       	rjmp	.+126    	; 0x4fe6 <main+0xbb8>
	else if (__tmp > 65535)
    4f68:	69 a9       	ldd	r22, Y+49	; 0x31
    4f6a:	7a a9       	ldd	r23, Y+50	; 0x32
    4f6c:	8b a9       	ldd	r24, Y+51	; 0x33
    4f6e:	9c a9       	ldd	r25, Y+52	; 0x34
    4f70:	20 e0       	ldi	r18, 0x00	; 0
    4f72:	3f ef       	ldi	r19, 0xFF	; 255
    4f74:	4f e7       	ldi	r20, 0x7F	; 127
    4f76:	57 e4       	ldi	r21, 0x47	; 71
    4f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f7c:	18 16       	cp	r1, r24
    4f7e:	4c f5       	brge	.+82     	; 0x4fd2 <main+0xba4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f80:	6d a9       	ldd	r22, Y+53	; 0x35
    4f82:	7e a9       	ldd	r23, Y+54	; 0x36
    4f84:	8f a9       	ldd	r24, Y+55	; 0x37
    4f86:	98 ad       	ldd	r25, Y+56	; 0x38
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	40 e2       	ldi	r20, 0x20	; 32
    4f8e:	51 e4       	ldi	r21, 0x41	; 65
    4f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f94:	dc 01       	movw	r26, r24
    4f96:	cb 01       	movw	r24, r22
    4f98:	bc 01       	movw	r22, r24
    4f9a:	cd 01       	movw	r24, r26
    4f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fa0:	dc 01       	movw	r26, r24
    4fa2:	cb 01       	movw	r24, r22
    4fa4:	98 ab       	std	Y+48, r25	; 0x30
    4fa6:	8f a7       	std	Y+47, r24	; 0x2f
    4fa8:	0f c0       	rjmp	.+30     	; 0x4fc8 <main+0xb9a>
    4faa:	80 e9       	ldi	r24, 0x90	; 144
    4fac:	91 e0       	ldi	r25, 0x01	; 1
    4fae:	9e a7       	std	Y+46, r25	; 0x2e
    4fb0:	8d a7       	std	Y+45, r24	; 0x2d
    4fb2:	8d a5       	ldd	r24, Y+45	; 0x2d
    4fb4:	9e a5       	ldd	r25, Y+46	; 0x2e
    4fb6:	01 97       	sbiw	r24, 0x01	; 1
    4fb8:	f1 f7       	brne	.-4      	; 0x4fb6 <main+0xb88>
    4fba:	9e a7       	std	Y+46, r25	; 0x2e
    4fbc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fc0:	98 a9       	ldd	r25, Y+48	; 0x30
    4fc2:	01 97       	sbiw	r24, 0x01	; 1
    4fc4:	98 ab       	std	Y+48, r25	; 0x30
    4fc6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fca:	98 a9       	ldd	r25, Y+48	; 0x30
    4fcc:	00 97       	sbiw	r24, 0x00	; 0
    4fce:	69 f7       	brne	.-38     	; 0x4faa <main+0xb7c>
    4fd0:	14 c0       	rjmp	.+40     	; 0x4ffa <main+0xbcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fd2:	69 a9       	ldd	r22, Y+49	; 0x31
    4fd4:	7a a9       	ldd	r23, Y+50	; 0x32
    4fd6:	8b a9       	ldd	r24, Y+51	; 0x33
    4fd8:	9c a9       	ldd	r25, Y+52	; 0x34
    4fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fde:	dc 01       	movw	r26, r24
    4fe0:	cb 01       	movw	r24, r22
    4fe2:	98 ab       	std	Y+48, r25	; 0x30
    4fe4:	8f a7       	std	Y+47, r24	; 0x2f
    4fe6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fe8:	98 a9       	ldd	r25, Y+48	; 0x30
    4fea:	9c a7       	std	Y+44, r25	; 0x2c
    4fec:	8b a7       	std	Y+43, r24	; 0x2b
    4fee:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ff0:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ff2:	01 97       	sbiw	r24, 0x01	; 1
    4ff4:	f1 f7       	brne	.-4      	; 0x4ff2 <main+0xbc4>
    4ff6:	9c a7       	std	Y+44, r25	; 0x2c
    4ff8:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(3000);
						DC_Motor_Stop(DC_MOTOR_0);
    4ffa:	80 e0       	ldi	r24, 0x00	; 0
    4ffc:	0e 94 36 21 	call	0x426c	; 0x426c <DC_Motor_Stop>
						gettingMovingOption = 0;
    5000:	10 92 09 03 	sts	0x0309, r1
						flag = 0; // Reset the flag after direction selection
    5004:	fe 01       	movw	r30, r28
    5006:	e1 58       	subi	r30, 0x81	; 129
    5008:	ff 4f       	sbci	r31, 0xFF	; 255
    500a:	10 82       	st	Z, r1
						currentState = STATE_MOTOR_OPTIONS;
    500c:	82 e0       	ldi	r24, 0x02	; 2
    500e:	80 93 1a 03 	sts	0x031A, r24
    5012:	7f c0       	rjmp	.+254    	; 0x5112 <main+0xce4>
					} else {
						lcd_ES_tclear();
    5014:	0e 94 9c 1a 	call	0x3538	; 0x3538 <lcd_ES_tclear>
						Lcd_ES_tsendString("Invalid Option");
    5018:	88 ed       	ldi	r24, 0xD8	; 216
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
    5020:	80 e0       	ldi	r24, 0x00	; 0
    5022:	90 e0       	ldi	r25, 0x00	; 0
    5024:	aa ef       	ldi	r26, 0xFA	; 250
    5026:	b4 e4       	ldi	r27, 0x44	; 68
    5028:	8f a3       	std	Y+39, r24	; 0x27
    502a:	98 a7       	std	Y+40, r25	; 0x28
    502c:	a9 a7       	std	Y+41, r26	; 0x29
    502e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5030:	6f a1       	ldd	r22, Y+39	; 0x27
    5032:	78 a5       	ldd	r23, Y+40	; 0x28
    5034:	89 a5       	ldd	r24, Y+41	; 0x29
    5036:	9a a5       	ldd	r25, Y+42	; 0x2a
    5038:	20 e0       	ldi	r18, 0x00	; 0
    503a:	30 e0       	ldi	r19, 0x00	; 0
    503c:	4a e7       	ldi	r20, 0x7A	; 122
    503e:	55 e4       	ldi	r21, 0x45	; 69
    5040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5044:	dc 01       	movw	r26, r24
    5046:	cb 01       	movw	r24, r22
    5048:	8b a3       	std	Y+35, r24	; 0x23
    504a:	9c a3       	std	Y+36, r25	; 0x24
    504c:	ad a3       	std	Y+37, r26	; 0x25
    504e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5050:	6b a1       	ldd	r22, Y+35	; 0x23
    5052:	7c a1       	ldd	r23, Y+36	; 0x24
    5054:	8d a1       	ldd	r24, Y+37	; 0x25
    5056:	9e a1       	ldd	r25, Y+38	; 0x26
    5058:	20 e0       	ldi	r18, 0x00	; 0
    505a:	30 e0       	ldi	r19, 0x00	; 0
    505c:	40 e8       	ldi	r20, 0x80	; 128
    505e:	5f e3       	ldi	r21, 0x3F	; 63
    5060:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5064:	88 23       	and	r24, r24
    5066:	2c f4       	brge	.+10     	; 0x5072 <main+0xc44>
		__ticks = 1;
    5068:	81 e0       	ldi	r24, 0x01	; 1
    506a:	90 e0       	ldi	r25, 0x00	; 0
    506c:	9a a3       	std	Y+34, r25	; 0x22
    506e:	89 a3       	std	Y+33, r24	; 0x21
    5070:	3f c0       	rjmp	.+126    	; 0x50f0 <main+0xcc2>
	else if (__tmp > 65535)
    5072:	6b a1       	ldd	r22, Y+35	; 0x23
    5074:	7c a1       	ldd	r23, Y+36	; 0x24
    5076:	8d a1       	ldd	r24, Y+37	; 0x25
    5078:	9e a1       	ldd	r25, Y+38	; 0x26
    507a:	20 e0       	ldi	r18, 0x00	; 0
    507c:	3f ef       	ldi	r19, 0xFF	; 255
    507e:	4f e7       	ldi	r20, 0x7F	; 127
    5080:	57 e4       	ldi	r21, 0x47	; 71
    5082:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5086:	18 16       	cp	r1, r24
    5088:	4c f5       	brge	.+82     	; 0x50dc <main+0xcae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    508a:	6f a1       	ldd	r22, Y+39	; 0x27
    508c:	78 a5       	ldd	r23, Y+40	; 0x28
    508e:	89 a5       	ldd	r24, Y+41	; 0x29
    5090:	9a a5       	ldd	r25, Y+42	; 0x2a
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	40 e2       	ldi	r20, 0x20	; 32
    5098:	51 e4       	ldi	r21, 0x41	; 65
    509a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    509e:	dc 01       	movw	r26, r24
    50a0:	cb 01       	movw	r24, r22
    50a2:	bc 01       	movw	r22, r24
    50a4:	cd 01       	movw	r24, r26
    50a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50aa:	dc 01       	movw	r26, r24
    50ac:	cb 01       	movw	r24, r22
    50ae:	9a a3       	std	Y+34, r25	; 0x22
    50b0:	89 a3       	std	Y+33, r24	; 0x21
    50b2:	0f c0       	rjmp	.+30     	; 0x50d2 <main+0xca4>
    50b4:	80 e9       	ldi	r24, 0x90	; 144
    50b6:	91 e0       	ldi	r25, 0x01	; 1
    50b8:	98 a3       	std	Y+32, r25	; 0x20
    50ba:	8f 8f       	std	Y+31, r24	; 0x1f
    50bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50be:	98 a1       	ldd	r25, Y+32	; 0x20
    50c0:	01 97       	sbiw	r24, 0x01	; 1
    50c2:	f1 f7       	brne	.-4      	; 0x50c0 <main+0xc92>
    50c4:	98 a3       	std	Y+32, r25	; 0x20
    50c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50c8:	89 a1       	ldd	r24, Y+33	; 0x21
    50ca:	9a a1       	ldd	r25, Y+34	; 0x22
    50cc:	01 97       	sbiw	r24, 0x01	; 1
    50ce:	9a a3       	std	Y+34, r25	; 0x22
    50d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50d2:	89 a1       	ldd	r24, Y+33	; 0x21
    50d4:	9a a1       	ldd	r25, Y+34	; 0x22
    50d6:	00 97       	sbiw	r24, 0x00	; 0
    50d8:	69 f7       	brne	.-38     	; 0x50b4 <main+0xc86>
    50da:	14 c0       	rjmp	.+40     	; 0x5104 <main+0xcd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50dc:	6b a1       	ldd	r22, Y+35	; 0x23
    50de:	7c a1       	ldd	r23, Y+36	; 0x24
    50e0:	8d a1       	ldd	r24, Y+37	; 0x25
    50e2:	9e a1       	ldd	r25, Y+38	; 0x26
    50e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e8:	dc 01       	movw	r26, r24
    50ea:	cb 01       	movw	r24, r22
    50ec:	9a a3       	std	Y+34, r25	; 0x22
    50ee:	89 a3       	std	Y+33, r24	; 0x21
    50f0:	89 a1       	ldd	r24, Y+33	; 0x21
    50f2:	9a a1       	ldd	r25, Y+34	; 0x22
    50f4:	9e 8f       	std	Y+30, r25	; 0x1e
    50f6:	8d 8f       	std	Y+29, r24	; 0x1d
    50f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50fc:	01 97       	sbiw	r24, 0x01	; 1
    50fe:	f1 f7       	brne	.-4      	; 0x50fc <main+0xcce>
    5100:	9e 8f       	std	Y+30, r25	; 0x1e
    5102:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(2000);
						flag = 0; // Reset the flag after direction selection
    5104:	fe 01       	movw	r30, r28
    5106:	e1 58       	subi	r30, 0x81	; 129
    5108:	ff 4f       	sbci	r31, 0xFF	; 255
    510a:	10 82       	st	Z, r1
						currentState = STATE_DC_MOTOR_MOVE;
    510c:	83 e0       	ldi	r24, 0x03	; 3
    510e:	80 93 1a 03 	sts	0x031A, r24
					}
				}
				TIMER0_Stop();
    5112:	0e 94 4f 08 	call	0x109e	; 0x109e <TIMER0_Stop>
    5116:	ca c9       	rjmp	.-3180   	; 0x44ac <main+0x7e>
			break;



		case STATE_STEPPER_MOVE:
			if (!gettingStepperOption) {
    5118:	80 91 0a 03 	lds	r24, 0x030A
    511c:	88 23       	and	r24, r24
    511e:	49 f4       	brne	.+18     	; 0x5132 <main+0xd04>
				lcd_ES_tclear();
    5120:	0e 94 9c 1a 	call	0x3538	; 0x3538 <lcd_ES_tclear>
				Lcd_ES_tsendString("Angle(3dig) :");
    5124:	80 e1       	ldi	r24, 0x10	; 16
    5126:	91 e0       	ldi	r25, 0x01	; 1
    5128:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
				gettingStepperOption = 1;
    512c:	81 e0       	ldi	r24, 0x01	; 1
    512e:	80 93 0a 03 	sts	0x030A, r24
			}
			KPD_ES_tGetKeyPressed(&Option3);
    5132:	ce 01       	movw	r24, r28
    5134:	89 57       	subi	r24, 0x79	; 121
    5136:	9f 4f       	sbci	r25, 0xFF	; 255
    5138:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <KPD_ES_tGetKeyPressed>
			if (Option3 != KPD_U8_NOT_PRESSED) {
    513c:	fe 01       	movw	r30, r28
    513e:	e9 57       	subi	r30, 0x79	; 121
    5140:	ff 4f       	sbci	r31, 0xFF	; 255
    5142:	80 81       	ld	r24, Z
    5144:	8f 3f       	cpi	r24, 0xFF	; 255
    5146:	09 f4       	brne	.+2      	; 0x514a <main+0xd1c>
    5148:	b1 c9       	rjmp	.-3230   	; 0x44ac <main+0x7e>
				LCD_ES_tGoTo(1, indexStepper);
    514a:	90 91 fb 02 	lds	r25, 0x02FB
    514e:	81 e0       	ldi	r24, 0x01	; 1
    5150:	69 2f       	mov	r22, r25
    5152:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <LCD_ES_tGoTo>
				Lcd_ES_tsendChar(Option3);
    5156:	fe 01       	movw	r30, r28
    5158:	e9 57       	subi	r30, 0x79	; 121
    515a:	ff 4f       	sbci	r31, 0xFF	; 255
    515c:	80 81       	ld	r24, Z
    515e:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <Lcd_ES_tsendChar>
				inputSteper[indexStepper] = Option3 - '0'; // Convert character to integer
    5162:	80 91 fb 02 	lds	r24, 0x02FB
    5166:	28 2f       	mov	r18, r24
    5168:	30 e0       	ldi	r19, 0x00	; 0
    516a:	fe 01       	movw	r30, r28
    516c:	e9 57       	subi	r30, 0x79	; 121
    516e:	ff 4f       	sbci	r31, 0xFF	; 255
    5170:	80 81       	ld	r24, Z
    5172:	80 53       	subi	r24, 0x30	; 48
    5174:	f9 01       	movw	r30, r18
    5176:	ea 50       	subi	r30, 0x0A	; 10
    5178:	fd 4f       	sbci	r31, 0xFD	; 253
    517a:	80 83       	st	Z, r24
				indexStepper++;
    517c:	80 91 fb 02 	lds	r24, 0x02FB
    5180:	8f 5f       	subi	r24, 0xFF	; 255
    5182:	80 93 fb 02 	sts	0x02FB, r24
				if (indexStepper >= 3) { // Use indexStepper instead of indexz
    5186:	80 91 fb 02 	lds	r24, 0x02FB
    518a:	83 30       	cpi	r24, 0x03	; 3
    518c:	08 f4       	brcc	.+2      	; 0x5190 <main+0xd62>
    518e:	8e c9       	rjmp	.-3300   	; 0x44ac <main+0x7e>
					stepperAngle = (inputSteper[0] * 100) + (inputSteper[1] * 10) + inputSteper[2];
    5190:	80 91 f6 02 	lds	r24, 0x02F6
    5194:	28 2f       	mov	r18, r24
    5196:	30 e0       	ldi	r19, 0x00	; 0
    5198:	84 e6       	ldi	r24, 0x64	; 100
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	ac 01       	movw	r20, r24
    519e:	24 9f       	mul	r18, r20
    51a0:	c0 01       	movw	r24, r0
    51a2:	25 9f       	mul	r18, r21
    51a4:	90 0d       	add	r25, r0
    51a6:	34 9f       	mul	r19, r20
    51a8:	90 0d       	add	r25, r0
    51aa:	11 24       	eor	r1, r1
    51ac:	48 2f       	mov	r20, r24
    51ae:	80 91 f7 02 	lds	r24, 0x02F7
    51b2:	88 2f       	mov	r24, r24
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	9c 01       	movw	r18, r24
    51b8:	22 0f       	add	r18, r18
    51ba:	33 1f       	adc	r19, r19
    51bc:	c9 01       	movw	r24, r18
    51be:	88 0f       	add	r24, r24
    51c0:	99 1f       	adc	r25, r25
    51c2:	88 0f       	add	r24, r24
    51c4:	99 1f       	adc	r25, r25
    51c6:	82 0f       	add	r24, r18
    51c8:	93 1f       	adc	r25, r19
    51ca:	94 2f       	mov	r25, r20
    51cc:	98 0f       	add	r25, r24
    51ce:	80 91 f8 02 	lds	r24, 0x02F8
    51d2:	fe 01       	movw	r30, r28
    51d4:	ee 57       	subi	r30, 0x7E	; 126
    51d6:	ff 4f       	sbci	r31, 0xFF	; 255
    51d8:	89 0f       	add	r24, r25
    51da:	80 83       	st	Z, r24
					Stepper_Rotate(stepperAngle);
    51dc:	fe 01       	movw	r30, r28
    51de:	ee 57       	subi	r30, 0x7E	; 126
    51e0:	ff 4f       	sbci	r31, 0xFF	; 255
    51e2:	80 81       	ld	r24, Z
    51e4:	0e 94 f6 15 	call	0x2bec	; 0x2bec <Stepper_Rotate>
					memset(inputSteper, '\0', sizeof(inputSteper));
    51e8:	86 ef       	ldi	r24, 0xF6	; 246
    51ea:	92 e0       	ldi	r25, 0x02	; 2
    51ec:	60 e0       	ldi	r22, 0x00	; 0
    51ee:	70 e0       	ldi	r23, 0x00	; 0
    51f0:	45 e0       	ldi	r20, 0x05	; 5
    51f2:	50 e0       	ldi	r21, 0x00	; 0
    51f4:	0e 94 25 2b 	call	0x564a	; 0x564a <memset>
					indexStepper = 0;
    51f8:	10 92 fb 02 	sts	0x02FB, r1
					gettingStepperOption = 0;
    51fc:	10 92 0a 03 	sts	0x030A, r1
					gettingMotorOption=0;
    5200:	10 92 08 03 	sts	0x0308, r1
					currentState = STATE_MOTOR_OPTIONS;
    5204:	82 e0       	ldi	r24, 0x02	; 2
    5206:	80 93 1a 03 	sts	0x031A, r24
    520a:	50 c9       	rjmp	.-3424   	; 0x44ac <main+0x7e>
			}
			break;


		case STATE_SERVO_MOVE:
			if (!gettingServoOption) {
    520c:	80 91 0c 03 	lds	r24, 0x030C
    5210:	88 23       	and	r24, r24
    5212:	49 f4       	brne	.+18     	; 0x5226 <main+0xdf8>
				lcd_ES_tclear();
    5214:	0e 94 9c 1a 	call	0x3538	; 0x3538 <lcd_ES_tclear>
				Lcd_ES_tsendString("Signed angle :");
    5218:	8e e1       	ldi	r24, 0x1E	; 30
    521a:	91 e0       	ldi	r25, 0x01	; 1
    521c:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
				gettingServoOption = 1;
    5220:	81 e0       	ldi	r24, 0x01	; 1
    5222:	80 93 0c 03 	sts	0x030C, r24
			}
			KPD_ES_tGetKeyPressed(&Option4);
    5226:	ce 01       	movw	r24, r28
    5228:	88 57       	subi	r24, 0x78	; 120
    522a:	9f 4f       	sbci	r25, 0xFF	; 255
    522c:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <KPD_ES_tGetKeyPressed>
			if (Option4 != KPD_U8_NOT_PRESSED) {
    5230:	fe 01       	movw	r30, r28
    5232:	e8 57       	subi	r30, 0x78	; 120
    5234:	ff 4f       	sbci	r31, 0xFF	; 255
    5236:	80 81       	ld	r24, Z
    5238:	8f 3f       	cpi	r24, 0xFF	; 255
    523a:	09 f4       	brne	.+2      	; 0x523e <main+0xe10>
    523c:	37 c9       	rjmp	.-3474   	; 0x44ac <main+0x7e>
				LCD_ES_tGoTo(1, indexServo);
    523e:	90 91 01 03 	lds	r25, 0x0301
    5242:	81 e0       	ldi	r24, 0x01	; 1
    5244:	69 2f       	mov	r22, r25
    5246:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <LCD_ES_tGoTo>
				Lcd_ES_tsendChar(Option4);
    524a:	fe 01       	movw	r30, r28
    524c:	e8 57       	subi	r30, 0x78	; 120
    524e:	ff 4f       	sbci	r31, 0xFF	; 255
    5250:	80 81       	ld	r24, Z
    5252:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <Lcd_ES_tsendChar>
				if(indexServo == 0)
    5256:	80 91 01 03 	lds	r24, 0x0301
    525a:	88 23       	and	r24, r24
    525c:	31 f4       	brne	.+12     	; 0x526a <main+0xe3c>
					Sign = Option4;
    525e:	fe 01       	movw	r30, r28
    5260:	e8 57       	subi	r30, 0x78	; 120
    5262:	ff 4f       	sbci	r31, 0xFF	; 255
    5264:	80 81       	ld	r24, Z
    5266:	80 93 ef 02 	sts	0x02EF, r24
				inputServo[indexServo] = Option4 - '0'; // Convert character to integer
    526a:	80 91 01 03 	lds	r24, 0x0301
    526e:	28 2f       	mov	r18, r24
    5270:	30 e0       	ldi	r19, 0x00	; 0
    5272:	fe 01       	movw	r30, r28
    5274:	e8 57       	subi	r30, 0x78	; 120
    5276:	ff 4f       	sbci	r31, 0xFF	; 255
    5278:	80 81       	ld	r24, Z
    527a:	80 53       	subi	r24, 0x30	; 48
    527c:	f9 01       	movw	r30, r18
    527e:	e4 50       	subi	r30, 0x04	; 4
    5280:	fd 4f       	sbci	r31, 0xFD	; 253
    5282:	80 83       	st	Z, r24
				indexServo++;
    5284:	80 91 01 03 	lds	r24, 0x0301
    5288:	8f 5f       	subi	r24, 0xFF	; 255
    528a:	80 93 01 03 	sts	0x0301, r24
				if (indexServo >= 3) { // Use indexStepper instead of indexz
    528e:	80 91 01 03 	lds	r24, 0x0301
    5292:	83 30       	cpi	r24, 0x03	; 3
    5294:	08 f4       	brcc	.+2      	; 0x5298 <main+0xe6a>
    5296:	0a c9       	rjmp	.-3564   	; 0x44ac <main+0x7e>
					if(Sign == '+'){
    5298:	80 91 ef 02 	lds	r24, 0x02EF
    529c:	8b 32       	cpi	r24, 0x2B	; 43
    529e:	d1 f4       	brne	.+52     	; 0x52d4 <main+0xea6>
						ServoAngle = +((inputServo[1] * 10) + inputServo[2]);
    52a0:	80 91 fd 02 	lds	r24, 0x02FD
    52a4:	88 2f       	mov	r24, r24
    52a6:	90 e0       	ldi	r25, 0x00	; 0
    52a8:	9c 01       	movw	r18, r24
    52aa:	22 0f       	add	r18, r18
    52ac:	33 1f       	adc	r19, r19
    52ae:	c9 01       	movw	r24, r18
    52b0:	88 0f       	add	r24, r24
    52b2:	99 1f       	adc	r25, r25
    52b4:	88 0f       	add	r24, r24
    52b6:	99 1f       	adc	r25, r25
    52b8:	28 0f       	add	r18, r24
    52ba:	39 1f       	adc	r19, r25
    52bc:	80 91 fe 02 	lds	r24, 0x02FE
    52c0:	88 2f       	mov	r24, r24
    52c2:	90 e0       	ldi	r25, 0x00	; 0
    52c4:	fe 01       	movw	r30, r28
    52c6:	e0 58       	subi	r30, 0x80	; 128
    52c8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ca:	82 0f       	add	r24, r18
    52cc:	93 1f       	adc	r25, r19
    52ce:	91 83       	std	Z+1, r25	; 0x01
    52d0:	80 83       	st	Z, r24
    52d2:	1c c0       	rjmp	.+56     	; 0x530c <main+0xede>
					}else{
						ServoAngle = -((inputServo[1] * 10) + inputServo[2]);
    52d4:	80 91 fd 02 	lds	r24, 0x02FD
    52d8:	88 2f       	mov	r24, r24
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	9c 01       	movw	r18, r24
    52de:	22 0f       	add	r18, r18
    52e0:	33 1f       	adc	r19, r19
    52e2:	c9 01       	movw	r24, r18
    52e4:	88 0f       	add	r24, r24
    52e6:	99 1f       	adc	r25, r25
    52e8:	88 0f       	add	r24, r24
    52ea:	99 1f       	adc	r25, r25
    52ec:	82 0f       	add	r24, r18
    52ee:	93 1f       	adc	r25, r19
    52f0:	90 95       	com	r25
    52f2:	81 95       	neg	r24
    52f4:	9f 4f       	sbci	r25, 0xFF	; 255
    52f6:	20 91 fe 02 	lds	r18, 0x02FE
    52fa:	22 2f       	mov	r18, r18
    52fc:	30 e0       	ldi	r19, 0x00	; 0
    52fe:	fe 01       	movw	r30, r28
    5300:	e0 58       	subi	r30, 0x80	; 128
    5302:	ff 4f       	sbci	r31, 0xFF	; 255
    5304:	82 1b       	sub	r24, r18
    5306:	93 0b       	sbc	r25, r19
    5308:	91 83       	std	Z+1, r25	; 0x01
    530a:	80 83       	st	Z, r24
					}
					Servo_Turn(ServoAngle);
    530c:	fe 01       	movw	r30, r28
    530e:	e0 58       	subi	r30, 0x80	; 128
    5310:	ff 4f       	sbci	r31, 0xFF	; 255
    5312:	80 81       	ld	r24, Z
    5314:	91 81       	ldd	r25, Z+1	; 0x01
    5316:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <Servo_Turn>

					memset(inputServo, '\0', sizeof(inputServo));
    531a:	8c ef       	ldi	r24, 0xFC	; 252
    531c:	92 e0       	ldi	r25, 0x02	; 2
    531e:	60 e0       	ldi	r22, 0x00	; 0
    5320:	70 e0       	ldi	r23, 0x00	; 0
    5322:	45 e0       	ldi	r20, 0x05	; 5
    5324:	50 e0       	ldi	r21, 0x00	; 0
    5326:	0e 94 25 2b 	call	0x564a	; 0x564a <memset>
					indexServo = 0;
    532a:	10 92 01 03 	sts	0x0301, r1
    532e:	80 e0       	ldi	r24, 0x00	; 0
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	aa e7       	ldi	r26, 0x7A	; 122
    5334:	b4 e4       	ldi	r27, 0x44	; 68
    5336:	89 8f       	std	Y+25, r24	; 0x19
    5338:	9a 8f       	std	Y+26, r25	; 0x1a
    533a:	ab 8f       	std	Y+27, r26	; 0x1b
    533c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    533e:	69 8d       	ldd	r22, Y+25	; 0x19
    5340:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5342:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5344:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5346:	20 e0       	ldi	r18, 0x00	; 0
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	4a e7       	ldi	r20, 0x7A	; 122
    534c:	55 e4       	ldi	r21, 0x45	; 69
    534e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5352:	dc 01       	movw	r26, r24
    5354:	cb 01       	movw	r24, r22
    5356:	8d 8b       	std	Y+21, r24	; 0x15
    5358:	9e 8b       	std	Y+22, r25	; 0x16
    535a:	af 8b       	std	Y+23, r26	; 0x17
    535c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    535e:	6d 89       	ldd	r22, Y+21	; 0x15
    5360:	7e 89       	ldd	r23, Y+22	; 0x16
    5362:	8f 89       	ldd	r24, Y+23	; 0x17
    5364:	98 8d       	ldd	r25, Y+24	; 0x18
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	40 e8       	ldi	r20, 0x80	; 128
    536c:	5f e3       	ldi	r21, 0x3F	; 63
    536e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5372:	88 23       	and	r24, r24
    5374:	2c f4       	brge	.+10     	; 0x5380 <main+0xf52>
		__ticks = 1;
    5376:	81 e0       	ldi	r24, 0x01	; 1
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	9c 8b       	std	Y+20, r25	; 0x14
    537c:	8b 8b       	std	Y+19, r24	; 0x13
    537e:	3f c0       	rjmp	.+126    	; 0x53fe <main+0xfd0>
	else if (__tmp > 65535)
    5380:	6d 89       	ldd	r22, Y+21	; 0x15
    5382:	7e 89       	ldd	r23, Y+22	; 0x16
    5384:	8f 89       	ldd	r24, Y+23	; 0x17
    5386:	98 8d       	ldd	r25, Y+24	; 0x18
    5388:	20 e0       	ldi	r18, 0x00	; 0
    538a:	3f ef       	ldi	r19, 0xFF	; 255
    538c:	4f e7       	ldi	r20, 0x7F	; 127
    538e:	57 e4       	ldi	r21, 0x47	; 71
    5390:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5394:	18 16       	cp	r1, r24
    5396:	4c f5       	brge	.+82     	; 0x53ea <main+0xfbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5398:	69 8d       	ldd	r22, Y+25	; 0x19
    539a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    539c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    539e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53a0:	20 e0       	ldi	r18, 0x00	; 0
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	40 e2       	ldi	r20, 0x20	; 32
    53a6:	51 e4       	ldi	r21, 0x41	; 65
    53a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53ac:	dc 01       	movw	r26, r24
    53ae:	cb 01       	movw	r24, r22
    53b0:	bc 01       	movw	r22, r24
    53b2:	cd 01       	movw	r24, r26
    53b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53b8:	dc 01       	movw	r26, r24
    53ba:	cb 01       	movw	r24, r22
    53bc:	9c 8b       	std	Y+20, r25	; 0x14
    53be:	8b 8b       	std	Y+19, r24	; 0x13
    53c0:	0f c0       	rjmp	.+30     	; 0x53e0 <main+0xfb2>
    53c2:	80 e9       	ldi	r24, 0x90	; 144
    53c4:	91 e0       	ldi	r25, 0x01	; 1
    53c6:	9a 8b       	std	Y+18, r25	; 0x12
    53c8:	89 8b       	std	Y+17, r24	; 0x11
    53ca:	89 89       	ldd	r24, Y+17	; 0x11
    53cc:	9a 89       	ldd	r25, Y+18	; 0x12
    53ce:	01 97       	sbiw	r24, 0x01	; 1
    53d0:	f1 f7       	brne	.-4      	; 0x53ce <main+0xfa0>
    53d2:	9a 8b       	std	Y+18, r25	; 0x12
    53d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53d6:	8b 89       	ldd	r24, Y+19	; 0x13
    53d8:	9c 89       	ldd	r25, Y+20	; 0x14
    53da:	01 97       	sbiw	r24, 0x01	; 1
    53dc:	9c 8b       	std	Y+20, r25	; 0x14
    53de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53e0:	8b 89       	ldd	r24, Y+19	; 0x13
    53e2:	9c 89       	ldd	r25, Y+20	; 0x14
    53e4:	00 97       	sbiw	r24, 0x00	; 0
    53e6:	69 f7       	brne	.-38     	; 0x53c2 <main+0xf94>
    53e8:	14 c0       	rjmp	.+40     	; 0x5412 <main+0xfe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53ea:	6d 89       	ldd	r22, Y+21	; 0x15
    53ec:	7e 89       	ldd	r23, Y+22	; 0x16
    53ee:	8f 89       	ldd	r24, Y+23	; 0x17
    53f0:	98 8d       	ldd	r25, Y+24	; 0x18
    53f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53f6:	dc 01       	movw	r26, r24
    53f8:	cb 01       	movw	r24, r22
    53fa:	9c 8b       	std	Y+20, r25	; 0x14
    53fc:	8b 8b       	std	Y+19, r24	; 0x13
    53fe:	8b 89       	ldd	r24, Y+19	; 0x13
    5400:	9c 89       	ldd	r25, Y+20	; 0x14
    5402:	98 8b       	std	Y+16, r25	; 0x10
    5404:	8f 87       	std	Y+15, r24	; 0x0f
    5406:	8f 85       	ldd	r24, Y+15	; 0x0f
    5408:	98 89       	ldd	r25, Y+16	; 0x10
    540a:	01 97       	sbiw	r24, 0x01	; 1
    540c:	f1 f7       	brne	.-4      	; 0x540a <main+0xfdc>
    540e:	98 8b       	std	Y+16, r25	; 0x10
    5410:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					Servo_Stop();
    5412:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <Servo_Stop>
					gettingServoOption = 0;
    5416:	10 92 0c 03 	sts	0x030C, r1
					gettingMotorOption=0;
    541a:	10 92 08 03 	sts	0x0308, r1
					currentState = STATE_MOTOR_OPTIONS;
    541e:	82 e0       	ldi	r24, 0x02	; 2
    5420:	80 93 1a 03 	sts	0x031A, r24
    5424:	43 c8       	rjmp	.-3962   	; 0x44ac <main+0x7e>
			break;



		case STATE_EXIT:
			lcd_ES_tclear();
    5426:	0e 94 9c 1a 	call	0x3538	; 0x3538 <lcd_ES_tclear>
			Lcd_ES_tsendString("Exit System :)");
    542a:	8d e2       	ldi	r24, 0x2D	; 45
    542c:	91 e0       	ldi	r25, 0x01	; 1
    542e:	0e 94 83 1c 	call	0x3906	; 0x3906 <Lcd_ES_tsendString>
    5432:	80 e0       	ldi	r24, 0x00	; 0
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	aa e7       	ldi	r26, 0x7A	; 122
    5438:	b4 e4       	ldi	r27, 0x44	; 68
    543a:	8b 87       	std	Y+11, r24	; 0x0b
    543c:	9c 87       	std	Y+12, r25	; 0x0c
    543e:	ad 87       	std	Y+13, r26	; 0x0d
    5440:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5442:	6b 85       	ldd	r22, Y+11	; 0x0b
    5444:	7c 85       	ldd	r23, Y+12	; 0x0c
    5446:	8d 85       	ldd	r24, Y+13	; 0x0d
    5448:	9e 85       	ldd	r25, Y+14	; 0x0e
    544a:	20 e0       	ldi	r18, 0x00	; 0
    544c:	30 e0       	ldi	r19, 0x00	; 0
    544e:	4a e7       	ldi	r20, 0x7A	; 122
    5450:	55 e4       	ldi	r21, 0x45	; 69
    5452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5456:	dc 01       	movw	r26, r24
    5458:	cb 01       	movw	r24, r22
    545a:	8f 83       	std	Y+7, r24	; 0x07
    545c:	98 87       	std	Y+8, r25	; 0x08
    545e:	a9 87       	std	Y+9, r26	; 0x09
    5460:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5462:	6f 81       	ldd	r22, Y+7	; 0x07
    5464:	78 85       	ldd	r23, Y+8	; 0x08
    5466:	89 85       	ldd	r24, Y+9	; 0x09
    5468:	9a 85       	ldd	r25, Y+10	; 0x0a
    546a:	20 e0       	ldi	r18, 0x00	; 0
    546c:	30 e0       	ldi	r19, 0x00	; 0
    546e:	40 e8       	ldi	r20, 0x80	; 128
    5470:	5f e3       	ldi	r21, 0x3F	; 63
    5472:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5476:	88 23       	and	r24, r24
    5478:	2c f4       	brge	.+10     	; 0x5484 <main+0x1056>
		__ticks = 1;
    547a:	81 e0       	ldi	r24, 0x01	; 1
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	9e 83       	std	Y+6, r25	; 0x06
    5480:	8d 83       	std	Y+5, r24	; 0x05
    5482:	3f c0       	rjmp	.+126    	; 0x5502 <main+0x10d4>
	else if (__tmp > 65535)
    5484:	6f 81       	ldd	r22, Y+7	; 0x07
    5486:	78 85       	ldd	r23, Y+8	; 0x08
    5488:	89 85       	ldd	r24, Y+9	; 0x09
    548a:	9a 85       	ldd	r25, Y+10	; 0x0a
    548c:	20 e0       	ldi	r18, 0x00	; 0
    548e:	3f ef       	ldi	r19, 0xFF	; 255
    5490:	4f e7       	ldi	r20, 0x7F	; 127
    5492:	57 e4       	ldi	r21, 0x47	; 71
    5494:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5498:	18 16       	cp	r1, r24
    549a:	4c f5       	brge	.+82     	; 0x54ee <main+0x10c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    549c:	6b 85       	ldd	r22, Y+11	; 0x0b
    549e:	7c 85       	ldd	r23, Y+12	; 0x0c
    54a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    54a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    54a4:	20 e0       	ldi	r18, 0x00	; 0
    54a6:	30 e0       	ldi	r19, 0x00	; 0
    54a8:	40 e2       	ldi	r20, 0x20	; 32
    54aa:	51 e4       	ldi	r21, 0x41	; 65
    54ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54b0:	dc 01       	movw	r26, r24
    54b2:	cb 01       	movw	r24, r22
    54b4:	bc 01       	movw	r22, r24
    54b6:	cd 01       	movw	r24, r26
    54b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54bc:	dc 01       	movw	r26, r24
    54be:	cb 01       	movw	r24, r22
    54c0:	9e 83       	std	Y+6, r25	; 0x06
    54c2:	8d 83       	std	Y+5, r24	; 0x05
    54c4:	0f c0       	rjmp	.+30     	; 0x54e4 <main+0x10b6>
    54c6:	80 e9       	ldi	r24, 0x90	; 144
    54c8:	91 e0       	ldi	r25, 0x01	; 1
    54ca:	9c 83       	std	Y+4, r25	; 0x04
    54cc:	8b 83       	std	Y+3, r24	; 0x03
    54ce:	8b 81       	ldd	r24, Y+3	; 0x03
    54d0:	9c 81       	ldd	r25, Y+4	; 0x04
    54d2:	01 97       	sbiw	r24, 0x01	; 1
    54d4:	f1 f7       	brne	.-4      	; 0x54d2 <main+0x10a4>
    54d6:	9c 83       	std	Y+4, r25	; 0x04
    54d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54da:	8d 81       	ldd	r24, Y+5	; 0x05
    54dc:	9e 81       	ldd	r25, Y+6	; 0x06
    54de:	01 97       	sbiw	r24, 0x01	; 1
    54e0:	9e 83       	std	Y+6, r25	; 0x06
    54e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54e4:	8d 81       	ldd	r24, Y+5	; 0x05
    54e6:	9e 81       	ldd	r25, Y+6	; 0x06
    54e8:	00 97       	sbiw	r24, 0x00	; 0
    54ea:	69 f7       	brne	.-38     	; 0x54c6 <main+0x1098>
    54ec:	14 c0       	rjmp	.+40     	; 0x5516 <main+0x10e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54ee:	6f 81       	ldd	r22, Y+7	; 0x07
    54f0:	78 85       	ldd	r23, Y+8	; 0x08
    54f2:	89 85       	ldd	r24, Y+9	; 0x09
    54f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    54f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54fa:	dc 01       	movw	r26, r24
    54fc:	cb 01       	movw	r24, r22
    54fe:	9e 83       	std	Y+6, r25	; 0x06
    5500:	8d 83       	std	Y+5, r24	; 0x05
    5502:	8d 81       	ldd	r24, Y+5	; 0x05
    5504:	9e 81       	ldd	r25, Y+6	; 0x06
    5506:	9a 83       	std	Y+2, r25	; 0x02
    5508:	89 83       	std	Y+1, r24	; 0x01
    550a:	89 81       	ldd	r24, Y+1	; 0x01
    550c:	9a 81       	ldd	r25, Y+2	; 0x02
    550e:	01 97       	sbiw	r24, 0x01	; 1
    5510:	f1 f7       	brne	.-4      	; 0x550e <main+0x10e0>
    5512:	9a 83       	std	Y+2, r25	; 0x02
    5514:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			return 0;
    5516:	80 e0       	ldi	r24, 0x00	; 0
    5518:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	return 0;
}
    551a:	c5 57       	subi	r28, 0x75	; 117
    551c:	df 4f       	sbci	r29, 0xFF	; 255
    551e:	0f b6       	in	r0, 0x3f	; 63
    5520:	f8 94       	cli
    5522:	de bf       	out	0x3e, r29	; 62
    5524:	0f be       	out	0x3f, r0	; 63
    5526:	cd bf       	out	0x3d, r28	; 61
    5528:	cf 91       	pop	r28
    552a:	df 91       	pop	r29
    552c:	1f 91       	pop	r17
    552e:	0f 91       	pop	r16
    5530:	08 95       	ret

00005532 <__mulsi3>:
    5532:	62 9f       	mul	r22, r18
    5534:	d0 01       	movw	r26, r0
    5536:	73 9f       	mul	r23, r19
    5538:	f0 01       	movw	r30, r0
    553a:	82 9f       	mul	r24, r18
    553c:	e0 0d       	add	r30, r0
    553e:	f1 1d       	adc	r31, r1
    5540:	64 9f       	mul	r22, r20
    5542:	e0 0d       	add	r30, r0
    5544:	f1 1d       	adc	r31, r1
    5546:	92 9f       	mul	r25, r18
    5548:	f0 0d       	add	r31, r0
    554a:	83 9f       	mul	r24, r19
    554c:	f0 0d       	add	r31, r0
    554e:	74 9f       	mul	r23, r20
    5550:	f0 0d       	add	r31, r0
    5552:	65 9f       	mul	r22, r21
    5554:	f0 0d       	add	r31, r0
    5556:	99 27       	eor	r25, r25
    5558:	72 9f       	mul	r23, r18
    555a:	b0 0d       	add	r27, r0
    555c:	e1 1d       	adc	r30, r1
    555e:	f9 1f       	adc	r31, r25
    5560:	63 9f       	mul	r22, r19
    5562:	b0 0d       	add	r27, r0
    5564:	e1 1d       	adc	r30, r1
    5566:	f9 1f       	adc	r31, r25
    5568:	bd 01       	movw	r22, r26
    556a:	cf 01       	movw	r24, r30
    556c:	11 24       	eor	r1, r1
    556e:	08 95       	ret

00005570 <__udivmodhi4>:
    5570:	aa 1b       	sub	r26, r26
    5572:	bb 1b       	sub	r27, r27
    5574:	51 e1       	ldi	r21, 0x11	; 17
    5576:	07 c0       	rjmp	.+14     	; 0x5586 <__udivmodhi4_ep>

00005578 <__udivmodhi4_loop>:
    5578:	aa 1f       	adc	r26, r26
    557a:	bb 1f       	adc	r27, r27
    557c:	a6 17       	cp	r26, r22
    557e:	b7 07       	cpc	r27, r23
    5580:	10 f0       	brcs	.+4      	; 0x5586 <__udivmodhi4_ep>
    5582:	a6 1b       	sub	r26, r22
    5584:	b7 0b       	sbc	r27, r23

00005586 <__udivmodhi4_ep>:
    5586:	88 1f       	adc	r24, r24
    5588:	99 1f       	adc	r25, r25
    558a:	5a 95       	dec	r21
    558c:	a9 f7       	brne	.-22     	; 0x5578 <__udivmodhi4_loop>
    558e:	80 95       	com	r24
    5590:	90 95       	com	r25
    5592:	bc 01       	movw	r22, r24
    5594:	cd 01       	movw	r24, r26
    5596:	08 95       	ret

00005598 <__udivmodsi4>:
    5598:	a1 e2       	ldi	r26, 0x21	; 33
    559a:	1a 2e       	mov	r1, r26
    559c:	aa 1b       	sub	r26, r26
    559e:	bb 1b       	sub	r27, r27
    55a0:	fd 01       	movw	r30, r26
    55a2:	0d c0       	rjmp	.+26     	; 0x55be <__udivmodsi4_ep>

000055a4 <__udivmodsi4_loop>:
    55a4:	aa 1f       	adc	r26, r26
    55a6:	bb 1f       	adc	r27, r27
    55a8:	ee 1f       	adc	r30, r30
    55aa:	ff 1f       	adc	r31, r31
    55ac:	a2 17       	cp	r26, r18
    55ae:	b3 07       	cpc	r27, r19
    55b0:	e4 07       	cpc	r30, r20
    55b2:	f5 07       	cpc	r31, r21
    55b4:	20 f0       	brcs	.+8      	; 0x55be <__udivmodsi4_ep>
    55b6:	a2 1b       	sub	r26, r18
    55b8:	b3 0b       	sbc	r27, r19
    55ba:	e4 0b       	sbc	r30, r20
    55bc:	f5 0b       	sbc	r31, r21

000055be <__udivmodsi4_ep>:
    55be:	66 1f       	adc	r22, r22
    55c0:	77 1f       	adc	r23, r23
    55c2:	88 1f       	adc	r24, r24
    55c4:	99 1f       	adc	r25, r25
    55c6:	1a 94       	dec	r1
    55c8:	69 f7       	brne	.-38     	; 0x55a4 <__udivmodsi4_loop>
    55ca:	60 95       	com	r22
    55cc:	70 95       	com	r23
    55ce:	80 95       	com	r24
    55d0:	90 95       	com	r25
    55d2:	9b 01       	movw	r18, r22
    55d4:	ac 01       	movw	r20, r24
    55d6:	bd 01       	movw	r22, r26
    55d8:	cf 01       	movw	r24, r30
    55da:	08 95       	ret

000055dc <__prologue_saves__>:
    55dc:	2f 92       	push	r2
    55de:	3f 92       	push	r3
    55e0:	4f 92       	push	r4
    55e2:	5f 92       	push	r5
    55e4:	6f 92       	push	r6
    55e6:	7f 92       	push	r7
    55e8:	8f 92       	push	r8
    55ea:	9f 92       	push	r9
    55ec:	af 92       	push	r10
    55ee:	bf 92       	push	r11
    55f0:	cf 92       	push	r12
    55f2:	df 92       	push	r13
    55f4:	ef 92       	push	r14
    55f6:	ff 92       	push	r15
    55f8:	0f 93       	push	r16
    55fa:	1f 93       	push	r17
    55fc:	cf 93       	push	r28
    55fe:	df 93       	push	r29
    5600:	cd b7       	in	r28, 0x3d	; 61
    5602:	de b7       	in	r29, 0x3e	; 62
    5604:	ca 1b       	sub	r28, r26
    5606:	db 0b       	sbc	r29, r27
    5608:	0f b6       	in	r0, 0x3f	; 63
    560a:	f8 94       	cli
    560c:	de bf       	out	0x3e, r29	; 62
    560e:	0f be       	out	0x3f, r0	; 63
    5610:	cd bf       	out	0x3d, r28	; 61
    5612:	09 94       	ijmp

00005614 <__epilogue_restores__>:
    5614:	2a 88       	ldd	r2, Y+18	; 0x12
    5616:	39 88       	ldd	r3, Y+17	; 0x11
    5618:	48 88       	ldd	r4, Y+16	; 0x10
    561a:	5f 84       	ldd	r5, Y+15	; 0x0f
    561c:	6e 84       	ldd	r6, Y+14	; 0x0e
    561e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5620:	8c 84       	ldd	r8, Y+12	; 0x0c
    5622:	9b 84       	ldd	r9, Y+11	; 0x0b
    5624:	aa 84       	ldd	r10, Y+10	; 0x0a
    5626:	b9 84       	ldd	r11, Y+9	; 0x09
    5628:	c8 84       	ldd	r12, Y+8	; 0x08
    562a:	df 80       	ldd	r13, Y+7	; 0x07
    562c:	ee 80       	ldd	r14, Y+6	; 0x06
    562e:	fd 80       	ldd	r15, Y+5	; 0x05
    5630:	0c 81       	ldd	r16, Y+4	; 0x04
    5632:	1b 81       	ldd	r17, Y+3	; 0x03
    5634:	aa 81       	ldd	r26, Y+2	; 0x02
    5636:	b9 81       	ldd	r27, Y+1	; 0x01
    5638:	ce 0f       	add	r28, r30
    563a:	d1 1d       	adc	r29, r1
    563c:	0f b6       	in	r0, 0x3f	; 63
    563e:	f8 94       	cli
    5640:	de bf       	out	0x3e, r29	; 62
    5642:	0f be       	out	0x3f, r0	; 63
    5644:	cd bf       	out	0x3d, r28	; 61
    5646:	ed 01       	movw	r28, r26
    5648:	08 95       	ret

0000564a <memset>:
    564a:	dc 01       	movw	r26, r24
    564c:	01 c0       	rjmp	.+2      	; 0x5650 <memset+0x6>
    564e:	6d 93       	st	X+, r22
    5650:	41 50       	subi	r20, 0x01	; 1
    5652:	50 40       	sbci	r21, 0x00	; 0
    5654:	e0 f7       	brcc	.-8      	; 0x564e <memset+0x4>
    5656:	08 95       	ret

00005658 <strcmp>:
    5658:	fb 01       	movw	r30, r22
    565a:	dc 01       	movw	r26, r24
    565c:	8d 91       	ld	r24, X+
    565e:	01 90       	ld	r0, Z+
    5660:	80 19       	sub	r24, r0
    5662:	01 10       	cpse	r0, r1
    5664:	d9 f3       	breq	.-10     	; 0x565c <strcmp+0x4>
    5666:	99 0b       	sbc	r25, r25
    5668:	08 95       	ret

0000566a <_exit>:
    566a:	f8 94       	cli

0000566c <__stop_program>:
    566c:	ff cf       	rjmp	.-2      	; 0x566c <__stop_program>
