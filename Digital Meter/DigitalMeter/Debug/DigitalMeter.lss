
DigitalMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000502a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001dc  00800060  0000502a  000050be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  0080023c  0080023c  0000529a  2**0
                  ALLOC
  3 .stab         000055f8  00000000  00000000  0000529c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003b63  00000000  00000000  0000a894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000e3f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000e5b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000e7cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00010ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000122ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000135b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00013798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00013a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000144b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__vector_1>
       8:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__vector_2>
       c:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <__vector_10>
      2c:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 24 	call	0x48ca	; 0x48ca <main>
      8a:	0c 94 13 28 	jmp	0x5026	; 0x5026 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dc 27 	jmp	0x4fb8	; 0x4fb8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e2       	ldi	r26, 0x2C	; 44
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f8 27 	jmp	0x4ff0	; 0x4ff0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 04 28 	jmp	0x5008	; 0x5008 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 04 28 	jmp	0x5008	; 0x5008 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dc 27 	jmp	0x4fb8	; 0x4fb8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e2       	ldi	r24, 0x2C	; 44
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f8 27 	jmp	0x4ff0	; 0x4ff0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e4 27 	jmp	0x4fc8	; 0x4fc8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e2       	ldi	r22, 0x2C	; 44
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 00 28 	jmp	0x5000	; 0x5000 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 04 28 	jmp	0x5008	; 0x5008 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 04 28 	jmp	0x5008	; 0x5008 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 04 28 	jmp	0x5008	; 0x5008 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e5 27 	jmp	0x4fca	; 0x4fca <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 01 28 	jmp	0x5002	; 0x5002 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 ec 27 	jmp	0x4fd8	; 0x4fd8 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 08 28 	jmp	0x5010	; 0x5010 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 e4 27 	jmp	0x4fc8	; 0x4fc8 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 00 28 	jmp	0x5000	; 0x5000 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ec 5c       	subi	r30, 0xCC	; 204
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <WDT_voidEnable>:

#include "WDT_Config.h"
#include "WDT_Private.h"


void WDT_voidEnable(void){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     ef2:	a1 e4       	ldi	r26, 0x41	; 65
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e1 e4       	ldi	r30, 0x41	; 65
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 60       	ori	r24, 0x08	; 8
     efe:	8c 93       	st	X, r24
	
	/* Select Prescaler */
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP0_Pin);
     f00:	a1 e4       	ldi	r26, 0x41	; 65
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e1 e4       	ldi	r30, 0x41	; 65
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	81 60       	ori	r24, 0x01	; 1
     f0c:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP1_Pin);
     f0e:	a1 e4       	ldi	r26, 0x41	; 65
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e4       	ldi	r30, 0x41	; 65
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	82 60       	ori	r24, 0x02	; 2
     f1a:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP2_Pin);
     f1c:	a1 e4       	ldi	r26, 0x41	; 65
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e1 e4       	ldi	r30, 0x41	; 65
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	84 60       	ori	r24, 0x04	; 4
     f28:	8c 93       	st	X, r24
}
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <WDT_voidDisable>:

void WDT_voidDisable(void){
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     f38:	a1 e4       	ldi	r26, 0x41	; 65
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e1 e4       	ldi	r30, 0x41	; 65
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	88 60       	ori	r24, 0x08	; 8
     f44:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Disable_Pin);
     f46:	a1 e4       	ldi	r26, 0x41	; 65
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e1 e4       	ldi	r30, 0x41	; 65
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	80 61       	ori	r24, 0x10	; 16
     f52:	8c 93       	st	X, r24
	
	WDT_u8_WDTCR_REG = 0x00;
     f54:	e1 e4       	ldi	r30, 0x41	; 65
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	10 82       	st	Z, r1
}
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <UART_Init>:

#include "UART_Config.h"
#include "UART_Private.h"


void UART_Init(void){
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <UART_Init+0x6>
     f66:	0f 92       	push	r0
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	
	/* This Variable To Put 1 In Bit 7 & Select Asynch Mode  */
	u8 Local_u8UCSRCValue = 0x80;
     f6c:	80 e8       	ldi	r24, 0x80	; 128
     f6e:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Variable To Select Boud Rate */
	u16 Local_u16BoudRate = 103;
     f70:	87 e6       	ldi	r24, 0x67	; 103
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
	
	/* Select Normal Speed Mode */
	#if Speed_Mode == Normal_Speed
	CLR_BIT(UART_u8_UCSRA_REG, UART_U2X_PIN);
     f78:	ab e2       	ldi	r26, 0x2B	; 43
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e2       	ldi	r30, 0x2B	; 43
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8d 7f       	andi	r24, 0xFD	; 253
     f84:	8c 93       	st	X, r24
	#elif Speed_Mode == Double_Speed
	SET_BIT(UART_u8_UCSRA_REG, UART_U2X_PIN);
	#endif
	
	/* Disable MPCM */
	CLR_BIT(UART_u8_UCSRA_REG, UART_MPCM_PIN);
     f86:	ab e2       	ldi	r26, 0x2B	; 43
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	eb e2       	ldi	r30, 0x2B	; 43
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8e 7f       	andi	r24, 0xFE	; 254
     f92:	8c 93       	st	X, r24
	CLR_BIT(UART_u8_UCSRB_REG, UART_UCSZ2_PIN);
	CLR_BIT(Local_u8UCSRCValue, UART_UCSZ0);
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
	
	#elif BitData_Mode == Eight_Data
	CLR_BIT(UART_u8_UCSRB_REG, UART_UCSZ2_PIN);
     f94:	aa e2       	ldi	r26, 0x2A	; 42
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ea e2       	ldi	r30, 0x2A	; 42
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8b 7f       	andi	r24, 0xFB	; 251
     fa0:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ0);
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	82 60       	ori	r24, 0x02	; 2
     fa6:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	84 60       	ori	r24, 0x04	; 4
     fac:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
	#endif
	
	/* Operation Mode (Asynch / Synch) */
	#if Operation_Mode == ASynch
	CLR_BIT(Local_u8UCSRCValue, UART_UMSEL);
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	8f 7b       	andi	r24, 0xBF	; 191
     fb2:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UMSEL);
	#endif
	
	/* Select Parity Mode (None / Even / Odd) */
	#if Parity_Mode == None
	CLR_BIT(Local_u8UCSRCValue, UART_UPM0);
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	8f 7e       	andi	r24, 0xEF	; 239
     fb8:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u8UCSRCValue, UART_UPM1);
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	8f 7d       	andi	r24, 0xDF	; 223
     fbe:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UPM1);
	#endif
	
	/*  Stop Bits Mode ( 1 / 2) */
	#if StopBits_Mode == One_Bit
	CLR_BIT(Local_u8UCSRCValue, UART_USBS);
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	87 7f       	andi	r24, 0xF7	; 247
     fc4:	8b 83       	std	Y+3, r24	; 0x03
	#elif StopBits_Mode == Two_Bits
	SET_BIT(Local_u8UCSRCValue, UART_USBS);
	#endif
	
	/* Update UCSRC Reg Value  */
	UART_u8_UCSRC_REG = Local_u8UCSRCValue;
     fc6:	e0 e4       	ldi	r30, 0x40	; 64
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	80 83       	st	Z, r24
	
	/* Boud Rate => 9600 */
	UART_u8_UBRRL_REG = (u8)Local_u16BoudRate;
     fce:	e9 e2       	ldi	r30, 0x29	; 41
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG = (u8)(Local_u16BoudRate >> 8);
     fd6:	e0 e4       	ldi	r30, 0x40	; 64
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	89 2f       	mov	r24, r25
     fe0:	99 27       	eor	r25, r25
     fe2:	80 83       	st	Z, r24
	
	/* Enable Tx & Rx */
	SET_BIT(UART_u8_UCSRB_REG, UART_TXEN_PIN);
     fe4:	aa e2       	ldi	r26, 0x2A	; 42
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	ea e2       	ldi	r30, 0x2A	; 42
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	88 60       	ori	r24, 0x08	; 8
     ff0:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG, UART_RXEN_PIN);
     ff2:	aa e2       	ldi	r26, 0x2A	; 42
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	ea e2       	ldi	r30, 0x2A	; 42
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 61       	ori	r24, 0x10	; 16
     ffe:	8c 93       	st	X, r24
	
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <UART_Send1ByteData>:

void UART_Send1ByteData(u8 Copy_u8Sended1ByteData){
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	0f 92       	push	r0
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE Pin Should be 1 (empty) to be able to write date in it */
	while(!GET_BIT(UART_u8_UCSRA_REG, UART_UDRE_PIN));
    1018:	eb e2       	ldi	r30, 0x2B	; 43
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	82 95       	swap	r24
    1020:	86 95       	lsr	r24
    1022:	87 70       	andi	r24, 0x07	; 7
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	81 70       	andi	r24, 0x01	; 1
    102a:	90 70       	andi	r25, 0x00	; 0
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	a1 f3       	breq	.-24     	; 0x1018 <UART_Send1ByteData+0xc>
	
	/* Send 1 Byte Data */
	UART_u8_UDR_REG = Copy_u8Sended1ByteData;
    1030:	ec e2       	ldi	r30, 0x2C	; 44
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	80 83       	st	Z, r24
	
}
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <UART_SendString>:

void UART_SendString(u8 *Copy_u8SendedString){
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	00 d0       	rcall	.+0      	; 0x1046 <UART_SendString+0x6>
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	9b 83       	std	Y+3, r25	; 0x03
    104e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1050:	19 82       	std	Y+1, r1	; 0x01
    1052:	0e c0       	rjmp	.+28     	; 0x1070 <UART_SendString+0x30>
	while(Copy_u8SendedString[i] !=  '\0'){
		UART_Send1ByteData(Copy_u8SendedString[i]);
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	fc 01       	movw	r30, r24
    1060:	e2 0f       	add	r30, r18
    1062:	f3 1f       	adc	r31, r19
    1064:	80 81       	ld	r24, Z
    1066:	0e 94 06 08 	call	0x100c	; 0x100c <UART_Send1ByteData>
		i++;
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	8f 5f       	subi	r24, 0xFF	; 255
    106e:	89 83       	std	Y+1, r24	; 0x01
	
}

void UART_SendString(u8 *Copy_u8SendedString){
	u8 i = 0;
	while(Copy_u8SendedString[i] !=  '\0'){
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	9b 81       	ldd	r25, Y+3	; 0x03
    107a:	fc 01       	movw	r30, r24
    107c:	e2 0f       	add	r30, r18
    107e:	f3 1f       	adc	r31, r19
    1080:	80 81       	ld	r24, Z
    1082:	88 23       	and	r24, r24
    1084:	39 f7       	brne	.-50     	; 0x1054 <UART_SendString+0x14>
		UART_Send1ByteData(Copy_u8SendedString[i]);
		i++;
	}
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <UART_DisplayNumber>:

void UART_DisplayNumber(u32 num){
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	68 97       	sbiw	r28, 0x18	; 24
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	6d 8b       	std	Y+21, r22	; 0x15
    10ac:	7e 8b       	std	Y+22, r23	; 0x16
    10ae:	8f 8b       	std	Y+23, r24	; 0x17
    10b0:	98 8f       	std	Y+24, r25	; 0x18

    // Convert the number to a string
    u8 buffer[16];
    u8 i = 0;
    10b2:	1c 82       	std	Y+4, r1	; 0x04
    u8 isNegative = 0;
    10b4:	1b 82       	std	Y+3, r1	; 0x03
        isNegative = 1;
        num = -num;
    }

    do {
        buffer[i++] = (char)(num % 10) + '0';
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	08 2f       	mov	r16, r24
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	8d 89       	ldd	r24, Y+21	; 0x15
    10be:	9e 89       	ldd	r25, Y+22	; 0x16
    10c0:	af 89       	ldd	r26, Y+23	; 0x17
    10c2:	b8 8d       	ldd	r27, Y+24	; 0x18
    10c4:	2a e0       	ldi	r18, 0x0A	; 10
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e0       	ldi	r20, 0x00	; 0
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <__udivmodsi4>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	28 2f       	mov	r18, r24
    10da:	20 5d       	subi	r18, 0xD0	; 208
    10dc:	ce 01       	movw	r24, r28
    10de:	05 96       	adiw	r24, 0x05	; 5
    10e0:	fc 01       	movw	r30, r24
    10e2:	e0 0f       	add	r30, r16
    10e4:	f1 1f       	adc	r31, r17
    10e6:	20 83       	st	Z, r18
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	8f 5f       	subi	r24, 0xFF	; 255
    10ec:	8c 83       	std	Y+4, r24	; 0x04
        num /= 10;
    10ee:	8d 89       	ldd	r24, Y+21	; 0x15
    10f0:	9e 89       	ldd	r25, Y+22	; 0x16
    10f2:	af 89       	ldd	r26, Y+23	; 0x17
    10f4:	b8 8d       	ldd	r27, Y+24	; 0x18
    10f6:	2a e0       	ldi	r18, 0x0A	; 10
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <__udivmodsi4>
    1106:	da 01       	movw	r26, r20
    1108:	c9 01       	movw	r24, r18
    110a:	8d 8b       	std	Y+21, r24	; 0x15
    110c:	9e 8b       	std	Y+22, r25	; 0x16
    110e:	af 8b       	std	Y+23, r26	; 0x17
    1110:	b8 8f       	std	Y+24, r27	; 0x18
    } while (num > 0);
    1112:	8d 89       	ldd	r24, Y+21	; 0x15
    1114:	9e 89       	ldd	r25, Y+22	; 0x16
    1116:	af 89       	ldd	r26, Y+23	; 0x17
    1118:	b8 8d       	ldd	r27, Y+24	; 0x18
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	a1 05       	cpc	r26, r1
    111e:	b1 05       	cpc	r27, r1
    1120:	51 f6       	brne	.-108    	; 0x10b6 <UART_DisplayNumber+0x24>

    if (isNegative) {
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 23       	and	r24, r24
    1126:	69 f0       	breq	.+26     	; 0x1142 <UART_DisplayNumber+0xb0>
        buffer[i++] = '-';
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	ce 01       	movw	r24, r28
    1130:	05 96       	adiw	r24, 0x05	; 5
    1132:	fc 01       	movw	r30, r24
    1134:	e2 0f       	add	r30, r18
    1136:	f3 1f       	adc	r31, r19
    1138:	8d e2       	ldi	r24, 0x2D	; 45
    113a:	80 83       	st	Z, r24
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	8f 5f       	subi	r24, 0xFF	; 255
    1140:	8c 83       	std	Y+4, r24	; 0x04
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    1142:	1a 82       	std	Y+2, r1	; 0x02
    1144:	3d c0       	rjmp	.+122    	; 0x11c0 <UART_DisplayNumber+0x12e>
        char temp = buffer[j];
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	ce 01       	movw	r24, r28
    114e:	05 96       	adiw	r24, 0x05	; 5
    1150:	fc 01       	movw	r30, r24
    1152:	e2 0f       	add	r30, r18
    1154:	f3 1f       	adc	r31, r19
    1156:	80 81       	ld	r24, Z
    1158:	89 83       	std	Y+1, r24	; 0x01
        buffer[j] = buffer[i - j - 1];
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	48 2f       	mov	r20, r24
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	b9 01       	movw	r22, r18
    116e:	68 1b       	sub	r22, r24
    1170:	79 0b       	sbc	r23, r25
    1172:	cb 01       	movw	r24, r22
    1174:	9c 01       	movw	r18, r24
    1176:	21 50       	subi	r18, 0x01	; 1
    1178:	30 40       	sbci	r19, 0x00	; 0
    117a:	ce 01       	movw	r24, r28
    117c:	05 96       	adiw	r24, 0x05	; 5
    117e:	fc 01       	movw	r30, r24
    1180:	e2 0f       	add	r30, r18
    1182:	f3 1f       	adc	r31, r19
    1184:	20 81       	ld	r18, Z
    1186:	ce 01       	movw	r24, r28
    1188:	05 96       	adiw	r24, 0x05	; 5
    118a:	fc 01       	movw	r30, r24
    118c:	e4 0f       	add	r30, r20
    118e:	f5 1f       	adc	r31, r21
    1190:	20 83       	st	Z, r18
        buffer[i - j - 1] = temp;
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	a9 01       	movw	r20, r18
    11a0:	48 1b       	sub	r20, r24
    11a2:	59 0b       	sbc	r21, r25
    11a4:	ca 01       	movw	r24, r20
    11a6:	9c 01       	movw	r18, r24
    11a8:	21 50       	subi	r18, 0x01	; 1
    11aa:	30 40       	sbci	r19, 0x00	; 0
    11ac:	ce 01       	movw	r24, r28
    11ae:	05 96       	adiw	r24, 0x05	; 5
    11b0:	fc 01       	movw	r30, r24
    11b2:	e2 0f       	add	r30, r18
    11b4:	f3 1f       	adc	r31, r19
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	80 83       	st	Z, r24
        buffer[i++] = '-';
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	8f 5f       	subi	r24, 0xFF	; 255
    11be:	8a 83       	std	Y+2, r24	; 0x02
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	98 2f       	mov	r25, r24
    11c4:	96 95       	lsr	r25
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	89 17       	cp	r24, r25
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <UART_DisplayNumber+0x13c>
    11cc:	bc cf       	rjmp	.-136    	; 0x1146 <UART_DisplayNumber+0xb4>
        buffer[j] = buffer[i - j - 1];
        buffer[i - j - 1] = temp;
    }

    // Null-terminate the string
    buffer[i] = '\0';
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	ce 01       	movw	r24, r28
    11d6:	05 96       	adiw	r24, 0x05	; 5
    11d8:	fc 01       	movw	r30, r24
    11da:	e2 0f       	add	r30, r18
    11dc:	f3 1f       	adc	r31, r19
    11de:	10 82       	st	Z, r1

    // Write the string to LCD
    UART_SendString(buffer);
    11e0:	ce 01       	movw	r24, r28
    11e2:	05 96       	adiw	r24, 0x05	; 5
    11e4:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>
}
    11e8:	68 96       	adiw	r28, 0x18	; 24
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <UART_displayFloat>:

void UART_displayFloat(f32 number) {
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	28 97       	sbiw	r28, 0x08	; 8
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	6d 83       	std	Y+5, r22	; 0x05
    1214:	7e 83       	std	Y+6, r23	; 0x06
    1216:	8f 83       	std	Y+7, r24	; 0x07
    1218:	98 87       	std	Y+8, r25	; 0x08
    int integerPart = (int)number;
    121a:	6d 81       	ldd	r22, Y+5	; 0x05
    121c:	7e 81       	ldd	r23, Y+6	; 0x06
    121e:	8f 81       	ldd	r24, Y+7	; 0x07
    1220:	98 85       	ldd	r25, Y+8	; 0x08
    1222:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	9c 83       	std	Y+4, r25	; 0x04
    122c:	8b 83       	std	Y+3, r24	; 0x03
    int decimalPart = (number - integerPart) * 1000;
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	aa 27       	eor	r26, r26
    1234:	97 fd       	sbrc	r25, 7
    1236:	a0 95       	com	r26
    1238:	ba 2f       	mov	r27, r26
    123a:	bc 01       	movw	r22, r24
    123c:	cd 01       	movw	r24, r26
    123e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1242:	9b 01       	movw	r18, r22
    1244:	ac 01       	movw	r20, r24
    1246:	6d 81       	ldd	r22, Y+5	; 0x05
    1248:	7e 81       	ldd	r23, Y+6	; 0x06
    124a:	8f 81       	ldd	r24, Y+7	; 0x07
    124c:	98 85       	ldd	r25, Y+8	; 0x08
    124e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	bc 01       	movw	r22, r24
    1258:	cd 01       	movw	r24, r26
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	4a e7       	ldi	r20, 0x7A	; 122
    1260:	54 e4       	ldi	r21, 0x44	; 68
    1262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
    if(integerPart >= 100){
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	84 36       	cpi	r24, 0x64	; 100
    1280:	91 05       	cpc	r25, r1
    1282:	54 f0       	brlt	.+20     	; 0x1298 <UART_displayFloat+0x9a>
    	integerPart /= 10;
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	2a e0       	ldi	r18, 0x0A	; 10
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	b9 01       	movw	r22, r18
    128e:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__divmodhi4>
    1292:	cb 01       	movw	r24, r22
    1294:	9c 83       	std	Y+4, r25	; 0x04
    1296:	8b 83       	std	Y+3, r24	; 0x03
    }
    UART_DisplayNumber(integerPart);
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	aa 27       	eor	r26, r26
    129e:	97 fd       	sbrc	r25, 7
    12a0:	a0 95       	com	r26
    12a2:	ba 2f       	mov	r27, r26
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 49 08 	call	0x1092	; 0x1092 <UART_DisplayNumber>
    UART_Send1ByteData('.');
    12ac:	8e e2       	ldi	r24, 0x2E	; 46
    12ae:	0e 94 06 08 	call	0x100c	; 0x100c <UART_Send1ByteData>
    UART_DisplayNumber(decimalPart);
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	aa 27       	eor	r26, r26
    12b8:	97 fd       	sbrc	r25, 7
    12ba:	a0 95       	com	r26
    12bc:	ba 2f       	mov	r27, r26
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 49 08 	call	0x1092	; 0x1092 <UART_DisplayNumber>
}
    12c6:	28 96       	adiw	r28, 0x08	; 8
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <UART_u8Recieve1ByteData>:

u8 UART_u8Recieve1ByteData(u8 *Copy_Pu8RecievedByteData){
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	00 d0       	rcall	.+0      	; 0x12de <UART_u8Recieve1ByteData+0x6>
    12de:	0f 92       	push	r0
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	9b 83       	std	Y+3, r25	; 0x03
    12e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8RecievedByteData != NULL){
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	9b 81       	ldd	r25, Y+3	; 0x03
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	61 f0       	breq	.+24     	; 0x130c <UART_u8Recieve1ByteData+0x34>
		while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
    12f4:	eb e2       	ldi	r30, 0x2B	; 43
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	88 23       	and	r24, r24
    12fc:	dc f7       	brge	.-10     	; 0x12f4 <UART_u8Recieve1ByteData+0x1c>
		*Copy_Pu8RecievedByteData = UART_u8_UDR_REG;
    12fe:	ec e2       	ldi	r30, 0x2C	; 44
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	ea 81       	ldd	r30, Y+2	; 0x02
    1306:	fb 81       	ldd	r31, Y+3	; 0x03
    1308:	80 83       	st	Z, r24
    130a:	01 c0       	rjmp	.+2      	; 0x130e <UART_u8Recieve1ByteData+0x36>
	}
	
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    130c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    130e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <UART_u8RecieveString>:


u8 UART_u8RecieveString(u8 *Copy_Pu8RecievedString, u8 Copy_u8StringSize){
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <UART_u8RecieveString+0x6>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <UART_u8RecieveString+0x8>
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1334:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8RecievedString != NULL){
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	19 f1       	breq	.+70     	; 0x1384 <UART_u8RecieveString+0x68>
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <UART_u8RecieveString+0x4c>
		while(i < Copy_u8StringSize){
			while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
    1340:	eb e2       	ldi	r30, 0x2B	; 43
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	88 23       	and	r24, r24
    1348:	dc f7       	brge	.-10     	; 0x1340 <UART_u8RecieveString+0x24>
			Copy_Pu8RecievedString[i] = UART_u8_UDR_REG;
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	dc 01       	movw	r26, r24
    1356:	a2 0f       	add	r26, r18
    1358:	b3 1f       	adc	r27, r19
    135a:	ec e2       	ldi	r30, 0x2C	; 44
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	8c 93       	st	X, r24
			i++;
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	89 83       	std	Y+1, r24	; 0x01
u8 UART_u8RecieveString(u8 *Copy_Pu8RecievedString, u8 Copy_u8StringSize){
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 i = 0;
	
	if(Copy_Pu8RecievedString != NULL){
		while(i < Copy_u8StringSize){
    1368:	99 81       	ldd	r25, Y+1	; 0x01
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	98 17       	cp	r25, r24
    136e:	40 f3       	brcs	.-48     	; 0x1340 <UART_u8RecieveString+0x24>
			while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
			Copy_Pu8RecievedString[i] = UART_u8_UDR_REG;
			i++;
		}
		Copy_Pu8RecievedString[i] = '\0';
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	fc 01       	movw	r30, r24
    137c:	e2 0f       	add	r30, r18
    137e:	f3 1f       	adc	r31, r19
    1380:	10 82       	st	Z, r1
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <UART_u8RecieveString+0x6a>
	}
	
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    1384:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	return Local_u8ErrorState;
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <TIMER0_Init>:




u8 TIMER0_Init(TIMER0_Config_t *TIME0_Cfg)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	2a 97       	sbiw	r28, 0x0a	; 10
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	9b 83       	std	Y+3, r25	; 0x03
    13ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 RetValue = STD_TYPES_NOK;
    13b0:	19 82       	std	Y+1, r1	; 0x01
	if(TIME0_Cfg == NULLPTR){
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	9b 81       	ldd	r25, Y+3	; 0x03
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	11 f4       	brne	.+4      	; 0x13be <TIMER0_Init+0x26>
		RetValue = STD_TYPES_NOK;
    13ba:	19 82       	std	Y+1, r1	; 0x01
    13bc:	bc c0       	rjmp	.+376    	; 0x1536 <TIMER0_Init+0x19e>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer0_Cfg = *TIME0_Cfg;
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	9b 81       	ldd	r25, Y+3	; 0x03
    13c2:	23 e5       	ldi	r18, 0x53	; 83
    13c4:	32 e0       	ldi	r19, 0x02	; 2
    13c6:	3f 83       	std	Y+7, r19	; 0x07
    13c8:	2e 83       	std	Y+6, r18	; 0x06
    13ca:	99 87       	std	Y+9, r25	; 0x09
    13cc:	88 87       	std	Y+8, r24	; 0x08
    13ce:	35 e0       	ldi	r19, 0x05	; 5
    13d0:	3a 87       	std	Y+10, r19	; 0x0a
    13d2:	e8 85       	ldd	r30, Y+8	; 0x08
    13d4:	f9 85       	ldd	r31, Y+9	; 0x09
    13d6:	00 80       	ld	r0, Z
    13d8:	28 85       	ldd	r18, Y+8	; 0x08
    13da:	39 85       	ldd	r19, Y+9	; 0x09
    13dc:	2f 5f       	subi	r18, 0xFF	; 255
    13de:	3f 4f       	sbci	r19, 0xFF	; 255
    13e0:	39 87       	std	Y+9, r19	; 0x09
    13e2:	28 87       	std	Y+8, r18	; 0x08
    13e4:	ee 81       	ldd	r30, Y+6	; 0x06
    13e6:	ff 81       	ldd	r31, Y+7	; 0x07
    13e8:	00 82       	st	Z, r0
    13ea:	2e 81       	ldd	r18, Y+6	; 0x06
    13ec:	3f 81       	ldd	r19, Y+7	; 0x07
    13ee:	2f 5f       	subi	r18, 0xFF	; 255
    13f0:	3f 4f       	sbci	r19, 0xFF	; 255
    13f2:	3f 83       	std	Y+7, r19	; 0x07
    13f4:	2e 83       	std	Y+6, r18	; 0x06
    13f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13f8:	31 50       	subi	r19, 0x01	; 1
    13fa:	3a 87       	std	Y+10, r19	; 0x0a
    13fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13fe:	88 23       	and	r24, r24
    1400:	41 f7       	brne	.-48     	; 0x13d2 <TIMER0_Init+0x3a>


		// Timer0 mode Configurations
		if((TIME0_Cfg->mode >= TIMER0_NORMAL_MODE) && (TIME0_Cfg->mode <= TIMER0_FAST_PWM_MODE))
    1402:	ea 81       	ldd	r30, Y+2	; 0x02
    1404:	fb 81       	ldd	r31, Y+3	; 0x03
    1406:	80 81       	ld	r24, Z
    1408:	84 30       	cpi	r24, 0x04	; 4
    140a:	08 f0       	brcs	.+2      	; 0x140e <TIMER0_Init+0x76>
    140c:	5f c0       	rjmp	.+190    	; 0x14cc <TIMER0_Init+0x134>
		{
			RetValue = STD_TYPES_OK;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	89 83       	std	Y+1, r24	; 0x01
			switch(TIME0_Cfg->mode)
    1412:	ea 81       	ldd	r30, Y+2	; 0x02
    1414:	fb 81       	ldd	r31, Y+3	; 0x03
    1416:	80 81       	ld	r24, Z
    1418:	e8 2f       	mov	r30, r24
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	fd 83       	std	Y+5, r31	; 0x05
    141e:	ec 83       	std	Y+4, r30	; 0x04
    1420:	2c 81       	ldd	r18, Y+4	; 0x04
    1422:	3d 81       	ldd	r19, Y+5	; 0x05
    1424:	21 30       	cpi	r18, 0x01	; 1
    1426:	31 05       	cpc	r19, r1
    1428:	21 f1       	breq	.+72     	; 0x1472 <TIMER0_Init+0xda>
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	9d 81       	ldd	r25, Y+5	; 0x05
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	2c f4       	brge	.+10     	; 0x143e <TIMER0_Init+0xa6>
    1434:	ec 81       	ldd	r30, Y+4	; 0x04
    1436:	fd 81       	ldd	r31, Y+5	; 0x05
    1438:	30 97       	sbiw	r30, 0x00	; 0
    143a:	61 f0       	breq	.+24     	; 0x1454 <TIMER0_Init+0xbc>
    143c:	49 c0       	rjmp	.+146    	; 0x14d0 <TIMER0_Init+0x138>
    143e:	2c 81       	ldd	r18, Y+4	; 0x04
    1440:	3d 81       	ldd	r19, Y+5	; 0x05
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	21 f1       	breq	.+72     	; 0x1490 <TIMER0_Init+0xf8>
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	91 05       	cpc	r25, r1
    1450:	71 f1       	breq	.+92     	; 0x14ae <TIMER0_Init+0x116>
    1452:	3e c0       	rjmp	.+124    	; 0x14d0 <TIMER0_Init+0x138>
			{
			case TIMER0_NORMAL_MODE:
				CLR_BIT(TCCR0,WGM00);
    1454:	a3 e5       	ldi	r26, 0x53	; 83
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e3 e5       	ldi	r30, 0x53	; 83
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8f 7b       	andi	r24, 0xBF	; 191
    1460:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
    1462:	a3 e5       	ldi	r26, 0x53	; 83
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e3 e5       	ldi	r30, 0x53	; 83
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	87 7f       	andi	r24, 0xF7	; 247
    146e:	8c 93       	st	X, r24
    1470:	2f c0       	rjmp	.+94     	; 0x14d0 <TIMER0_Init+0x138>
				break;
			case TIMER0_PHASE_CORRECT_MODE:
				SET_BIT(TCCR0,WGM00);
    1472:	a3 e5       	ldi	r26, 0x53	; 83
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e3 e5       	ldi	r30, 0x53	; 83
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	80 64       	ori	r24, 0x40	; 64
    147e:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
    1480:	a3 e5       	ldi	r26, 0x53	; 83
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e3 e5       	ldi	r30, 0x53	; 83
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	87 7f       	andi	r24, 0xF7	; 247
    148c:	8c 93       	st	X, r24
    148e:	20 c0       	rjmp	.+64     	; 0x14d0 <TIMER0_Init+0x138>
				break;
			case TIMER0_CTC_MODE:
				CLR_BIT(TCCR0,WGM00);
    1490:	a3 e5       	ldi	r26, 0x53	; 83
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e3 e5       	ldi	r30, 0x53	; 83
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8f 7b       	andi	r24, 0xBF	; 191
    149c:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    149e:	a3 e5       	ldi	r26, 0x53	; 83
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e3 e5       	ldi	r30, 0x53	; 83
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	88 60       	ori	r24, 0x08	; 8
    14aa:	8c 93       	st	X, r24
    14ac:	11 c0       	rjmp	.+34     	; 0x14d0 <TIMER0_Init+0x138>
				break;
			case TIMER0_FAST_PWM_MODE:
				SET_BIT(TCCR0,WGM00);
    14ae:	a3 e5       	ldi	r26, 0x53	; 83
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e3 e5       	ldi	r30, 0x53	; 83
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	80 64       	ori	r24, 0x40	; 64
    14ba:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    14bc:	a3 e5       	ldi	r26, 0x53	; 83
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e3 e5       	ldi	r30, 0x53	; 83
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	88 60       	ori	r24, 0x08	; 8
    14c8:	8c 93       	st	X, r24
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <TIMER0_Init+0x138>
				break;
			}
		}else{
			RetValue = STD_TYPES_OK;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	89 83       	std	Y+1, r24	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME0_Cfg->prescalar >= TIMER0_STOP) && (TIME0_Cfg->prescalar <= EXTERNAL_RISING))
    14d0:	ea 81       	ldd	r30, Y+2	; 0x02
    14d2:	fb 81       	ldd	r31, Y+3	; 0x03
    14d4:	81 81       	ldd	r24, Z+1	; 0x01
    14d6:	88 30       	cpi	r24, 0x08	; 8
    14d8:	58 f4       	brcc	.+22     	; 0x14f0 <TIMER0_Init+0x158>
		{
			TCCR0 |= TIME0_Cfg->prescalar;
    14da:	a3 e5       	ldi	r26, 0x53	; 83
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e3 e5       	ldi	r30, 0x53	; 83
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	90 81       	ld	r25, Z
    14e4:	ea 81       	ldd	r30, Y+2	; 0x02
    14e6:	fb 81       	ldd	r31, Y+3	; 0x03
    14e8:	81 81       	ldd	r24, Z+1	; 0x01
    14ea:	89 2b       	or	r24, r25
    14ec:	8c 93       	st	X, r24
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <TIMER0_Init+0x15c>
		}else{
			RetValue = STD_TYPES_OK;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	89 83       	std	Y+1, r24	; 0x01
		}


		// Timer_0 OC0 Pin
		TCCR0 |= (TIME0_Cfg->oc0_mode << COM00);
    14f4:	a3 e5       	ldi	r26, 0x53	; 83
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e3 e5       	ldi	r30, 0x53	; 83
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	28 2f       	mov	r18, r24
    1500:	ea 81       	ldd	r30, Y+2	; 0x02
    1502:	fb 81       	ldd	r31, Y+3	; 0x03
    1504:	82 81       	ldd	r24, Z+2	; 0x02
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	82 95       	swap	r24
    150c:	92 95       	swap	r25
    150e:	90 7f       	andi	r25, 0xF0	; 240
    1510:	98 27       	eor	r25, r24
    1512:	80 7f       	andi	r24, 0xF0	; 240
    1514:	98 27       	eor	r25, r24
    1516:	82 2b       	or	r24, r18
    1518:	8c 93       	st	X, r24


		// Timer_0 Interrupts
		TIMSK |= (TIME0_Cfg->OVF_Interrupt) | (TIME0_Cfg->OCM_Interrupt);
    151a:	a9 e5       	ldi	r26, 0x59	; 89
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e9 e5       	ldi	r30, 0x59	; 89
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	20 81       	ld	r18, Z
    1524:	ea 81       	ldd	r30, Y+2	; 0x02
    1526:	fb 81       	ldd	r31, Y+3	; 0x03
    1528:	93 81       	ldd	r25, Z+3	; 0x03
    152a:	ea 81       	ldd	r30, Y+2	; 0x02
    152c:	fb 81       	ldd	r31, Y+3	; 0x03
    152e:	84 81       	ldd	r24, Z+4	; 0x04
    1530:	89 2b       	or	r24, r25
    1532:	82 2b       	or	r24, r18
    1534:	8c 93       	st	X, r24



	}

	return RetValue;
    1536:	89 81       	ldd	r24, Y+1	; 0x01

}
    1538:	2a 96       	adiw	r28, 0x0a	; 10
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <TIMER0_Stop>:
u8 TIMER0_Stop(void)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR0,CS00);
    1552:	a3 e5       	ldi	r26, 0x53	; 83
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e3 e5       	ldi	r30, 0x53	; 83
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8e 7f       	andi	r24, 0xFE	; 254
    155e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
    1560:	a3 e5       	ldi	r26, 0x53	; 83
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e3 e5       	ldi	r30, 0x53	; 83
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8d 7f       	andi	r24, 0xFD	; 253
    156c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
    156e:	a3 e5       	ldi	r26, 0x53	; 83
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e3 e5       	ldi	r30, 0x53	; 83
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	8b 7f       	andi	r24, 0xFB	; 251
    157a:	8c 93       	st	X, r24
	return STD_TYPES_OK;
    157c:	81 e0       	ldi	r24, 0x01	; 1
}
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <TIMER0_GetCompareValue>:

u8 TIMER0_GetCompareValue(u8 *CM_Value)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	00 d0       	rcall	.+0      	; 0x158a <TIMER0_GetCompareValue+0x6>
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	89 83       	std	Y+1, r24	; 0x01
	*CM_Value = OCR0;
    1592:	ec e5       	ldi	r30, 0x5C	; 92
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	e9 81       	ldd	r30, Y+1	; 0x01
    159a:	fa 81       	ldd	r31, Y+2	; 0x02
    159c:	80 83       	st	Z, r24

	return STD_TYPES_OK;
    159e:	81 e0       	ldi	r24, 0x01	; 1

}
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <TIMER0_SetCompareValue>:
u8 TIMER0_SetCompareValue(u8 CM_Value)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	0f 92       	push	r0
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = CM_Value;
    15b6:	ec e5       	ldi	r30, 0x5C	; 92
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	80 83       	st	Z, r24

	return STD_TYPES_OK;
    15be:	81 e0       	ldi	r24, 0x01	; 1

}
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <TIMER0_GetCounterValue>:

u8 TIMER0_GetCounterValue(u8 *TCNT_Value)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <TIMER0_GetCounterValue+0x6>
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	9a 83       	std	Y+2, r25	; 0x02
    15d4:	89 83       	std	Y+1, r24	; 0x01

	*TCNT_Value = TCNT0;
    15d6:	e2 e5       	ldi	r30, 0x52	; 82
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	e9 81       	ldd	r30, Y+1	; 0x01
    15de:	fa 81       	ldd	r31, Y+2	; 0x02
    15e0:	80 83       	st	Z, r24


	return STD_TYPES_OK;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <TIMER0_SetCounterValue>:


u8 TIMER0_SetCounterValue(u8 TCNT_Value)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	0f 92       	push	r0
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = TCNT_Value;
    15fa:	e2 e5       	ldi	r30, 0x52	; 82
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	80 83       	st	Z, r24

	return STD_TYPES_OK;
    1602:	81 e0       	ldi	r24, 0x01	; 1

}
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <TIMER0_GetOVF_Flag>:

// In case of larger than 255
u8 TIMER0_GetOVF_Flag(u8 *OVF_Value)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <TIMER0_GetOVF_Flag+0x6>
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	9a 83       	std	Y+2, r25	; 0x02
    1618:	89 83       	std	Y+1, r24	; 0x01

	*OVF_Value = OVF_Number;
    161a:	80 91 43 02 	lds	r24, 0x0243
    161e:	90 91 44 02 	lds	r25, 0x0244
    1622:	a0 91 45 02 	lds	r26, 0x0245
    1626:	b0 91 46 02 	lds	r27, 0x0246
    162a:	e9 81       	ldd	r30, Y+1	; 0x01
    162c:	fa 81       	ldd	r31, Y+2	; 0x02
    162e:	80 83       	st	Z, r24
	return STD_TYPES_OK;
    1630:	81 e0       	ldi	r24, 0x01	; 1

}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <PWM_Set_DutyCycle>:



u8 PWM_Set_DutyCycle(float dutyCycle)
{
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	00 d0       	rcall	.+0      	; 0x1646 <PWM_Set_DutyCycle+0xa>
    1646:	00 d0       	rcall	.+0      	; 0x1648 <PWM_Set_DutyCycle+0xc>
    1648:	0f 92       	push	r0
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	6a 83       	std	Y+2, r22	; 0x02
    1650:	7b 83       	std	Y+3, r23	; 0x03
    1652:	8c 83       	std	Y+4, r24	; 0x04
    1654:	9d 83       	std	Y+5, r25	; 0x05
	u8 RetValue;

	if((Global_Timer0_Cfg.mode == TIMER0_FAST_PWM_MODE) || (Global_Timer0_Cfg.mode == TIMER0_PHASE_CORRECT_MODE))
    1656:	80 91 53 02 	lds	r24, 0x0253
    165a:	83 30       	cpi	r24, 0x03	; 3
    165c:	29 f0       	breq	.+10     	; 0x1668 <PWM_Set_DutyCycle+0x2c>
    165e:	80 91 53 02 	lds	r24, 0x0253
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	09 f0       	breq	.+2      	; 0x1668 <PWM_Set_DutyCycle+0x2c>
    1666:	58 c0       	rjmp	.+176    	; 0x1718 <PWM_Set_DutyCycle+0xdc>
	{
		if(Global_Timer0_Cfg.oc0_mode == OC0_NON_INVERTING)
    1668:	80 91 55 02 	lds	r24, 0x0255
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	11 f5       	brne	.+68     	; 0x16b4 <PWM_Set_DutyCycle+0x78>
		{
			OCR0 = (u8)((dutyCycle/100.0)*256) - 1;
    1670:	0c e5       	ldi	r16, 0x5C	; 92
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	6a 81       	ldd	r22, Y+2	; 0x02
    1676:	7b 81       	ldd	r23, Y+3	; 0x03
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	48 ec       	ldi	r20, 0xC8	; 200
    1682:	52 e4       	ldi	r21, 0x42	; 66
    1684:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	bc 01       	movw	r22, r24
    168e:	cd 01       	movw	r24, r26
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e8       	ldi	r20, 0x80	; 128
    1696:	53 e4       	ldi	r21, 0x43	; 67
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	81 50       	subi	r24, 0x01	; 1
    16ae:	f8 01       	movw	r30, r16
    16b0:	80 83       	st	Z, r24
    16b2:	2f c0       	rjmp	.+94     	; 0x1712 <PWM_Set_DutyCycle+0xd6>

		}else if(Global_Timer0_Cfg.oc0_mode == OC0_INVERTING)
    16b4:	80 91 55 02 	lds	r24, 0x0255
    16b8:	83 30       	cpi	r24, 0x03	; 3
    16ba:	59 f5       	brne	.+86     	; 0x1712 <PWM_Set_DutyCycle+0xd6>
		{
			OCR0 = (u8)(256-((256*dutyCycle)/100.0)) - 1;
    16bc:	0c e5       	ldi	r16, 0x5C	; 92
    16be:	10 e0       	ldi	r17, 0x00	; 0
    16c0:	6a 81       	ldd	r22, Y+2	; 0x02
    16c2:	7b 81       	ldd	r23, Y+3	; 0x03
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	9d 81       	ldd	r25, Y+5	; 0x05
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e8       	ldi	r20, 0x80	; 128
    16ce:	53 e4       	ldi	r21, 0x43	; 67
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	48 ec       	ldi	r20, 0xC8	; 200
    16e2:	52 ec       	ldi	r21, 0xC2	; 194
    16e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e8       	ldi	r20, 0x80	; 128
    16f6:	53 e4       	ldi	r21, 0x43	; 67
    16f8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	bc 01       	movw	r22, r24
    1702:	cd 01       	movw	r24, r26
    1704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	81 50       	subi	r24, 0x01	; 1
    170e:	f8 01       	movw	r30, r16
    1710:	80 83       	st	Z, r24
		}
		RetValue = STD_TYPES_OK;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	01 c0       	rjmp	.+2      	; 0x171a <PWM_Set_DutyCycle+0xde>
	}else{
		RetValue = STD_TYPES_NOK;
    1718:	19 82       	std	Y+1, r1	; 0x01
	}
	return RetValue;
    171a:	89 81       	ldd	r24, Y+1	; 0x01
}
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	08 95       	ret

00001730 <Timer0_Set_Delay_ms>:



void Timer0_Set_Delay_ms(u32 delay_ms)
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	67 97       	sbiw	r28, 0x17	; 23
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	6d 87       	std	Y+13, r22	; 0x0d
    1746:	7e 87       	std	Y+14, r23	; 0x0e
    1748:	8f 87       	std	Y+15, r24	; 0x0f
    174a:	98 8b       	std	Y+16, r25	; 0x10
	TIMER0_Config_t Timer0Cfg = {TIMER0_NORMAL_MODE, TIMER0_PRESCALAR_1024, OC0_DISCONNECTED, TOIE0_ENABLE, OCIE0_DISABLE};
    174c:	9e 01       	movw	r18, r28
    174e:	28 5f       	subi	r18, 0xF8	; 248
    1750:	3f 4f       	sbci	r19, 0xFF	; 255
    1752:	3c 8b       	std	Y+20, r19	; 0x14
    1754:	2b 8b       	std	Y+19, r18	; 0x13
    1756:	87 e3       	ldi	r24, 0x37	; 55
    1758:	92 e0       	ldi	r25, 0x02	; 2
    175a:	9e 8b       	std	Y+22, r25	; 0x16
    175c:	8d 8b       	std	Y+21, r24	; 0x15
    175e:	95 e0       	ldi	r25, 0x05	; 5
    1760:	9f 8b       	std	Y+23, r25	; 0x17
    1762:	ed 89       	ldd	r30, Y+21	; 0x15
    1764:	fe 89       	ldd	r31, Y+22	; 0x16
    1766:	00 80       	ld	r0, Z
    1768:	2d 89       	ldd	r18, Y+21	; 0x15
    176a:	3e 89       	ldd	r19, Y+22	; 0x16
    176c:	2f 5f       	subi	r18, 0xFF	; 255
    176e:	3f 4f       	sbci	r19, 0xFF	; 255
    1770:	3e 8b       	std	Y+22, r19	; 0x16
    1772:	2d 8b       	std	Y+21, r18	; 0x15
    1774:	eb 89       	ldd	r30, Y+19	; 0x13
    1776:	fc 89       	ldd	r31, Y+20	; 0x14
    1778:	00 82       	st	Z, r0
    177a:	2b 89       	ldd	r18, Y+19	; 0x13
    177c:	3c 89       	ldd	r19, Y+20	; 0x14
    177e:	2f 5f       	subi	r18, 0xFF	; 255
    1780:	3f 4f       	sbci	r19, 0xFF	; 255
    1782:	3c 8b       	std	Y+20, r19	; 0x14
    1784:	2b 8b       	std	Y+19, r18	; 0x13
    1786:	3f 89       	ldd	r19, Y+23	; 0x17
    1788:	31 50       	subi	r19, 0x01	; 1
    178a:	3f 8b       	std	Y+23, r19	; 0x17
    178c:	8f 89       	ldd	r24, Y+23	; 0x17
    178e:	88 23       	and	r24, r24
    1790:	41 f7       	brne	.-48     	; 0x1762 <Timer0_Set_Delay_ms+0x32>
	TIMER0_Init(&Timer0Cfg);
    1792:	ce 01       	movw	r24, r28
    1794:	08 96       	adiw	r24, 0x08	; 8
    1796:	0e 94 cc 09 	call	0x1398	; 0x1398 <TIMER0_Init>

	u16 prescalar = 0;
    179a:	1f 82       	std	Y+7, r1	; 0x07
    179c:	1e 82       	std	Y+6, r1	; 0x06
	switch(Timer0Cfg.prescalar){
    179e:	89 85       	ldd	r24, Y+9	; 0x09
    17a0:	e8 2f       	mov	r30, r24
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	fa 8b       	std	Y+18, r31	; 0x12
    17a6:	e9 8b       	std	Y+17, r30	; 0x11
    17a8:	29 89       	ldd	r18, Y+17	; 0x11
    17aa:	3a 89       	ldd	r19, Y+18	; 0x12
    17ac:	23 30       	cpi	r18, 0x03	; 3
    17ae:	31 05       	cpc	r19, r1
    17b0:	49 f1       	breq	.+82     	; 0x1804 <Timer0_Set_Delay_ms+0xd4>
    17b2:	89 89       	ldd	r24, Y+17	; 0x11
    17b4:	9a 89       	ldd	r25, Y+18	; 0x12
    17b6:	84 30       	cpi	r24, 0x04	; 4
    17b8:	91 05       	cpc	r25, r1
    17ba:	7c f4       	brge	.+30     	; 0x17da <Timer0_Set_Delay_ms+0xaa>
    17bc:	e9 89       	ldd	r30, Y+17	; 0x11
    17be:	fa 89       	ldd	r31, Y+18	; 0x12
    17c0:	e1 30       	cpi	r30, 0x01	; 1
    17c2:	f1 05       	cpc	r31, r1
    17c4:	49 f1       	breq	.+82     	; 0x1818 <Timer0_Set_Delay_ms+0xe8>
    17c6:	29 89       	ldd	r18, Y+17	; 0x11
    17c8:	3a 89       	ldd	r19, Y+18	; 0x12
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	fc f4       	brge	.+62     	; 0x180e <Timer0_Set_Delay_ms+0xde>
    17d0:	89 89       	ldd	r24, Y+17	; 0x11
    17d2:	9a 89       	ldd	r25, Y+18	; 0x12
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	29 f1       	breq	.+74     	; 0x1822 <Timer0_Set_Delay_ms+0xf2>
    17d8:	26 c0       	rjmp	.+76     	; 0x1826 <Timer0_Set_Delay_ms+0xf6>
    17da:	e9 89       	ldd	r30, Y+17	; 0x11
    17dc:	fa 89       	ldd	r31, Y+18	; 0x12
    17de:	e5 30       	cpi	r30, 0x05	; 5
    17e0:	f1 05       	cpc	r31, r1
    17e2:	31 f0       	breq	.+12     	; 0x17f0 <Timer0_Set_Delay_ms+0xc0>
    17e4:	29 89       	ldd	r18, Y+17	; 0x11
    17e6:	3a 89       	ldd	r19, Y+18	; 0x12
    17e8:	25 30       	cpi	r18, 0x05	; 5
    17ea:	31 05       	cpc	r19, r1
    17ec:	34 f0       	brlt	.+12     	; 0x17fa <Timer0_Set_Delay_ms+0xca>
    17ee:	1b c0       	rjmp	.+54     	; 0x1826 <Timer0_Set_Delay_ms+0xf6>
	case TIMER0_PRESCALAR_1024:
		prescalar = 1024;
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	94 e0       	ldi	r25, 0x04	; 4
    17f4:	9f 83       	std	Y+7, r25	; 0x07
    17f6:	8e 83       	std	Y+6, r24	; 0x06
    17f8:	16 c0       	rjmp	.+44     	; 0x1826 <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_256:
		prescalar = 256;
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	9f 83       	std	Y+7, r25	; 0x07
    1800:	8e 83       	std	Y+6, r24	; 0x06
    1802:	11 c0       	rjmp	.+34     	; 0x1826 <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_64:
		prescalar = 64;
    1804:	80 e4       	ldi	r24, 0x40	; 64
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	9f 83       	std	Y+7, r25	; 0x07
    180a:	8e 83       	std	Y+6, r24	; 0x06
    180c:	0c c0       	rjmp	.+24     	; 0x1826 <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_8:
		prescalar = 8;
    180e:	88 e0       	ldi	r24, 0x08	; 8
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	9f 83       	std	Y+7, r25	; 0x07
    1814:	8e 83       	std	Y+6, r24	; 0x06
    1816:	07 c0       	rjmp	.+14     	; 0x1826 <Timer0_Set_Delay_ms+0xf6>
		break;
	case TIMER0_PRESCALAR_1:
		prescalar = 1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9f 83       	std	Y+7, r25	; 0x07
    181e:	8e 83       	std	Y+6, r24	; 0x06
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <Timer0_Set_Delay_ms+0xf6>
		break;
	case EXTERNAL_FALLING:
	case EXTERNAL_RISING:
		break;
	case TIMER0_STOP:
		prescalar = 0;
    1822:	1f 82       	std	Y+7, r1	; 0x07
    1824:	1e 82       	std	Y+6, r1	; 0x06
		break;
	}

	u32 CountsNum = (u32)((F_CPU / (prescalar * 1000UL)) * (delay_ms));
    1826:	8e 81       	ldd	r24, Y+6	; 0x06
    1828:	9f 81       	ldd	r25, Y+7	; 0x07
    182a:	cc 01       	movw	r24, r24
    182c:	a0 e0       	ldi	r26, 0x00	; 0
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	28 ee       	ldi	r18, 0xE8	; 232
    1832:	33 e0       	ldi	r19, 0x03	; 3
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__mulsi3>
    1840:	9b 01       	movw	r18, r22
    1842:	ac 01       	movw	r20, r24
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	94 e2       	ldi	r25, 0x24	; 36
    1848:	a4 ef       	ldi	r26, 0xF4	; 244
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <__udivmodsi4>
    1854:	da 01       	movw	r26, r20
    1856:	c9 01       	movw	r24, r18
    1858:	2d 85       	ldd	r18, Y+13	; 0x0d
    185a:	3e 85       	ldd	r19, Y+14	; 0x0e
    185c:	4f 85       	ldd	r20, Y+15	; 0x0f
    185e:	58 89       	ldd	r21, Y+16	; 0x10
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <__mulsi3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	8a 83       	std	Y+2, r24	; 0x02
    186e:	9b 83       	std	Y+3, r25	; 0x03
    1870:	ac 83       	std	Y+4, r26	; 0x04
    1872:	bd 83       	std	Y+5, r27	; 0x05
	OVF_Number = (u32)(CountsNum / 256);
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	9b 81       	ldd	r25, Y+3	; 0x03
    1878:	ac 81       	ldd	r26, Y+4	; 0x04
    187a:	bd 81       	ldd	r27, Y+5	; 0x05
    187c:	89 2f       	mov	r24, r25
    187e:	9a 2f       	mov	r25, r26
    1880:	ab 2f       	mov	r26, r27
    1882:	bb 27       	eor	r27, r27
    1884:	80 93 43 02 	sts	0x0243, r24
    1888:	90 93 44 02 	sts	0x0244, r25
    188c:	a0 93 45 02 	sts	0x0245, r26
    1890:	b0 93 46 02 	sts	0x0246, r27
	u8 RestCounts = CountsNum % 256;
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01



	TIMER0_SetCounterValue(0);
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <TIMER0_SetCounterValue>

	while(OVF_Number > 0);
    189e:	80 91 43 02 	lds	r24, 0x0243
    18a2:	90 91 44 02 	lds	r25, 0x0244
    18a6:	a0 91 45 02 	lds	r26, 0x0245
    18aa:	b0 91 46 02 	lds	r27, 0x0246
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	a1 05       	cpc	r26, r1
    18b2:	b1 05       	cpc	r27, r1
    18b4:	a1 f7       	brne	.-24     	; 0x189e <Timer0_Set_Delay_ms+0x16e>

	while(TCNT0 < RestCounts);
    18b6:	e2 e5       	ldi	r30, 0x52	; 82
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	90 81       	ld	r25, Z
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	98 17       	cp	r25, r24
    18c0:	d0 f3       	brcs	.-12     	; 0x18b6 <Timer0_Set_Delay_ms+0x186>

	TIMER0_Stop();
    18c2:	0e 94 a5 0a 	call	0x154a	; 0x154a <TIMER0_Stop>

	// Disable Timer0 overflow interrupt
	TIMSK &= ~(1 << TOIE0);
    18c6:	a9 e5       	ldi	r26, 0x59	; 89
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e9 e5       	ldi	r30, 0x59	; 89
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	8e 7f       	andi	r24, 0xFE	; 254
    18d2:	8c 93       	st	X, r24
}
    18d4:	67 96       	adiw	r28, 0x17	; 23
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <Timer0_OVF_SetCallBack>:


void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <Timer0_OVF_SetCallBack+0x6>
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	9a 83       	std	Y+2, r25	; 0x02
    18f2:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr = Local_ptr_toFunc;
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	9a 81       	ldd	r25, Y+2	; 0x02
    18f8:	90 93 3d 02 	sts	0x023D, r25
    18fc:	80 93 3c 02 	sts	0x023C, r24


}
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <Timer0_OCM_SetCallBack>:
void Timer0_OCM_SetCallBack(void (*Local_ptr_toFunc))
{
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	00 d0       	rcall	.+0      	; 0x1910 <Timer0_OCM_SetCallBack+0x6>
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OCM_Fptr = Local_ptr_toFunc;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	90 93 3f 02 	sts	0x023F, r25
    1920:	80 93 3e 02 	sts	0x023E, r24
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <Timer1_ICU_SetCallBack>:


void Timer1_ICU_SetCallBack(void (*Local_ptr_toFunc))
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <Timer1_ICU_SetCallBack+0x6>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_Fptr = Local_ptr_toFunc;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	90 93 41 02 	sts	0x0241, r25
    1944:	80 93 40 02 	sts	0x0240, r24
}
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <Timer1_ICU_InterruptEnable>:


void Timer1_ICU_InterruptEnable(void)
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
	// Enable ICU interrupt
	SET_BIT(TIMSK,TICIE1);
    195a:	a9 e5       	ldi	r26, 0x59	; 89
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e9 e5       	ldi	r30, 0x59	; 89
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	80 62       	ori	r24, 0x20	; 32
    1966:	8c 93       	st	X, r24
}
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <Timer1_ICU_InterruptDisable>:

void Timer1_ICU_InterruptDisable(void)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
	// Enable ICU interrupt
	CLR_BIT(TIMSK,TICIE1);
    1976:	a9 e5       	ldi	r26, 0x59	; 89
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e9 e5       	ldi	r30, 0x59	; 89
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8f 7d       	andi	r24, 0xDF	; 223
    1982:	8c 93       	st	X, r24
}
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <TIMER1_Init>:

// ===========================================================


u8 TIMER1_Init(TIMER1_Config_t *TIME1_Cfg)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	2a 97       	sbiw	r28, 0x0a	; 10
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	9b 83       	std	Y+3, r25	; 0x03
    19a0:	8a 83       	std	Y+2, r24	; 0x02
	u8 RetValue = STD_TYPES_NOK;
    19a2:	19 82       	std	Y+1, r1	; 0x01
	if(TIME1_Cfg == NULLPTR){
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	11 f4       	brne	.+4      	; 0x19b0 <TIMER1_Init+0x26>
		RetValue = STD_TYPES_NOK;
    19ac:	19 82       	std	Y+1, r1	; 0x01
    19ae:	e9 c0       	rjmp	.+466    	; 0x1b82 <TIMER1_Init+0x1f8>
	}else
	{
		// Copy the configuration in a global structure in case of
		// usage inside othe functions
		Global_Timer1_Cfg = *TIME1_Cfg;
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	9b 81       	ldd	r25, Y+3	; 0x03
    19b4:	28 e5       	ldi	r18, 0x58	; 88
    19b6:	32 e0       	ldi	r19, 0x02	; 2
    19b8:	3f 83       	std	Y+7, r19	; 0x07
    19ba:	2e 83       	std	Y+6, r18	; 0x06
    19bc:	99 87       	std	Y+9, r25	; 0x09
    19be:	88 87       	std	Y+8, r24	; 0x08
    19c0:	38 e0       	ldi	r19, 0x08	; 8
    19c2:	3a 87       	std	Y+10, r19	; 0x0a
    19c4:	e8 85       	ldd	r30, Y+8	; 0x08
    19c6:	f9 85       	ldd	r31, Y+9	; 0x09
    19c8:	00 80       	ld	r0, Z
    19ca:	28 85       	ldd	r18, Y+8	; 0x08
    19cc:	39 85       	ldd	r19, Y+9	; 0x09
    19ce:	2f 5f       	subi	r18, 0xFF	; 255
    19d0:	3f 4f       	sbci	r19, 0xFF	; 255
    19d2:	39 87       	std	Y+9, r19	; 0x09
    19d4:	28 87       	std	Y+8, r18	; 0x08
    19d6:	ee 81       	ldd	r30, Y+6	; 0x06
    19d8:	ff 81       	ldd	r31, Y+7	; 0x07
    19da:	00 82       	st	Z, r0
    19dc:	2e 81       	ldd	r18, Y+6	; 0x06
    19de:	3f 81       	ldd	r19, Y+7	; 0x07
    19e0:	2f 5f       	subi	r18, 0xFF	; 255
    19e2:	3f 4f       	sbci	r19, 0xFF	; 255
    19e4:	3f 83       	std	Y+7, r19	; 0x07
    19e6:	2e 83       	std	Y+6, r18	; 0x06
    19e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    19ea:	31 50       	subi	r19, 0x01	; 1
    19ec:	3a 87       	std	Y+10, r19	; 0x0a
    19ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    19f0:	88 23       	and	r24, r24
    19f2:	41 f7       	brne	.-48     	; 0x19c4 <TIMER1_Init+0x3a>


		// Timer0 mode Configurations
		if((TIME1_Cfg->mode >= TIMER1_NORMAL_MODE) && (TIME1_Cfg->mode <= TIMER1_FAST_PWM_OCR1A_TOP))
    19f4:	ea 81       	ldd	r30, Y+2	; 0x02
    19f6:	fb 81       	ldd	r31, Y+3	; 0x03
    19f8:	80 81       	ld	r24, Z
    19fa:	83 30       	cpi	r24, 0x03	; 3
    19fc:	08 f0       	brcs	.+2      	; 0x1a00 <TIMER1_Init+0x76>
    19fe:	70 c0       	rjmp	.+224    	; 0x1ae0 <TIMER1_Init+0x156>
		{
			RetValue = STD_TYPES_OK;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	89 83       	std	Y+1, r24	; 0x01
			switch(TIME1_Cfg->mode)
    1a04:	ea 81       	ldd	r30, Y+2	; 0x02
    1a06:	fb 81       	ldd	r31, Y+3	; 0x03
    1a08:	80 81       	ld	r24, Z
    1a0a:	e8 2f       	mov	r30, r24
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	fd 83       	std	Y+5, r31	; 0x05
    1a10:	ec 83       	std	Y+4, r30	; 0x04
    1a12:	2c 81       	ldd	r18, Y+4	; 0x04
    1a14:	3d 81       	ldd	r19, Y+5	; 0x05
    1a16:	21 30       	cpi	r18, 0x01	; 1
    1a18:	31 05       	cpc	r19, r1
    1a1a:	41 f1       	breq	.+80     	; 0x1a6c <TIMER1_Init+0xe2>
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a20:	82 30       	cpi	r24, 0x02	; 2
    1a22:	91 05       	cpc	r25, r1
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <TIMER1_Init+0x9e>
    1a26:	3f c0       	rjmp	.+126    	; 0x1aa6 <TIMER1_Init+0x11c>
    1a28:	ec 81       	ldd	r30, Y+4	; 0x04
    1a2a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a2c:	30 97       	sbiw	r30, 0x00	; 0
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <TIMER1_Init+0xa8>
    1a30:	58 c0       	rjmp	.+176    	; 0x1ae2 <TIMER1_Init+0x158>
			{
			case TIMER1_NORMAL_MODE:
				CLR_BIT(TCCR1A,WGM10);
    1a32:	af e4       	ldi	r26, 0x4F	; 79
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	ef e4       	ldi	r30, 0x4F	; 79
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	8e 7f       	andi	r24, 0xFE	; 254
    1a3e:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A,WGM11);
    1a40:	af e4       	ldi	r26, 0x4F	; 79
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	ef e4       	ldi	r30, 0x4F	; 79
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	8d 7f       	andi	r24, 0xFD	; 253
    1a4c:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM12);
    1a4e:	ae e4       	ldi	r26, 0x4E	; 78
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	ee e4       	ldi	r30, 0x4E	; 78
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	87 7f       	andi	r24, 0xF7	; 247
    1a5a:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,WGM13);
    1a5c:	ae e4       	ldi	r26, 0x4E	; 78
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	ee e4       	ldi	r30, 0x4E	; 78
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	8f 7e       	andi	r24, 0xEF	; 239
    1a68:	8c 93       	st	X, r24
    1a6a:	3b c0       	rjmp	.+118    	; 0x1ae2 <TIMER1_Init+0x158>
				break;
			case TIMER1_FAST_PWM_ICR1_TOP:
				CLR_BIT(TCCR1A,WGM10);
    1a6c:	af e4       	ldi	r26, 0x4F	; 79
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	ef e4       	ldi	r30, 0x4F	; 79
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8e 7f       	andi	r24, 0xFE	; 254
    1a78:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    1a7a:	af e4       	ldi	r26, 0x4F	; 79
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	ef e4       	ldi	r30, 0x4F	; 79
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	82 60       	ori	r24, 0x02	; 2
    1a86:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    1a88:	ae e4       	ldi	r26, 0x4E	; 78
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	ee e4       	ldi	r30, 0x4E	; 78
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	88 60       	ori	r24, 0x08	; 8
    1a94:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    1a96:	ae e4       	ldi	r26, 0x4E	; 78
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	ee e4       	ldi	r30, 0x4E	; 78
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	80 61       	ori	r24, 0x10	; 16
    1aa2:	8c 93       	st	X, r24
    1aa4:	1e c0       	rjmp	.+60     	; 0x1ae2 <TIMER1_Init+0x158>
				break;
			case TIMER1_FAST_PWM_OCR1A_TOP:
				SET_BIT(TCCR1A,WGM10);
    1aa6:	af e4       	ldi	r26, 0x4F	; 79
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	ef e4       	ldi	r30, 0x4F	; 79
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	81 60       	ori	r24, 0x01	; 1
    1ab2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    1ab4:	af e4       	ldi	r26, 0x4F	; 79
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	ef e4       	ldi	r30, 0x4F	; 79
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	82 60       	ori	r24, 0x02	; 2
    1ac0:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    1ac2:	ae e4       	ldi	r26, 0x4E	; 78
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	ee e4       	ldi	r30, 0x4E	; 78
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	88 60       	ori	r24, 0x08	; 8
    1ace:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    1ad0:	ae e4       	ldi	r26, 0x4E	; 78
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	ee e4       	ldi	r30, 0x4E	; 78
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	80 61       	ori	r24, 0x10	; 16
    1adc:	8c 93       	st	X, r24
    1ade:	01 c0       	rjmp	.+2      	; 0x1ae2 <TIMER1_Init+0x158>
				break;
			}
		}else{
			RetValue = STD_TYPES_NOK;
    1ae0:	19 82       	std	Y+1, r1	; 0x01
		}

		// Timer_0 Prescalar Configuration
		if((TIME1_Cfg->prescalar >= TIMER1_STOP) && (TIME1_Cfg->prescalar <= EXTERNAL1_RISING))
    1ae2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae6:	81 81       	ldd	r24, Z+1	; 0x01
    1ae8:	88 30       	cpi	r24, 0x08	; 8
    1aea:	58 f4       	brcc	.+22     	; 0x1b02 <TIMER1_Init+0x178>
		{
			TCCR1B |= TIME1_Cfg->prescalar;
    1aec:	ae e4       	ldi	r26, 0x4E	; 78
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	ee e4       	ldi	r30, 0x4E	; 78
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	90 81       	ld	r25, Z
    1af6:	ea 81       	ldd	r30, Y+2	; 0x02
    1af8:	fb 81       	ldd	r31, Y+3	; 0x03
    1afa:	81 81       	ldd	r24, Z+1	; 0x01
    1afc:	89 2b       	or	r24, r25
    1afe:	8c 93       	st	X, r24
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <TIMER1_Init+0x17a>
		}else{
			RetValue = STD_TYPES_NOK;
    1b02:	19 82       	std	Y+1, r1	; 0x01
		}


		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1A_mode << COM1A0);
    1b04:	af e4       	ldi	r26, 0x4F	; 79
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	ef e4       	ldi	r30, 0x4F	; 79
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	28 2f       	mov	r18, r24
    1b10:	ea 81       	ldd	r30, Y+2	; 0x02
    1b12:	fb 81       	ldd	r31, Y+3	; 0x03
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	88 2f       	mov	r24, r24
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	00 24       	eor	r0, r0
    1b1c:	96 95       	lsr	r25
    1b1e:	87 95       	ror	r24
    1b20:	07 94       	ror	r0
    1b22:	96 95       	lsr	r25
    1b24:	87 95       	ror	r24
    1b26:	07 94       	ror	r0
    1b28:	98 2f       	mov	r25, r24
    1b2a:	80 2d       	mov	r24, r0
    1b2c:	82 2b       	or	r24, r18
    1b2e:	8c 93       	st	X, r24

		// Timer_1 OCA Pin
		TCCR1A |= (TIME1_Cfg->OC1B_mode << COM1B0);
    1b30:	af e4       	ldi	r26, 0x4F	; 79
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ef e4       	ldi	r30, 0x4F	; 79
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b40:	83 81       	ldd	r24, Z+3	; 0x03
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	82 95       	swap	r24
    1b48:	92 95       	swap	r25
    1b4a:	90 7f       	andi	r25, 0xF0	; 240
    1b4c:	98 27       	eor	r25, r24
    1b4e:	80 7f       	andi	r24, 0xF0	; 240
    1b50:	98 27       	eor	r25, r24
    1b52:	82 2b       	or	r24, r18
    1b54:	8c 93       	st	X, r24


		// Timer_1 Interrupts
		TIMSK |= (TIME1_Cfg->OVF_Interrupt) | (TIME1_Cfg->ICU_Interrupt) | (TIME1_Cfg->OCA_Interrupt) | (TIME1_Cfg->OCB_Interrupt);
    1b56:	a9 e5       	ldi	r26, 0x59	; 89
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e9 e5       	ldi	r30, 0x59	; 89
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	20 81       	ld	r18, Z
    1b60:	ea 81       	ldd	r30, Y+2	; 0x02
    1b62:	fb 81       	ldd	r31, Y+3	; 0x03
    1b64:	94 81       	ldd	r25, Z+4	; 0x04
    1b66:	ea 81       	ldd	r30, Y+2	; 0x02
    1b68:	fb 81       	ldd	r31, Y+3	; 0x03
    1b6a:	85 81       	ldd	r24, Z+5	; 0x05
    1b6c:	98 2b       	or	r25, r24
    1b6e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b70:	fb 81       	ldd	r31, Y+3	; 0x03
    1b72:	86 81       	ldd	r24, Z+6	; 0x06
    1b74:	98 2b       	or	r25, r24
    1b76:	ea 81       	ldd	r30, Y+2	; 0x02
    1b78:	fb 81       	ldd	r31, Y+3	; 0x03
    1b7a:	87 81       	ldd	r24, Z+7	; 0x07
    1b7c:	89 2b       	or	r24, r25
    1b7e:	82 2b       	or	r24, r18
    1b80:	8c 93       	st	X, r24



	}

	return RetValue;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b84:	2a 96       	adiw	r28, 0x0a	; 10
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <TIMER1_Stop>:


u8 TIMER1_Stop(void)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
	// No clock source
	CLR_BIT(TCCR1B,CS10);
    1b9e:	ae e4       	ldi	r26, 0x4E	; 78
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	ee e4       	ldi	r30, 0x4E	; 78
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8e 7f       	andi	r24, 0xFE	; 254
    1baa:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    1bac:	ae e4       	ldi	r26, 0x4E	; 78
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	ee e4       	ldi	r30, 0x4E	; 78
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8d 7f       	andi	r24, 0xFD	; 253
    1bb8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    1bba:	ae e4       	ldi	r26, 0x4E	; 78
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	ee e4       	ldi	r30, 0x4E	; 78
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8b 7f       	andi	r24, 0xFB	; 251
    1bc6:	8c 93       	st	X, r24
	return STD_TYPES_OK;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
}
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    1bd0:	1f 92       	push	r1
    1bd2:	0f 92       	push	r0
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	0f 92       	push	r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	8f 93       	push	r24
    1bdc:	9f 93       	push	r25
    1bde:	af 93       	push	r26
    1be0:	bf 93       	push	r27
    1be2:	ef 93       	push	r30
    1be4:	ff 93       	push	r31
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
	if(OVF_Number > 0){
    1bee:	80 91 43 02 	lds	r24, 0x0243
    1bf2:	90 91 44 02 	lds	r25, 0x0244
    1bf6:	a0 91 45 02 	lds	r26, 0x0245
    1bfa:	b0 91 46 02 	lds	r27, 0x0246
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	a1 05       	cpc	r26, r1
    1c02:	b1 05       	cpc	r27, r1
    1c04:	a1 f0       	breq	.+40     	; 0x1c2e <__vector_11+0x5e>
		//		Lcd_ES_tdisplayNum(OVF_Number);
		//		Lcd_ES_tsendString("  ");
		OVF_Number--;
    1c06:	80 91 43 02 	lds	r24, 0x0243
    1c0a:	90 91 44 02 	lds	r25, 0x0244
    1c0e:	a0 91 45 02 	lds	r26, 0x0245
    1c12:	b0 91 46 02 	lds	r27, 0x0246
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	a1 09       	sbc	r26, r1
    1c1a:	b1 09       	sbc	r27, r1
    1c1c:	80 93 43 02 	sts	0x0243, r24
    1c20:	90 93 44 02 	sts	0x0244, r25
    1c24:	a0 93 45 02 	sts	0x0245, r26
    1c28:	b0 93 46 02 	sts	0x0246, r27
    1c2c:	07 c0       	rjmp	.+14     	; 0x1c3c <__vector_11+0x6c>
	}else {
		// If all overflows are done, disable the interrupt
		TIMSK &= ~(1 << TOIE0);
    1c2e:	a9 e5       	ldi	r26, 0x59	; 89
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e9 e5       	ldi	r30, 0x59	; 89
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	8e 7f       	andi	r24, 0xFE	; 254
    1c3a:	8c 93       	st	X, r24
	}

}
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	ff 91       	pop	r31
    1c42:	ef 91       	pop	r30
    1c44:	bf 91       	pop	r27
    1c46:	af 91       	pop	r26
    1c48:	9f 91       	pop	r25
    1c4a:	8f 91       	pop	r24
    1c4c:	0f 90       	pop	r0
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	0f 90       	pop	r0
    1c52:	1f 90       	pop	r1
    1c54:	18 95       	reti

00001c56 <__vector_6>:


ISR(TIMER1_CAPT_vect)
{
    1c56:	1f 92       	push	r1
    1c58:	0f 92       	push	r0
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	0f 92       	push	r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	2f 93       	push	r18
    1c62:	3f 93       	push	r19
    1c64:	4f 93       	push	r20
    1c66:	5f 93       	push	r21
    1c68:	6f 93       	push	r22
    1c6a:	7f 93       	push	r23
    1c6c:	8f 93       	push	r24
    1c6e:	9f 93       	push	r25
    1c70:	af 93       	push	r26
    1c72:	bf 93       	push	r27
    1c74:	ef 93       	push	r30
    1c76:	ff 93       	push	r31
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ICU_Fptr != NULLPTR)
    1c80:	80 91 40 02 	lds	r24, 0x0240
    1c84:	90 91 41 02 	lds	r25, 0x0241
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	29 f0       	breq	.+10     	; 0x1c96 <__vector_6+0x40>
	{
		Timer1_ICU_Fptr();
    1c8c:	e0 91 40 02 	lds	r30, 0x0240
    1c90:	f0 91 41 02 	lds	r31, 0x0241
    1c94:	09 95       	icall
	}
}
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	ff 91       	pop	r31
    1c9c:	ef 91       	pop	r30
    1c9e:	bf 91       	pop	r27
    1ca0:	af 91       	pop	r26
    1ca2:	9f 91       	pop	r25
    1ca4:	8f 91       	pop	r24
    1ca6:	7f 91       	pop	r23
    1ca8:	6f 91       	pop	r22
    1caa:	5f 91       	pop	r21
    1cac:	4f 91       	pop	r20
    1cae:	3f 91       	pop	r19
    1cb0:	2f 91       	pop	r18
    1cb2:	0f 90       	pop	r0
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	0f 90       	pop	r0
    1cb8:	1f 90       	pop	r1
    1cba:	18 95       	reti

00001cbc <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    1cbc:	1f 92       	push	r1
    1cbe:	0f 92       	push	r0
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	0f 92       	push	r0
    1cc4:	11 24       	eor	r1, r1
    1cc6:	2f 93       	push	r18
    1cc8:	3f 93       	push	r19
    1cca:	4f 93       	push	r20
    1ccc:	5f 93       	push	r21
    1cce:	6f 93       	push	r22
    1cd0:	7f 93       	push	r23
    1cd2:	8f 93       	push	r24
    1cd4:	9f 93       	push	r25
    1cd6:	af 93       	push	r26
    1cd8:	bf 93       	push	r27
    1cda:	ef 93       	push	r30
    1cdc:	ff 93       	push	r31
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OCM_Fptr != NULLPTR)
    1ce6:	80 91 3e 02 	lds	r24, 0x023E
    1cea:	90 91 3f 02 	lds	r25, 0x023F
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	29 f0       	breq	.+10     	; 0x1cfc <__vector_10+0x40>
	{
		Timer0_OCM_Fptr();
    1cf2:	e0 91 3e 02 	lds	r30, 0x023E
    1cf6:	f0 91 3f 02 	lds	r31, 0x023F
    1cfa:	09 95       	icall
	}
}
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	ff 91       	pop	r31
    1d02:	ef 91       	pop	r30
    1d04:	bf 91       	pop	r27
    1d06:	af 91       	pop	r26
    1d08:	9f 91       	pop	r25
    1d0a:	8f 91       	pop	r24
    1d0c:	7f 91       	pop	r23
    1d0e:	6f 91       	pop	r22
    1d10:	5f 91       	pop	r21
    1d12:	4f 91       	pop	r20
    1d14:	3f 91       	pop	r19
    1d16:	2f 91       	pop	r18
    1d18:	0f 90       	pop	r0
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	0f 90       	pop	r0
    1d1e:	1f 90       	pop	r1
    1d20:	18 95       	reti

00001d22 <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <Switch_Init+0x6>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <Switch_Init+0x8>
    1d2a:	0f 92       	push	r0
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	9c 83       	std	Y+4, r25	; 0x04
    1d32:	8b 83       	std	Y+3, r24	; 0x03
    1d34:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
    1d36:	1a 82       	std	Y+2, r1	; 0x02
    1d38:	19 82       	std	Y+1, r1	; 0x01
    1d3a:	50 c0       	rjmp	.+160    	; 0x1ddc <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
    1d3c:	29 81       	ldd	r18, Y+1	; 0x01
    1d3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d40:	c9 01       	movw	r24, r18
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	28 0f       	add	r18, r24
    1d48:	39 1f       	adc	r19, r25
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4e:	fc 01       	movw	r30, r24
    1d50:	e2 0f       	add	r30, r18
    1d52:	f3 1f       	adc	r31, r19
    1d54:	40 81       	ld	r20, Z
    1d56:	29 81       	ldd	r18, Y+1	; 0x01
    1d58:	3a 81       	ldd	r19, Y+2	; 0x02
    1d5a:	c9 01       	movw	r24, r18
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	28 0f       	add	r18, r24
    1d62:	39 1f       	adc	r19, r25
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	fc 01       	movw	r30, r24
    1d6a:	e2 0f       	add	r30, r18
    1d6c:	f3 1f       	adc	r31, r19
    1d6e:	91 81       	ldd	r25, Z+1	; 0x01
    1d70:	84 2f       	mov	r24, r20
    1d72:	69 2f       	mov	r22, r25
    1d74:	40 e0       	ldi	r20, 0x00	; 0
    1d76:	0e 94 e5 16 	call	0x2dca	; 0x2dca <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
    1d7a:	29 81       	ldd	r18, Y+1	; 0x01
    1d7c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d7e:	c9 01       	movw	r24, r18
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	28 0f       	add	r18, r24
    1d86:	39 1f       	adc	r19, r25
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	e2 0f       	add	r30, r18
    1d90:	f3 1f       	adc	r31, r19
    1d92:	50 81       	ld	r21, Z
    1d94:	29 81       	ldd	r18, Y+1	; 0x01
    1d96:	3a 81       	ldd	r19, Y+2	; 0x02
    1d98:	c9 01       	movw	r24, r18
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	28 0f       	add	r18, r24
    1da0:	39 1f       	adc	r19, r25
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	fc 01       	movw	r30, r24
    1da8:	e2 0f       	add	r30, r18
    1daa:	f3 1f       	adc	r31, r19
    1dac:	41 81       	ldd	r20, Z+1	; 0x01
    1dae:	29 81       	ldd	r18, Y+1	; 0x01
    1db0:	3a 81       	ldd	r19, Y+2	; 0x02
    1db2:	c9 01       	movw	r24, r18
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	28 0f       	add	r18, r24
    1dba:	39 1f       	adc	r19, r25
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e2 0f       	add	r30, r18
    1dc4:	f3 1f       	adc	r31, r19
    1dc6:	92 81       	ldd	r25, Z+2	; 0x02
    1dc8:	85 2f       	mov	r24, r21
    1dca:	64 2f       	mov	r22, r20
    1dcc:	49 2f       	mov	r20, r25
    1dce:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	9a 83       	std	Y+2, r25	; 0x02
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	82 17       	cp	r24, r18
    1de8:	93 07       	cpc	r25, r19
    1dea:	0c f4       	brge	.+2      	; 0x1dee <Switch_Init+0xcc>
    1dec:	a7 cf       	rjmp	.-178    	; 0x1d3c <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <Switch_GetValue+0x6>
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <Switch_GetValue+0x8>
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	7c 83       	std	Y+4, r23	; 0x04
    1e10:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
    1e12:	e9 81       	ldd	r30, Y+1	; 0x01
    1e14:	fa 81       	ldd	r31, Y+2	; 0x02
    1e16:	80 81       	ld	r24, Z
    1e18:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e20:	3c 81       	ldd	r19, Y+4	; 0x04
    1e22:	69 2f       	mov	r22, r25
    1e24:	a9 01       	movw	r20, r18
    1e26:	0e 94 40 19 	call	0x3280	; 0x3280 <DIO_u8GetPinValue>
}
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <LCD_setPinDirection+0x6>
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <LCD_setPinDirection+0x8>
    1e40:	0f 92       	push	r0
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	6a 83       	std	Y+2, r22	; 0x02
    1e4a:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	88 30       	cpi	r24, 0x08	; 8
    1e50:	08 f0       	brcs	.+2      	; 0x1e54 <LCD_setPinDirection+0x1c>
    1e52:	d5 c0       	rjmp	.+426    	; 0x1ffe <LCD_setPinDirection+0x1c6>
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	84 30       	cpi	r24, 0x04	; 4
    1e58:	08 f0       	brcs	.+2      	; 0x1e5c <LCD_setPinDirection+0x24>
    1e5a:	d1 c0       	rjmp	.+418    	; 0x1ffe <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	3d 83       	std	Y+5, r19	; 0x05
    1e64:	2c 83       	std	Y+4, r18	; 0x04
    1e66:	8c 81       	ldd	r24, Y+4	; 0x04
    1e68:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6a:	81 30       	cpi	r24, 0x01	; 1
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <LCD_setPinDirection+0x3a>
    1e70:	43 c0       	rjmp	.+134    	; 0x1ef8 <LCD_setPinDirection+0xc0>
    1e72:	2c 81       	ldd	r18, Y+4	; 0x04
    1e74:	3d 81       	ldd	r19, Y+5	; 0x05
    1e76:	22 30       	cpi	r18, 0x02	; 2
    1e78:	31 05       	cpc	r19, r1
    1e7a:	2c f4       	brge	.+10     	; 0x1e86 <LCD_setPinDirection+0x4e>
    1e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	71 f0       	breq	.+28     	; 0x1ea0 <LCD_setPinDirection+0x68>
    1e84:	bc c0       	rjmp	.+376    	; 0x1ffe <LCD_setPinDirection+0x1c6>
    1e86:	2c 81       	ldd	r18, Y+4	; 0x04
    1e88:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8a:	22 30       	cpi	r18, 0x02	; 2
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <LCD_setPinDirection+0x5a>
    1e90:	5f c0       	rjmp	.+190    	; 0x1f50 <LCD_setPinDirection+0x118>
    1e92:	8c 81       	ldd	r24, Y+4	; 0x04
    1e94:	9d 81       	ldd	r25, Y+5	; 0x05
    1e96:	83 30       	cpi	r24, 0x03	; 3
    1e98:	91 05       	cpc	r25, r1
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <LCD_setPinDirection+0x66>
    1e9c:	85 c0       	rjmp	.+266    	; 0x1fa8 <LCD_setPinDirection+0x170>
    1e9e:	af c0       	rjmp	.+350    	; 0x1ffe <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	a1 f4       	brne	.+40     	; 0x1ece <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1ea6:	aa e3       	ldi	r26, 0x3A	; 58
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	ea e3       	ldi	r30, 0x3A	; 58
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	48 2f       	mov	r20, r24
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	02 2e       	mov	r0, r18
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <LCD_setPinDirection+0x8c>
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	0a 94       	dec	r0
    1ec6:	e2 f7       	brpl	.-8      	; 0x1ec0 <LCD_setPinDirection+0x88>
    1ec8:	84 2b       	or	r24, r20
    1eca:	8c 93       	st	X, r24
    1ecc:	98 c0       	rjmp	.+304    	; 0x1ffe <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
    1ece:	aa e3       	ldi	r26, 0x3A	; 58
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	ea e3       	ldi	r30, 0x3A	; 58
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	48 2f       	mov	r20, r24
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	02 2e       	mov	r0, r18
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <LCD_setPinDirection+0xb4>
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	0a 94       	dec	r0
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <LCD_setPinDirection+0xb0>
    1ef0:	80 95       	com	r24
    1ef2:	84 23       	and	r24, r20
    1ef4:	8c 93       	st	X, r24
    1ef6:	83 c0       	rjmp	.+262    	; 0x1ffe <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	a1 f4       	brne	.+40     	; 0x1f26 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1efe:	a7 e3       	ldi	r26, 0x37	; 55
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e7 e3       	ldi	r30, 0x37	; 55
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	48 2f       	mov	r20, r24
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	02 2e       	mov	r0, r18
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <LCD_setPinDirection+0xe4>
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	0a 94       	dec	r0
    1f1e:	e2 f7       	brpl	.-8      	; 0x1f18 <LCD_setPinDirection+0xe0>
    1f20:	84 2b       	or	r24, r20
    1f22:	8c 93       	st	X, r24
    1f24:	6c c0       	rjmp	.+216    	; 0x1ffe <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
    1f26:	a7 e3       	ldi	r26, 0x37	; 55
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e7 e3       	ldi	r30, 0x37	; 55
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	48 2f       	mov	r20, r24
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	02 2e       	mov	r0, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <LCD_setPinDirection+0x10c>
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	0a 94       	dec	r0
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <LCD_setPinDirection+0x108>
    1f48:	80 95       	com	r24
    1f4a:	84 23       	and	r24, r20
    1f4c:	8c 93       	st	X, r24
    1f4e:	57 c0       	rjmp	.+174    	; 0x1ffe <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	a1 f4       	brne	.+40     	; 0x1f7e <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1f56:	a4 e3       	ldi	r26, 0x34	; 52
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e4 e3       	ldi	r30, 0x34	; 52
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	48 2f       	mov	r20, r24
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	02 2e       	mov	r0, r18
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <LCD_setPinDirection+0x13c>
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	0a 94       	dec	r0
    1f76:	e2 f7       	brpl	.-8      	; 0x1f70 <LCD_setPinDirection+0x138>
    1f78:	84 2b       	or	r24, r20
    1f7a:	8c 93       	st	X, r24
    1f7c:	40 c0       	rjmp	.+128    	; 0x1ffe <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
    1f7e:	a4 e3       	ldi	r26, 0x34	; 52
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e4 e3       	ldi	r30, 0x34	; 52
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	48 2f       	mov	r20, r24
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	02 2e       	mov	r0, r18
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <LCD_setPinDirection+0x164>
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	0a 94       	dec	r0
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <LCD_setPinDirection+0x160>
    1fa0:	80 95       	com	r24
    1fa2:	84 23       	and	r24, r20
    1fa4:	8c 93       	st	X, r24
    1fa6:	2b c0       	rjmp	.+86     	; 0x1ffe <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	a1 f4       	brne	.+40     	; 0x1fd6 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1fae:	a1 e3       	ldi	r26, 0x31	; 49
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e1 e3       	ldi	r30, 0x31	; 49
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	48 2f       	mov	r20, r24
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	02 2e       	mov	r0, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <LCD_setPinDirection+0x194>
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	0a 94       	dec	r0
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <LCD_setPinDirection+0x190>
    1fd0:	84 2b       	or	r24, r20
    1fd2:	8c 93       	st	X, r24
    1fd4:	14 c0       	rjmp	.+40     	; 0x1ffe <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
    1fd6:	a1 e3       	ldi	r26, 0x31	; 49
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e1 e3       	ldi	r30, 0x31	; 49
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 2e       	mov	r0, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <LCD_setPinDirection+0x1bc>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <LCD_setPinDirection+0x1b8>
    1ff8:	80 95       	com	r24
    1ffa:	84 23       	and	r24, r20
    1ffc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <LCD_setPinValue+0x6>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <LCD_setPinValue+0x8>
    2016:	0f 92       	push	r0
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	6a 83       	std	Y+2, r22	; 0x02
    2020:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	88 30       	cpi	r24, 0x08	; 8
    2026:	08 f0       	brcs	.+2      	; 0x202a <LCD_setPinValue+0x1c>
    2028:	d5 c0       	rjmp	.+426    	; 0x21d4 <LCD_setPinValue+0x1c6>
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	84 30       	cpi	r24, 0x04	; 4
    202e:	08 f0       	brcs	.+2      	; 0x2032 <LCD_setPinValue+0x24>
    2030:	d1 c0       	rjmp	.+418    	; 0x21d4 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	3d 83       	std	Y+5, r19	; 0x05
    203a:	2c 83       	std	Y+4, r18	; 0x04
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	9d 81       	ldd	r25, Y+5	; 0x05
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	91 05       	cpc	r25, r1
    2044:	09 f4       	brne	.+2      	; 0x2048 <LCD_setPinValue+0x3a>
    2046:	43 c0       	rjmp	.+134    	; 0x20ce <LCD_setPinValue+0xc0>
    2048:	2c 81       	ldd	r18, Y+4	; 0x04
    204a:	3d 81       	ldd	r19, Y+5	; 0x05
    204c:	22 30       	cpi	r18, 0x02	; 2
    204e:	31 05       	cpc	r19, r1
    2050:	2c f4       	brge	.+10     	; 0x205c <LCD_setPinValue+0x4e>
    2052:	8c 81       	ldd	r24, Y+4	; 0x04
    2054:	9d 81       	ldd	r25, Y+5	; 0x05
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	71 f0       	breq	.+28     	; 0x2076 <LCD_setPinValue+0x68>
    205a:	bc c0       	rjmp	.+376    	; 0x21d4 <LCD_setPinValue+0x1c6>
    205c:	2c 81       	ldd	r18, Y+4	; 0x04
    205e:	3d 81       	ldd	r19, Y+5	; 0x05
    2060:	22 30       	cpi	r18, 0x02	; 2
    2062:	31 05       	cpc	r19, r1
    2064:	09 f4       	brne	.+2      	; 0x2068 <LCD_setPinValue+0x5a>
    2066:	5f c0       	rjmp	.+190    	; 0x2126 <LCD_setPinValue+0x118>
    2068:	8c 81       	ldd	r24, Y+4	; 0x04
    206a:	9d 81       	ldd	r25, Y+5	; 0x05
    206c:	83 30       	cpi	r24, 0x03	; 3
    206e:	91 05       	cpc	r25, r1
    2070:	09 f4       	brne	.+2      	; 0x2074 <LCD_setPinValue+0x66>
    2072:	85 c0       	rjmp	.+266    	; 0x217e <LCD_setPinValue+0x170>
    2074:	af c0       	rjmp	.+350    	; 0x21d4 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	a1 f4       	brne	.+40     	; 0x20a4 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    207c:	ab e3       	ldi	r26, 0x3B	; 59
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	eb e3       	ldi	r30, 0x3B	; 59
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	48 2f       	mov	r20, r24
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	02 2e       	mov	r0, r18
    2094:	02 c0       	rjmp	.+4      	; 0x209a <LCD_setPinValue+0x8c>
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	0a 94       	dec	r0
    209c:	e2 f7       	brpl	.-8      	; 0x2096 <LCD_setPinValue+0x88>
    209e:	84 2b       	or	r24, r20
    20a0:	8c 93       	st	X, r24
    20a2:	98 c0       	rjmp	.+304    	; 0x21d4 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
    20a4:	ab e3       	ldi	r26, 0x3B	; 59
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	eb e3       	ldi	r30, 0x3B	; 59
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	48 2f       	mov	r20, r24
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	02 2e       	mov	r0, r18
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <LCD_setPinValue+0xb4>
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	0a 94       	dec	r0
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <LCD_setPinValue+0xb0>
    20c6:	80 95       	com	r24
    20c8:	84 23       	and	r24, r20
    20ca:	8c 93       	st	X, r24
    20cc:	83 c0       	rjmp	.+262    	; 0x21d4 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	81 30       	cpi	r24, 0x01	; 1
    20d2:	a1 f4       	brne	.+40     	; 0x20fc <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    20d4:	a8 e3       	ldi	r26, 0x38	; 56
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e8 e3       	ldi	r30, 0x38	; 56
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	48 2f       	mov	r20, r24
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	02 2e       	mov	r0, r18
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <LCD_setPinValue+0xe4>
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	0a 94       	dec	r0
    20f4:	e2 f7       	brpl	.-8      	; 0x20ee <LCD_setPinValue+0xe0>
    20f6:	84 2b       	or	r24, r20
    20f8:	8c 93       	st	X, r24
    20fa:	6c c0       	rjmp	.+216    	; 0x21d4 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
    20fc:	a8 e3       	ldi	r26, 0x38	; 56
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e8 e3       	ldi	r30, 0x38	; 56
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	48 2f       	mov	r20, r24
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	02 2e       	mov	r0, r18
    2114:	02 c0       	rjmp	.+4      	; 0x211a <LCD_setPinValue+0x10c>
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	0a 94       	dec	r0
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <LCD_setPinValue+0x108>
    211e:	80 95       	com	r24
    2120:	84 23       	and	r24, r20
    2122:	8c 93       	st	X, r24
    2124:	57 c0       	rjmp	.+174    	; 0x21d4 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	81 30       	cpi	r24, 0x01	; 1
    212a:	a1 f4       	brne	.+40     	; 0x2154 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    212c:	a5 e3       	ldi	r26, 0x35	; 53
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e5 e3       	ldi	r30, 0x35	; 53
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	48 2f       	mov	r20, r24
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	02 2e       	mov	r0, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <LCD_setPinValue+0x13c>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	0a 94       	dec	r0
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <LCD_setPinValue+0x138>
    214e:	84 2b       	or	r24, r20
    2150:	8c 93       	st	X, r24
    2152:	40 c0       	rjmp	.+128    	; 0x21d4 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
    2154:	a5 e3       	ldi	r26, 0x35	; 53
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e5 e3       	ldi	r30, 0x35	; 53
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	02 2e       	mov	r0, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <LCD_setPinValue+0x164>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <LCD_setPinValue+0x160>
    2176:	80 95       	com	r24
    2178:	84 23       	and	r24, r20
    217a:	8c 93       	st	X, r24
    217c:	2b c0       	rjmp	.+86     	; 0x21d4 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	a1 f4       	brne	.+40     	; 0x21ac <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2184:	a2 e3       	ldi	r26, 0x32	; 50
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e2 e3       	ldi	r30, 0x32	; 50
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	48 2f       	mov	r20, r24
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	02 2e       	mov	r0, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <LCD_setPinValue+0x194>
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	0a 94       	dec	r0
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <LCD_setPinValue+0x190>
    21a6:	84 2b       	or	r24, r20
    21a8:	8c 93       	st	X, r24
    21aa:	14 c0       	rjmp	.+40     	; 0x21d4 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
    21ac:	a2 e3       	ldi	r26, 0x32	; 50
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e2 e3       	ldi	r30, 0x32	; 50
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	48 2f       	mov	r20, r24
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	02 2e       	mov	r0, r18
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <LCD_setPinValue+0x1bc>
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	0a 94       	dec	r0
    21cc:	e2 f7       	brpl	.-8      	; 0x21c6 <LCD_setPinValue+0x1b8>
    21ce:	80 95       	com	r24
    21d0:	84 23       	and	r24, r20
    21d2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <LCD_getPinValue+0x6>
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <LCD_getPinValue+0x8>
    21ec:	0f 92       	push	r0
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	8a 83       	std	Y+2, r24	; 0x02
    21f4:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    21f6:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	88 30       	cpi	r24, 0x08	; 8
    21fc:	08 f0       	brcs	.+2      	; 0x2200 <LCD_getPinValue+0x1c>
    21fe:	84 c0       	rjmp	.+264    	; 0x2308 <LCD_getPinValue+0x124>
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	84 30       	cpi	r24, 0x04	; 4
    2204:	08 f0       	brcs	.+2      	; 0x2208 <LCD_getPinValue+0x24>
    2206:	80 c0       	rjmp	.+256    	; 0x2308 <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	3d 83       	std	Y+5, r19	; 0x05
    2210:	2c 83       	std	Y+4, r18	; 0x04
    2212:	4c 81       	ldd	r20, Y+4	; 0x04
    2214:	5d 81       	ldd	r21, Y+5	; 0x05
    2216:	41 30       	cpi	r20, 0x01	; 1
    2218:	51 05       	cpc	r21, r1
    221a:	79 f1       	breq	.+94     	; 0x227a <LCD_getPinValue+0x96>
    221c:	8c 81       	ldd	r24, Y+4	; 0x04
    221e:	9d 81       	ldd	r25, Y+5	; 0x05
    2220:	82 30       	cpi	r24, 0x02	; 2
    2222:	91 05       	cpc	r25, r1
    2224:	34 f4       	brge	.+12     	; 0x2232 <LCD_getPinValue+0x4e>
    2226:	2c 81       	ldd	r18, Y+4	; 0x04
    2228:	3d 81       	ldd	r19, Y+5	; 0x05
    222a:	21 15       	cp	r18, r1
    222c:	31 05       	cpc	r19, r1
    222e:	69 f0       	breq	.+26     	; 0x224a <LCD_getPinValue+0x66>
    2230:	6b c0       	rjmp	.+214    	; 0x2308 <LCD_getPinValue+0x124>
    2232:	4c 81       	ldd	r20, Y+4	; 0x04
    2234:	5d 81       	ldd	r21, Y+5	; 0x05
    2236:	42 30       	cpi	r20, 0x02	; 2
    2238:	51 05       	cpc	r21, r1
    223a:	b9 f1       	breq	.+110    	; 0x22aa <LCD_getPinValue+0xc6>
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	9d 81       	ldd	r25, Y+5	; 0x05
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	91 05       	cpc	r25, r1
    2244:	09 f4       	brne	.+2      	; 0x2248 <LCD_getPinValue+0x64>
    2246:	49 c0       	rjmp	.+146    	; 0x22da <LCD_getPinValue+0xf6>
    2248:	5f c0       	rjmp	.+190    	; 0x2308 <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    224a:	e9 e3       	ldi	r30, 0x39	; 57
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a9 01       	movw	r20, r18
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <LCD_getPinValue+0x7e>
    225e:	55 95       	asr	r21
    2260:	47 95       	ror	r20
    2262:	8a 95       	dec	r24
    2264:	e2 f7       	brpl	.-8      	; 0x225e <LCD_getPinValue+0x7a>
    2266:	ca 01       	movw	r24, r20
    2268:	81 70       	andi	r24, 0x01	; 1
    226a:	90 70       	andi	r25, 0x00	; 0
    226c:	88 23       	and	r24, r24
    226e:	19 f0       	breq	.+6      	; 0x2276 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	49 c0       	rjmp	.+146    	; 0x2308 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2276:	19 82       	std	Y+1, r1	; 0x01
    2278:	47 c0       	rjmp	.+142    	; 0x2308 <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    227a:	e6 e3       	ldi	r30, 0x36	; 54
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	a9 01       	movw	r20, r18
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <LCD_getPinValue+0xae>
    228e:	55 95       	asr	r21
    2290:	47 95       	ror	r20
    2292:	8a 95       	dec	r24
    2294:	e2 f7       	brpl	.-8      	; 0x228e <LCD_getPinValue+0xaa>
    2296:	ca 01       	movw	r24, r20
    2298:	81 70       	andi	r24, 0x01	; 1
    229a:	90 70       	andi	r25, 0x00	; 0
    229c:	88 23       	and	r24, r24
    229e:	19 f0       	breq	.+6      	; 0x22a6 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	31 c0       	rjmp	.+98     	; 0x2308 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22a6:	19 82       	std	Y+1, r1	; 0x01
    22a8:	2f c0       	rjmp	.+94     	; 0x2308 <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    22aa:	e3 e3       	ldi	r30, 0x33	; 51
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a9 01       	movw	r20, r18
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <LCD_getPinValue+0xde>
    22be:	55 95       	asr	r21
    22c0:	47 95       	ror	r20
    22c2:	8a 95       	dec	r24
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <LCD_getPinValue+0xda>
    22c6:	ca 01       	movw	r24, r20
    22c8:	81 70       	andi	r24, 0x01	; 1
    22ca:	90 70       	andi	r25, 0x00	; 0
    22cc:	88 23       	and	r24, r24
    22ce:	19 f0       	breq	.+6      	; 0x22d6 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	19 c0       	rjmp	.+50     	; 0x2308 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22d6:	19 82       	std	Y+1, r1	; 0x01
    22d8:	17 c0       	rjmp	.+46     	; 0x2308 <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    22da:	e0 e3       	ldi	r30, 0x30	; 48
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	88 2f       	mov	r24, r24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a9 01       	movw	r20, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <LCD_getPinValue+0x10e>
    22ee:	55 95       	asr	r21
    22f0:	47 95       	ror	r20
    22f2:	8a 95       	dec	r24
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <LCD_getPinValue+0x10a>
    22f6:	ca 01       	movw	r24, r20
    22f8:	81 70       	andi	r24, 0x01	; 1
    22fa:	90 70       	andi	r25, 0x00	; 0
    22fc:	88 23       	and	r24, r24
    22fe:	19 f0       	breq	.+6      	; 0x2306 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2306:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2308:	89 81       	ldd	r24, Y+1	; 0x01
}
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	00 d0       	rcall	.+0      	; 0x2320 <LCD_setPortDirection+0x6>
    2320:	00 d0       	rcall	.+0      	; 0x2322 <LCD_setPortDirection+0x8>
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	84 30       	cpi	r24, 0x04	; 4
    232e:	90 f5       	brcc	.+100    	; 0x2394 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	3c 83       	std	Y+4, r19	; 0x04
    2338:	2b 83       	std	Y+3, r18	; 0x03
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	81 30       	cpi	r24, 0x01	; 1
    2340:	91 05       	cpc	r25, r1
    2342:	d1 f0       	breq	.+52     	; 0x2378 <LCD_setPortDirection+0x5e>
    2344:	2b 81       	ldd	r18, Y+3	; 0x03
    2346:	3c 81       	ldd	r19, Y+4	; 0x04
    2348:	22 30       	cpi	r18, 0x02	; 2
    234a:	31 05       	cpc	r19, r1
    234c:	2c f4       	brge	.+10     	; 0x2358 <LCD_setPortDirection+0x3e>
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	61 f0       	breq	.+24     	; 0x236e <LCD_setPortDirection+0x54>
    2356:	1e c0       	rjmp	.+60     	; 0x2394 <LCD_setPortDirection+0x7a>
    2358:	2b 81       	ldd	r18, Y+3	; 0x03
    235a:	3c 81       	ldd	r19, Y+4	; 0x04
    235c:	22 30       	cpi	r18, 0x02	; 2
    235e:	31 05       	cpc	r19, r1
    2360:	81 f0       	breq	.+32     	; 0x2382 <LCD_setPortDirection+0x68>
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	83 30       	cpi	r24, 0x03	; 3
    2368:	91 05       	cpc	r25, r1
    236a:	81 f0       	breq	.+32     	; 0x238c <LCD_setPortDirection+0x72>
    236c:	13 c0       	rjmp	.+38     	; 0x2394 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    236e:	ea e3       	ldi	r30, 0x3A	; 58
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	80 83       	st	Z, r24
    2376:	0e c0       	rjmp	.+28     	; 0x2394 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2378:	e7 e3       	ldi	r30, 0x37	; 55
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	80 83       	st	Z, r24
    2380:	09 c0       	rjmp	.+18     	; 0x2394 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2382:	e4 e3       	ldi	r30, 0x34	; 52
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	80 83       	st	Z, r24
    238a:	04 c0       	rjmp	.+8      	; 0x2394 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    238c:	e1 e3       	ldi	r30, 0x31	; 49
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	80 83       	st	Z, r24
			break;
		}
	}
}
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <LCD_setPortValue+0x6>
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <LCD_setPortValue+0x8>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	84 30       	cpi	r24, 0x04	; 4
    23b6:	90 f5       	brcc	.+100    	; 0x241c <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	3c 83       	std	Y+4, r19	; 0x04
    23c0:	2b 83       	std	Y+3, r18	; 0x03
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	9c 81       	ldd	r25, Y+4	; 0x04
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	91 05       	cpc	r25, r1
    23ca:	d1 f0       	breq	.+52     	; 0x2400 <LCD_setPortValue+0x5e>
    23cc:	2b 81       	ldd	r18, Y+3	; 0x03
    23ce:	3c 81       	ldd	r19, Y+4	; 0x04
    23d0:	22 30       	cpi	r18, 0x02	; 2
    23d2:	31 05       	cpc	r19, r1
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <LCD_setPortValue+0x3e>
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	61 f0       	breq	.+24     	; 0x23f6 <LCD_setPortValue+0x54>
    23de:	1e c0       	rjmp	.+60     	; 0x241c <LCD_setPortValue+0x7a>
    23e0:	2b 81       	ldd	r18, Y+3	; 0x03
    23e2:	3c 81       	ldd	r19, Y+4	; 0x04
    23e4:	22 30       	cpi	r18, 0x02	; 2
    23e6:	31 05       	cpc	r19, r1
    23e8:	81 f0       	breq	.+32     	; 0x240a <LCD_setPortValue+0x68>
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	83 30       	cpi	r24, 0x03	; 3
    23f0:	91 05       	cpc	r25, r1
    23f2:	81 f0       	breq	.+32     	; 0x2414 <LCD_setPortValue+0x72>
    23f4:	13 c0       	rjmp	.+38     	; 0x241c <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    23f6:	eb e3       	ldi	r30, 0x3B	; 59
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	80 83       	st	Z, r24
    23fe:	0e c0       	rjmp	.+28     	; 0x241c <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2400:	e8 e3       	ldi	r30, 0x38	; 56
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	80 83       	st	Z, r24
    2408:	09 c0       	rjmp	.+18     	; 0x241c <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    240a:	e5 e3       	ldi	r30, 0x35	; 53
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	80 83       	st	Z, r24
    2412:	04 c0       	rjmp	.+8      	; 0x241c <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2414:	e2 e3       	ldi	r30, 0x32	; 50
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	80 83       	st	Z, r24
			break;
		}
	}
}
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	00 d0       	rcall	.+0      	; 0x2430 <LCD_getPortValue+0x6>
    2430:	00 d0       	rcall	.+0      	; 0x2432 <LCD_getPortValue+0x8>
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    2438:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	84 30       	cpi	r24, 0x04	; 4
    243e:	90 f5       	brcc	.+100    	; 0x24a4 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	3c 83       	std	Y+4, r19	; 0x04
    2448:	2b 83       	std	Y+3, r18	; 0x03
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	81 30       	cpi	r24, 0x01	; 1
    2450:	91 05       	cpc	r25, r1
    2452:	d1 f0       	breq	.+52     	; 0x2488 <LCD_getPortValue+0x5e>
    2454:	2b 81       	ldd	r18, Y+3	; 0x03
    2456:	3c 81       	ldd	r19, Y+4	; 0x04
    2458:	22 30       	cpi	r18, 0x02	; 2
    245a:	31 05       	cpc	r19, r1
    245c:	2c f4       	brge	.+10     	; 0x2468 <LCD_getPortValue+0x3e>
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	9c 81       	ldd	r25, Y+4	; 0x04
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	61 f0       	breq	.+24     	; 0x247e <LCD_getPortValue+0x54>
    2466:	1e c0       	rjmp	.+60     	; 0x24a4 <LCD_getPortValue+0x7a>
    2468:	2b 81       	ldd	r18, Y+3	; 0x03
    246a:	3c 81       	ldd	r19, Y+4	; 0x04
    246c:	22 30       	cpi	r18, 0x02	; 2
    246e:	31 05       	cpc	r19, r1
    2470:	81 f0       	breq	.+32     	; 0x2492 <LCD_getPortValue+0x68>
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	9c 81       	ldd	r25, Y+4	; 0x04
    2476:	83 30       	cpi	r24, 0x03	; 3
    2478:	91 05       	cpc	r25, r1
    247a:	81 f0       	breq	.+32     	; 0x249c <LCD_getPortValue+0x72>
    247c:	13 c0       	rjmp	.+38     	; 0x24a4 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    247e:	e9 e3       	ldi	r30, 0x39	; 57
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	0e c0       	rjmp	.+28     	; 0x24a4 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2488:	e6 e3       	ldi	r30, 0x36	; 54
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	09 c0       	rjmp	.+18     	; 0x24a4 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2492:	e3 e3       	ldi	r30, 0x33	; 51
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	89 83       	std	Y+1, r24	; 0x01
    249a:	04 c0       	rjmp	.+8      	; 0x24a4 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    249c:	e0 e3       	ldi	r30, 0x30	; 48
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <ICU_PWM_Measure>:




void ICU_PWM_Measure(u32 *freq, u8 *duty)
{
    24b4:	ef 92       	push	r14
    24b6:	ff 92       	push	r15
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	6a 97       	sbiw	r28, 0x1a	; 26
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	98 8f       	std	Y+24, r25	; 0x18
    24d2:	8f 8b       	std	Y+23, r24	; 0x17
    24d4:	7a 8f       	std	Y+26, r23	; 0x1a
    24d6:	69 8f       	std	Y+25, r22	; 0x19
	TIMER1_Config_t TIMER1Cfg = {TIMER1_NORMAL_MODE,TIMER1_PRESCALAR_64,OCRA_DISCONNECTED,OCRB_DISCONNECTED};
    24d8:	88 e0       	ldi	r24, 0x08	; 8
    24da:	fe 01       	movw	r30, r28
    24dc:	3f 96       	adiw	r30, 0x0f	; 15
    24de:	df 01       	movw	r26, r30
    24e0:	48 2f       	mov	r20, r24
    24e2:	1d 92       	st	X+, r1
    24e4:	4a 95       	dec	r20
    24e6:	e9 f7       	brne	.-6      	; 0x24e2 <ICU_PWM_Measure+0x2e>
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	88 8b       	std	Y+16, r24	; 0x10
	TIMER1_Init(&TIMER1Cfg);
    24ec:	ce 01       	movw	r24, r28
    24ee:	0f 96       	adiw	r24, 0x0f	; 15
    24f0:	0e 94 c5 0c 	call	0x198a	; 0x198a <TIMER1_Init>

	TCNT1 = 0;
    24f4:	ec e4       	ldi	r30, 0x4C	; 76
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	11 82       	std	Z+1, r1	; 0x01
    24fa:	10 82       	st	Z, r1

	Timer1_ICU_SetCallBack(ICU_Func);
    24fc:	8f ed       	ldi	r24, 0xDF	; 223
    24fe:	93 e1       	ldi	r25, 0x13	; 19
    2500:	0e 94 97 0c 	call	0x192e	; 0x192e <Timer1_ICU_SetCallBack>
	Timer1_ICU_Edge(ICU_RISING);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	0e 94 b4 13 	call	0x2768	; 0x2768 <Timer1_ICU_Edge>
	Timer1_ICU_InterruptEnable();
    250a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <Timer1_ICU_InterruptEnable>
	ICU_Counter = 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	90 93 49 02 	sts	0x0249, r25
    2516:	80 93 48 02 	sts	0x0248, r24


	while(ICU_Counter<=3);
    251a:	80 91 48 02 	lds	r24, 0x0248
    251e:	90 91 49 02 	lds	r25, 0x0249
    2522:	84 30       	cpi	r24, 0x04	; 4
    2524:	91 05       	cpc	r25, r1
    2526:	c8 f3       	brcs	.-14     	; 0x251a <ICU_PWM_Measure+0x66>

	onTime = secondEdgeCounts - firstEdgeCounts;
    2528:	20 91 70 02 	lds	r18, 0x0270
    252c:	30 91 71 02 	lds	r19, 0x0271
    2530:	80 91 68 02 	lds	r24, 0x0268
    2534:	90 91 69 02 	lds	r25, 0x0269
    2538:	d9 01       	movw	r26, r18
    253a:	a8 1b       	sub	r26, r24
    253c:	b9 0b       	sbc	r27, r25
    253e:	cd 01       	movw	r24, r26
    2540:	cc 01       	movw	r24, r24
    2542:	a0 e0       	ldi	r26, 0x00	; 0
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	80 93 6a 02 	sts	0x026A, r24
    254a:	90 93 6b 02 	sts	0x026B, r25
    254e:	a0 93 6c 02 	sts	0x026C, r26
    2552:	b0 93 6d 02 	sts	0x026D, r27


	offTime = thirdEdgeCounts - secondEdgeCounts;
    2556:	20 91 6e 02 	lds	r18, 0x026E
    255a:	30 91 6f 02 	lds	r19, 0x026F
    255e:	80 91 70 02 	lds	r24, 0x0270
    2562:	90 91 71 02 	lds	r25, 0x0271
    2566:	a9 01       	movw	r20, r18
    2568:	48 1b       	sub	r20, r24
    256a:	59 0b       	sbc	r21, r25
    256c:	ca 01       	movw	r24, r20
    256e:	cc 01       	movw	r24, r24
    2570:	a0 e0       	ldi	r26, 0x00	; 0
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	80 93 60 02 	sts	0x0260, r24
    2578:	90 93 61 02 	sts	0x0261, r25
    257c:	a0 93 62 02 	sts	0x0262, r26
    2580:	b0 93 63 02 	sts	0x0263, r27

	*duty = ((u32)onTime*100.0)/((u32)(onTime+offTime));
    2584:	80 91 6a 02 	lds	r24, 0x026A
    2588:	90 91 6b 02 	lds	r25, 0x026B
    258c:	a0 91 6c 02 	lds	r26, 0x026C
    2590:	b0 91 6d 02 	lds	r27, 0x026D
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	48 ec       	ldi	r20, 0xC8	; 200
    25aa:	52 e4       	ldi	r21, 0x42	; 66
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	7c 01       	movw	r14, r24
    25b6:	8d 01       	movw	r16, r26
    25b8:	20 91 6a 02 	lds	r18, 0x026A
    25bc:	30 91 6b 02 	lds	r19, 0x026B
    25c0:	40 91 6c 02 	lds	r20, 0x026C
    25c4:	50 91 6d 02 	lds	r21, 0x026D
    25c8:	80 91 60 02 	lds	r24, 0x0260
    25cc:	90 91 61 02 	lds	r25, 0x0261
    25d0:	a0 91 62 02 	lds	r26, 0x0262
    25d4:	b0 91 63 02 	lds	r27, 0x0263
    25d8:	82 0f       	add	r24, r18
    25da:	93 1f       	adc	r25, r19
    25dc:	a4 1f       	adc	r26, r20
    25de:	b5 1f       	adc	r27, r21
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    25e8:	9b 01       	movw	r18, r22
    25ea:	ac 01       	movw	r20, r24
    25ec:	c8 01       	movw	r24, r16
    25ee:	b7 01       	movw	r22, r14
    25f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	e9 8d       	ldd	r30, Y+25	; 0x19
    2606:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2608:	80 83       	st	Z, r24
	*freq = (u32)1000000.0/((u32)((offTime+onTime)*4));; // dutyCycle in percentage
    260a:	20 91 60 02 	lds	r18, 0x0260
    260e:	30 91 61 02 	lds	r19, 0x0261
    2612:	40 91 62 02 	lds	r20, 0x0262
    2616:	50 91 63 02 	lds	r21, 0x0263
    261a:	80 91 6a 02 	lds	r24, 0x026A
    261e:	90 91 6b 02 	lds	r25, 0x026B
    2622:	a0 91 6c 02 	lds	r26, 0x026C
    2626:	b0 91 6d 02 	lds	r27, 0x026D
    262a:	82 0f       	add	r24, r18
    262c:	93 1f       	adc	r25, r19
    262e:	a4 1f       	adc	r26, r20
    2630:	b5 1f       	adc	r27, r21
    2632:	9c 01       	movw	r18, r24
    2634:	ad 01       	movw	r20, r26
    2636:	22 0f       	add	r18, r18
    2638:	33 1f       	adc	r19, r19
    263a:	44 1f       	adc	r20, r20
    263c:	55 1f       	adc	r21, r21
    263e:	22 0f       	add	r18, r18
    2640:	33 1f       	adc	r19, r19
    2642:	44 1f       	adc	r20, r20
    2644:	55 1f       	adc	r21, r21
    2646:	80 e4       	ldi	r24, 0x40	; 64
    2648:	92 e4       	ldi	r25, 0x42	; 66
    264a:	af e0       	ldi	r26, 0x0F	; 15
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <__udivmodsi4>
    2656:	da 01       	movw	r26, r20
    2658:	c9 01       	movw	r24, r18
    265a:	ef 89       	ldd	r30, Y+23	; 0x17
    265c:	f8 8d       	ldd	r31, Y+24	; 0x18
    265e:	80 83       	st	Z, r24
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	a2 83       	std	Z+2, r26	; 0x02
    2664:	b3 83       	std	Z+3, r27	; 0x03
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	aa ef       	ldi	r26, 0xFA	; 250
    266c:	b3 e4       	ldi	r27, 0x43	; 67
    266e:	8b 87       	std	Y+11, r24	; 0x0b
    2670:	9c 87       	std	Y+12, r25	; 0x0c
    2672:	ad 87       	std	Y+13, r26	; 0x0d
    2674:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2676:	6b 85       	ldd	r22, Y+11	; 0x0b
    2678:	7c 85       	ldd	r23, Y+12	; 0x0c
    267a:	8d 85       	ldd	r24, Y+13	; 0x0d
    267c:	9e 85       	ldd	r25, Y+14	; 0x0e
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	4a e7       	ldi	r20, 0x7A	; 122
    2684:	55 e4       	ldi	r21, 0x45	; 69
    2686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	8f 83       	std	Y+7, r24	; 0x07
    2690:	98 87       	std	Y+8, r25	; 0x08
    2692:	a9 87       	std	Y+9, r26	; 0x09
    2694:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2696:	6f 81       	ldd	r22, Y+7	; 0x07
    2698:	78 85       	ldd	r23, Y+8	; 0x08
    269a:	89 85       	ldd	r24, Y+9	; 0x09
    269c:	9a 85       	ldd	r25, Y+10	; 0x0a
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e8       	ldi	r20, 0x80	; 128
    26a4:	5f e3       	ldi	r21, 0x3F	; 63
    26a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26aa:	88 23       	and	r24, r24
    26ac:	2c f4       	brge	.+10     	; 0x26b8 <ICU_PWM_Measure+0x204>
		__ticks = 1;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	3f c0       	rjmp	.+126    	; 0x2736 <ICU_PWM_Measure+0x282>
	else if (__tmp > 65535)
    26b8:	6f 81       	ldd	r22, Y+7	; 0x07
    26ba:	78 85       	ldd	r23, Y+8	; 0x08
    26bc:	89 85       	ldd	r24, Y+9	; 0x09
    26be:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	3f ef       	ldi	r19, 0xFF	; 255
    26c4:	4f e7       	ldi	r20, 0x7F	; 127
    26c6:	57 e4       	ldi	r21, 0x47	; 71
    26c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26cc:	18 16       	cp	r1, r24
    26ce:	4c f5       	brge	.+82     	; 0x2722 <ICU_PWM_Measure+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e2       	ldi	r20, 0x20	; 32
    26de:	51 e4       	ldi	r21, 0x41	; 65
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
    26f8:	0f c0       	rjmp	.+30     	; 0x2718 <ICU_PWM_Measure+0x264>
    26fa:	80 e9       	ldi	r24, 0x90	; 144
    26fc:	91 e0       	ldi	r25, 0x01	; 1
    26fe:	9c 83       	std	Y+4, r25	; 0x04
    2700:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	9c 81       	ldd	r25, Y+4	; 0x04
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <ICU_PWM_Measure+0x252>
    270a:	9c 83       	std	Y+4, r25	; 0x04
    270c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270e:	8d 81       	ldd	r24, Y+5	; 0x05
    2710:	9e 81       	ldd	r25, Y+6	; 0x06
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	9e 83       	std	Y+6, r25	; 0x06
    2716:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2718:	8d 81       	ldd	r24, Y+5	; 0x05
    271a:	9e 81       	ldd	r25, Y+6	; 0x06
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	69 f7       	brne	.-38     	; 0x26fa <ICU_PWM_Measure+0x246>
    2720:	14 c0       	rjmp	.+40     	; 0x274a <ICU_PWM_Measure+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2722:	6f 81       	ldd	r22, Y+7	; 0x07
    2724:	78 85       	ldd	r23, Y+8	; 0x08
    2726:	89 85       	ldd	r24, Y+9	; 0x09
    2728:	9a 85       	ldd	r25, Y+10	; 0x0a
    272a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	9e 83       	std	Y+6, r25	; 0x06
    2734:	8d 83       	std	Y+5, r24	; 0x05
    2736:	8d 81       	ldd	r24, Y+5	; 0x05
    2738:	9e 81       	ldd	r25, Y+6	; 0x06
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	9a 81       	ldd	r25, Y+2	; 0x02
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <ICU_PWM_Measure+0x28e>
    2746:	9a 83       	std	Y+2, r25	; 0x02
    2748:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(500);
	TIMER1_Stop();
    274a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <TIMER1_Stop>

}
    274e:	6a 96       	adiw	r28, 0x1a	; 26
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	ff 90       	pop	r15
    2764:	ef 90       	pop	r14
    2766:	08 95       	ret

00002768 <Timer1_ICU_Edge>:


void Timer1_ICU_Edge(ICU_Edge_Select edge)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	00 d0       	rcall	.+0      	; 0x276e <Timer1_ICU_Edge+0x6>
    276e:	0f 92       	push	r0
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	89 83       	std	Y+1, r24	; 0x01
	switch(edge)
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	3b 83       	std	Y+3, r19	; 0x03
    277e:	2a 83       	std	Y+2, r18	; 0x02
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	9b 81       	ldd	r25, Y+3	; 0x03
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	31 f0       	breq	.+12     	; 0x2794 <Timer1_ICU_Edge+0x2c>
    2788:	2a 81       	ldd	r18, Y+2	; 0x02
    278a:	3b 81       	ldd	r19, Y+3	; 0x03
    278c:	21 30       	cpi	r18, 0x01	; 1
    278e:	31 05       	cpc	r19, r1
    2790:	49 f0       	breq	.+18     	; 0x27a4 <Timer1_ICU_Edge+0x3c>
    2792:	0f c0       	rjmp	.+30     	; 0x27b2 <Timer1_ICU_Edge+0x4a>
	{
	case ICU_FALLING:
		CLR_BIT(TCCR1B,ICES1);
    2794:	ae e4       	ldi	r26, 0x4E	; 78
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	ee e4       	ldi	r30, 0x4E	; 78
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	8f 7b       	andi	r24, 0xBF	; 191
    27a0:	8c 93       	st	X, r24
    27a2:	07 c0       	rjmp	.+14     	; 0x27b2 <Timer1_ICU_Edge+0x4a>
		break;
	case ICU_RISING:
		SET_BIT(TCCR1B,ICES1);
    27a4:	ae e4       	ldi	r26, 0x4E	; 78
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	ee e4       	ldi	r30, 0x4E	; 78
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	80 64       	ori	r24, 0x40	; 64
    27b0:	8c 93       	st	X, r24
		break;
	}
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	08 95       	ret

000027be <ICU_Func>:




void ICU_Func(void)
{
    27be:	df 93       	push	r29
    27c0:	cf 93       	push	r28
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
	if(ICU_Counter == 1){
    27c6:	80 91 48 02 	lds	r24, 0x0248
    27ca:	90 91 49 02 	lds	r25, 0x0249
    27ce:	81 30       	cpi	r24, 0x01	; 1
    27d0:	91 05       	cpc	r25, r1
    27d2:	91 f4       	brne	.+36     	; 0x27f8 <ICU_Func+0x3a>
		firstEdgeCounts = ICR1;
    27d4:	e6 e4       	ldi	r30, 0x46	; 70
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	90 93 69 02 	sts	0x0269, r25
    27e0:	80 93 68 02 	sts	0x0268, r24
		Timer1_ICU_Edge(ICU_FALLING);
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	0e 94 b4 13 	call	0x2768	; 0x2768 <Timer1_ICU_Edge>
		ICU_Counter = 2;
    27ea:	82 e0       	ldi	r24, 0x02	; 2
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	90 93 49 02 	sts	0x0249, r25
    27f2:	80 93 48 02 	sts	0x0248, r24
    27f6:	30 c0       	rjmp	.+96     	; 0x2858 <ICU_Func+0x9a>
	}else if(ICU_Counter == 2){
    27f8:	80 91 48 02 	lds	r24, 0x0248
    27fc:	90 91 49 02 	lds	r25, 0x0249
    2800:	82 30       	cpi	r24, 0x02	; 2
    2802:	91 05       	cpc	r25, r1
    2804:	91 f4       	brne	.+36     	; 0x282a <ICU_Func+0x6c>
		secondEdgeCounts = ICR1;
    2806:	e6 e4       	ldi	r30, 0x46	; 70
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	90 93 71 02 	sts	0x0271, r25
    2812:	80 93 70 02 	sts	0x0270, r24
		Timer1_ICU_Edge(ICU_RISING);
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	0e 94 b4 13 	call	0x2768	; 0x2768 <Timer1_ICU_Edge>
		ICU_Counter = 3;
    281c:	83 e0       	ldi	r24, 0x03	; 3
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	90 93 49 02 	sts	0x0249, r25
    2824:	80 93 48 02 	sts	0x0248, r24
    2828:	17 c0       	rjmp	.+46     	; 0x2858 <ICU_Func+0x9a>
	}else if(ICU_Counter == 3){
    282a:	80 91 48 02 	lds	r24, 0x0248
    282e:	90 91 49 02 	lds	r25, 0x0249
    2832:	83 30       	cpi	r24, 0x03	; 3
    2834:	91 05       	cpc	r25, r1
    2836:	81 f4       	brne	.+32     	; 0x2858 <ICU_Func+0x9a>
		thirdEdgeCounts = ICR1;
    2838:	e6 e4       	ldi	r30, 0x46	; 70
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	91 81       	ldd	r25, Z+1	; 0x01
    2840:	90 93 6f 02 	sts	0x026F, r25
    2844:	80 93 6e 02 	sts	0x026E, r24
		Timer1_ICU_InterruptDisable();
    2848:	0e 94 b7 0c 	call	0x196e	; 0x196e <Timer1_ICU_InterruptDisable>
		ICU_Counter = 4;
    284c:	84 e0       	ldi	r24, 0x04	; 4
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	90 93 49 02 	sts	0x0249, r25
    2854:	80 93 48 02 	sts	0x0248, r24
	}
}
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    2866:	af e5       	ldi	r26, 0x5F	; 95
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	ef e5       	ldi	r30, 0x5F	; 95
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	80 68       	ori	r24, 0x80	; 128
    2872:	8c 93       	st	X, r24
}
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    2882:	af e5       	ldi	r26, 0x5F	; 95
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	ef e5       	ldi	r30, 0x5F	; 95
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	8f 77       	andi	r24, 0x7F	; 127
    288e:	8c 93       	st	X, r24
}
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	00 d0       	rcall	.+0      	; 0x289c <setCallBack+0x6>
    289c:	0f 92       	push	r0
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	9a 83       	std	Y+2, r25	; 0x02
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    28a8:	8b 81       	ldd	r24, Y+3	; 0x03
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	88 0f       	add	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	fc 01       	movw	r30, r24
    28b4:	e6 5b       	subi	r30, 0xB6	; 182
    28b6:	fd 4f       	sbci	r31, 0xFD	; 253
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	80 83       	st	Z, r24
}
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    28d4:	a5 e5       	ldi	r26, 0x55	; 85
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e5 e5       	ldi	r30, 0x55	; 85
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	8e 7f       	andi	r24, 0xFE	; 254
    28e0:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    28e2:	a5 e5       	ldi	r26, 0x55	; 85
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	e5 e5       	ldi	r30, 0x55	; 85
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	80 81       	ld	r24, Z
    28ec:	8d 7f       	andi	r24, 0xFD	; 253
    28ee:	8c 93       	st	X, r24
}
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    28fe:	a5 e5       	ldi	r26, 0x55	; 85
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e5 e5       	ldi	r30, 0x55	; 85
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	82 60       	ori	r24, 0x02	; 2
    290a:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    290c:	a5 e5       	ldi	r26, 0x55	; 85
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e5 e5       	ldi	r30, 0x55	; 85
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	8e 7f       	andi	r24, 0xFE	; 254
    2918:	8c 93       	st	X, r24
}
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    2928:	a5 e5       	ldi	r26, 0x55	; 85
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e5 e5       	ldi	r30, 0x55	; 85
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	8d 7f       	andi	r24, 0xFD	; 253
    2934:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    2936:	a5 e5       	ldi	r26, 0x55	; 85
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e5 e5       	ldi	r30, 0x55	; 85
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	81 60       	ori	r24, 0x01	; 1
    2942:	8c 93       	st	X, r24
}
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    2952:	a5 e5       	ldi	r26, 0x55	; 85
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	e5 e5       	ldi	r30, 0x55	; 85
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	82 60       	ori	r24, 0x02	; 2
    295e:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    2960:	a5 e5       	ldi	r26, 0x55	; 85
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e5 e5       	ldi	r30, 0x55	; 85
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	81 60       	ori	r24, 0x01	; 1
    296c:	8c 93       	st	X, r24
}
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    297c:	a5 e5       	ldi	r26, 0x55	; 85
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e5 e5       	ldi	r30, 0x55	; 85
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	8b 7f       	andi	r24, 0xFB	; 251
    2988:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    298a:	a5 e5       	ldi	r26, 0x55	; 85
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e5 e5       	ldi	r30, 0x55	; 85
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	87 7f       	andi	r24, 0xF7	; 247
    2996:	8c 93       	st	X, r24
}
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    29a6:	a5 e5       	ldi	r26, 0x55	; 85
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e5 e5       	ldi	r30, 0x55	; 85
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	88 60       	ori	r24, 0x08	; 8
    29b2:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    29b4:	a5 e5       	ldi	r26, 0x55	; 85
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e5 e5       	ldi	r30, 0x55	; 85
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	8b 7f       	andi	r24, 0xFB	; 251
    29c0:	8c 93       	st	X, r24
}
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    29d0:	a5 e5       	ldi	r26, 0x55	; 85
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e5 e5       	ldi	r30, 0x55	; 85
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	87 7f       	andi	r24, 0xF7	; 247
    29dc:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    29de:	a5 e5       	ldi	r26, 0x55	; 85
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e5 e5       	ldi	r30, 0x55	; 85
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	84 60       	ori	r24, 0x04	; 4
    29ea:	8c 93       	st	X, r24
}
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    29fa:	a5 e5       	ldi	r26, 0x55	; 85
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e5 e5       	ldi	r30, 0x55	; 85
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	88 60       	ori	r24, 0x08	; 8
    2a06:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    2a08:	a5 e5       	ldi	r26, 0x55	; 85
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e5 e5       	ldi	r30, 0x55	; 85
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	84 60       	ori	r24, 0x04	; 4
    2a14:	8c 93       	st	X, r24
}
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    2a24:	a4 e5       	ldi	r26, 0x54	; 84
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e4 e5       	ldi	r30, 0x54	; 84
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	80 64       	ori	r24, 0x40	; 64
    2a30:	8c 93       	st	X, r24
}
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    2a40:	a4 e5       	ldi	r26, 0x54	; 84
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e4 e5       	ldi	r30, 0x54	; 84
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	8f 7b       	andi	r24, 0xBF	; 191
    2a4c:	8c 93       	st	X, r24
}
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_RISING_MODE();
    2a5c:	0e 94 a5 14 	call	0x294a	; 0x294a <EXTI0_RISING_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    2a60:	ab e5       	ldi	r26, 0x5B	; 91
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	eb e5       	ldi	r30, 0x5B	; 91
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	80 64       	ori	r24, 0x40	; 64
    2a6c:	8c 93       	st	X, r24
}
    2a6e:	cf 91       	pop	r28
    2a70:	df 91       	pop	r29
    2a72:	08 95       	ret

00002a74 <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    2a74:	df 93       	push	r29
    2a76:	cf 93       	push	r28
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    2a7c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    2a80:	ab e5       	ldi	r26, 0x5B	; 91
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	eb e5       	ldi	r30, 0x5B	; 91
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	80 68       	ori	r24, 0x80	; 128
    2a8c:	8c 93       	st	X, r24
}
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	08 95       	ret

00002a94 <EXTI_INTEnable>:


void EXTI_INTEnable(u8 Copy_u8INTNumber, u8 Copy_u8INTMode){
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	2a 97       	sbiw	r28, 0x0a	; 10
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	89 83       	std	Y+1, r24	; 0x01
    2aaa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8INTNumber){
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	3a 87       	std	Y+10, r19	; 0x0a
    2ab4:	29 87       	std	Y+9, r18	; 0x09
    2ab6:	89 85       	ldd	r24, Y+9	; 0x09
    2ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aba:	81 30       	cpi	r24, 0x01	; 1
    2abc:	91 05       	cpc	r25, r1
    2abe:	e9 f1       	breq	.+122    	; 0x2b3a <EXTI_INTEnable+0xa6>
    2ac0:	29 85       	ldd	r18, Y+9	; 0x09
    2ac2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ac4:	22 30       	cpi	r18, 0x02	; 2
    2ac6:	31 05       	cpc	r19, r1
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <EXTI_INTEnable+0x38>
    2aca:	69 c0       	rjmp	.+210    	; 0x2b9e <EXTI_INTEnable+0x10a>
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	09 f0       	breq	.+2      	; 0x2ad6 <EXTI_INTEnable+0x42>
    2ad4:	7f c0       	rjmp	.+254    	; 0x2bd4 <EXTI_INTEnable+0x140>
		case EXTI_INT0:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    2ad6:	ab e5       	ldi	r26, 0x5B	; 91
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	eb e5       	ldi	r30, 0x5B	; 91
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	80 64       	ori	r24, 0x40	; 64
    2ae2:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	38 87       	std	Y+8, r19	; 0x08
    2aec:	2f 83       	std	Y+7, r18	; 0x07
    2aee:	8f 81       	ldd	r24, Y+7	; 0x07
    2af0:	98 85       	ldd	r25, Y+8	; 0x08
    2af2:	81 30       	cpi	r24, 0x01	; 1
    2af4:	91 05       	cpc	r25, r1
    2af6:	c1 f0       	breq	.+48     	; 0x2b28 <EXTI_INTEnable+0x94>
    2af8:	2f 81       	ldd	r18, Y+7	; 0x07
    2afa:	38 85       	ldd	r19, Y+8	; 0x08
    2afc:	22 30       	cpi	r18, 0x02	; 2
    2afe:	31 05       	cpc	r19, r1
    2b00:	2c f4       	brge	.+10     	; 0x2b0c <EXTI_INTEnable+0x78>
    2b02:	8f 81       	ldd	r24, Y+7	; 0x07
    2b04:	98 85       	ldd	r25, Y+8	; 0x08
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	61 f0       	breq	.+24     	; 0x2b22 <EXTI_INTEnable+0x8e>
    2b0a:	64 c0       	rjmp	.+200    	; 0x2bd4 <EXTI_INTEnable+0x140>
    2b0c:	2f 81       	ldd	r18, Y+7	; 0x07
    2b0e:	38 85       	ldd	r19, Y+8	; 0x08
    2b10:	22 30       	cpi	r18, 0x02	; 2
    2b12:	31 05       	cpc	r19, r1
    2b14:	61 f0       	breq	.+24     	; 0x2b2e <EXTI_INTEnable+0x9a>
    2b16:	8f 81       	ldd	r24, Y+7	; 0x07
    2b18:	98 85       	ldd	r25, Y+8	; 0x08
    2b1a:	83 30       	cpi	r24, 0x03	; 3
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	51 f0       	breq	.+20     	; 0x2b34 <EXTI_INTEnable+0xa0>
    2b20:	59 c0       	rjmp	.+178    	; 0x2bd4 <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    2b22:	0e 94 66 14 	call	0x28cc	; 0x28cc <EXTI0_LowLevel_MODE>
    2b26:	56 c0       	rjmp	.+172    	; 0x2bd4 <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    2b28:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <EXTI0_FALLING_MODE>
    2b2c:	53 c0       	rjmp	.+166    	; 0x2bd4 <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    2b2e:	0e 94 90 14 	call	0x2920	; 0x2920 <EXTI0_AnyLogicalChange_MODE>
    2b32:	50 c0       	rjmp	.+160    	; 0x2bd4 <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    2b34:	0e 94 a5 14 	call	0x294a	; 0x294a <EXTI0_RISING_MODE>
    2b38:	4d c0       	rjmp	.+154    	; 0x2bd4 <EXTI_INTEnable+0x140>
			}
			break;

		case EXTI_INT1:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    2b3a:	ab e5       	ldi	r26, 0x5B	; 91
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	eb e5       	ldi	r30, 0x5B	; 91
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	80 68       	ori	r24, 0x80	; 128
    2b46:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	3e 83       	std	Y+6, r19	; 0x06
    2b50:	2d 83       	std	Y+5, r18	; 0x05
    2b52:	8d 81       	ldd	r24, Y+5	; 0x05
    2b54:	9e 81       	ldd	r25, Y+6	; 0x06
    2b56:	81 30       	cpi	r24, 0x01	; 1
    2b58:	91 05       	cpc	r25, r1
    2b5a:	c1 f0       	breq	.+48     	; 0x2b8c <EXTI_INTEnable+0xf8>
    2b5c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b5e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b60:	22 30       	cpi	r18, 0x02	; 2
    2b62:	31 05       	cpc	r19, r1
    2b64:	2c f4       	brge	.+10     	; 0x2b70 <EXTI_INTEnable+0xdc>
    2b66:	8d 81       	ldd	r24, Y+5	; 0x05
    2b68:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	61 f0       	breq	.+24     	; 0x2b86 <EXTI_INTEnable+0xf2>
    2b6e:	32 c0       	rjmp	.+100    	; 0x2bd4 <EXTI_INTEnable+0x140>
    2b70:	2d 81       	ldd	r18, Y+5	; 0x05
    2b72:	3e 81       	ldd	r19, Y+6	; 0x06
    2b74:	22 30       	cpi	r18, 0x02	; 2
    2b76:	31 05       	cpc	r19, r1
    2b78:	61 f0       	breq	.+24     	; 0x2b92 <EXTI_INTEnable+0xfe>
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7e:	83 30       	cpi	r24, 0x03	; 3
    2b80:	91 05       	cpc	r25, r1
    2b82:	51 f0       	breq	.+20     	; 0x2b98 <EXTI_INTEnable+0x104>
    2b84:	27 c0       	rjmp	.+78     	; 0x2bd4 <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    2b86:	0e 94 ba 14 	call	0x2974	; 0x2974 <EXTI1_LowLevel_MODE>
    2b8a:	24 c0       	rjmp	.+72     	; 0x2bd4 <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    2b8c:	0e 94 cf 14 	call	0x299e	; 0x299e <EXTI1_FALLING_MODE>
    2b90:	21 c0       	rjmp	.+66     	; 0x2bd4 <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    2b92:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <EXTI1_AnyLogicalChange_MODE>
    2b96:	1e c0       	rjmp	.+60     	; 0x2bd4 <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    2b98:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <EXTI1_RISING_MODE>
    2b9c:	1b c0       	rjmp	.+54     	; 0x2bd4 <EXTI_INTEnable+0x140>
					break;
			}
			break;
		case EXTI_INT2:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    2b9e:	ab e5       	ldi	r26, 0x5B	; 91
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	eb e5       	ldi	r30, 0x5B	; 91
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	80 62       	ori	r24, 0x20	; 32
    2baa:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	28 2f       	mov	r18, r24
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	3c 83       	std	Y+4, r19	; 0x04
    2bb4:	2b 83       	std	Y+3, r18	; 0x03
    2bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bba:	81 30       	cpi	r24, 0x01	; 1
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	41 f0       	breq	.+16     	; 0x2bd0 <EXTI_INTEnable+0x13c>
    2bc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc2:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc4:	23 30       	cpi	r18, 0x03	; 3
    2bc6:	31 05       	cpc	r19, r1
    2bc8:	29 f4       	brne	.+10     	; 0x2bd4 <EXTI_INTEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    2bca:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <EXTI2_RISING_MODE>
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <EXTI_INTEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    2bd0:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    2bd4:	2a 96       	adiw	r28, 0x0a	; 10
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	f8 94       	cli
    2bda:	de bf       	out	0x3e, r29	; 62
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	cd bf       	out	0x3d, r28	; 61
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	08 95       	ret

00002be6 <EXTI_voidINTDisable>:

void EXTI_voidINTDisable(u8 Copy_u8_INT_Index){
    2be6:	df 93       	push	r29
    2be8:	cf 93       	push	r28
    2bea:	00 d0       	rcall	.+0      	; 0x2bec <EXTI_voidINTDisable+0x6>
    2bec:	0f 92       	push	r0
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_INT_Index){
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	3b 83       	std	Y+3, r19	; 0x03
    2bfc:	2a 83       	std	Y+2, r18	; 0x02
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	9b 81       	ldd	r25, Y+3	; 0x03
    2c02:	81 30       	cpi	r24, 0x01	; 1
    2c04:	91 05       	cpc	r25, r1
    2c06:	89 f0       	breq	.+34     	; 0x2c2a <EXTI_voidINTDisable+0x44>
    2c08:	2a 81       	ldd	r18, Y+2	; 0x02
    2c0a:	3b 81       	ldd	r19, Y+3	; 0x03
    2c0c:	22 30       	cpi	r18, 0x02	; 2
    2c0e:	31 05       	cpc	r19, r1
    2c10:	a1 f0       	breq	.+40     	; 0x2c3a <EXTI_voidINTDisable+0x54>
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	9b 81       	ldd	r25, Y+3	; 0x03
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	b9 f4       	brne	.+46     	; 0x2c48 <EXTI_voidINTDisable+0x62>
		case EXTI_INT0:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    2c1a:	ab e5       	ldi	r26, 0x5B	; 91
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	eb e5       	ldi	r30, 0x5B	; 91
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	8f 7b       	andi	r24, 0xBF	; 191
    2c26:	8c 93       	st	X, r24
    2c28:	0f c0       	rjmp	.+30     	; 0x2c48 <EXTI_voidINTDisable+0x62>
			break;

		case EXTI_INT1:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    2c2a:	ab e5       	ldi	r26, 0x5B	; 91
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	eb e5       	ldi	r30, 0x5B	; 91
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	8f 77       	andi	r24, 0x7F	; 127
    2c36:	8c 93       	st	X, r24
    2c38:	07 c0       	rjmp	.+14     	; 0x2c48 <EXTI_voidINTDisable+0x62>
			break;
		
		case EXTI_INT2:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    2c3a:	ab e5       	ldi	r26, 0x5B	; 91
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	eb e5       	ldi	r30, 0x5B	; 91
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	8f 7d       	andi	r24, 0xDF	; 223
    2c46:	8c 93       	st	X, r24
			break;
	}
}
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	08 95       	ret

00002c54 <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    2c54:	1f 92       	push	r1
    2c56:	0f 92       	push	r0
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	0f 92       	push	r0
    2c5c:	11 24       	eor	r1, r1
    2c5e:	2f 93       	push	r18
    2c60:	3f 93       	push	r19
    2c62:	4f 93       	push	r20
    2c64:	5f 93       	push	r21
    2c66:	6f 93       	push	r22
    2c68:	7f 93       	push	r23
    2c6a:	8f 93       	push	r24
    2c6c:	9f 93       	push	r25
    2c6e:	af 93       	push	r26
    2c70:	bf 93       	push	r27
    2c72:	ef 93       	push	r30
    2c74:	ff 93       	push	r31
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT0] != NULL){
    2c7e:	80 91 4a 02 	lds	r24, 0x024A
    2c82:	90 91 4b 02 	lds	r25, 0x024B
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	29 f0       	breq	.+10     	; 0x2c94 <__vector_1+0x40>
		EXTI[0]();
    2c8a:	e0 91 4a 02 	lds	r30, 0x024A
    2c8e:	f0 91 4b 02 	lds	r31, 0x024B
    2c92:	09 95       	icall
	}

}
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	ff 91       	pop	r31
    2c9a:	ef 91       	pop	r30
    2c9c:	bf 91       	pop	r27
    2c9e:	af 91       	pop	r26
    2ca0:	9f 91       	pop	r25
    2ca2:	8f 91       	pop	r24
    2ca4:	7f 91       	pop	r23
    2ca6:	6f 91       	pop	r22
    2ca8:	5f 91       	pop	r21
    2caa:	4f 91       	pop	r20
    2cac:	3f 91       	pop	r19
    2cae:	2f 91       	pop	r18
    2cb0:	0f 90       	pop	r0
    2cb2:	0f be       	out	0x3f, r0	; 63
    2cb4:	0f 90       	pop	r0
    2cb6:	1f 90       	pop	r1
    2cb8:	18 95       	reti

00002cba <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    2cba:	1f 92       	push	r1
    2cbc:	0f 92       	push	r0
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	0f 92       	push	r0
    2cc2:	11 24       	eor	r1, r1
    2cc4:	2f 93       	push	r18
    2cc6:	3f 93       	push	r19
    2cc8:	4f 93       	push	r20
    2cca:	5f 93       	push	r21
    2ccc:	6f 93       	push	r22
    2cce:	7f 93       	push	r23
    2cd0:	8f 93       	push	r24
    2cd2:	9f 93       	push	r25
    2cd4:	af 93       	push	r26
    2cd6:	bf 93       	push	r27
    2cd8:	ef 93       	push	r30
    2cda:	ff 93       	push	r31
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT1] != NULL){
    2ce4:	80 91 4c 02 	lds	r24, 0x024C
    2ce8:	90 91 4d 02 	lds	r25, 0x024D
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	29 f0       	breq	.+10     	; 0x2cfa <__vector_2+0x40>
			EXTI[1]();
    2cf0:	e0 91 4c 02 	lds	r30, 0x024C
    2cf4:	f0 91 4d 02 	lds	r31, 0x024D
    2cf8:	09 95       	icall
	}

}
    2cfa:	cf 91       	pop	r28
    2cfc:	df 91       	pop	r29
    2cfe:	ff 91       	pop	r31
    2d00:	ef 91       	pop	r30
    2d02:	bf 91       	pop	r27
    2d04:	af 91       	pop	r26
    2d06:	9f 91       	pop	r25
    2d08:	8f 91       	pop	r24
    2d0a:	7f 91       	pop	r23
    2d0c:	6f 91       	pop	r22
    2d0e:	5f 91       	pop	r21
    2d10:	4f 91       	pop	r20
    2d12:	3f 91       	pop	r19
    2d14:	2f 91       	pop	r18
    2d16:	0f 90       	pop	r0
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	0f 90       	pop	r0
    2d1c:	1f 90       	pop	r1
    2d1e:	18 95       	reti

00002d20 <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    2d20:	1f 92       	push	r1
    2d22:	0f 92       	push	r0
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	0f 92       	push	r0
    2d28:	11 24       	eor	r1, r1
    2d2a:	2f 93       	push	r18
    2d2c:	3f 93       	push	r19
    2d2e:	4f 93       	push	r20
    2d30:	5f 93       	push	r21
    2d32:	6f 93       	push	r22
    2d34:	7f 93       	push	r23
    2d36:	8f 93       	push	r24
    2d38:	9f 93       	push	r25
    2d3a:	af 93       	push	r26
    2d3c:	bf 93       	push	r27
    2d3e:	ef 93       	push	r30
    2d40:	ff 93       	push	r31
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT2] != NULL){
    2d4a:	80 91 4e 02 	lds	r24, 0x024E
    2d4e:	90 91 4f 02 	lds	r25, 0x024F
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	29 f0       	breq	.+10     	; 0x2d60 <__vector_3+0x40>
			EXTI[2]();
    2d56:	e0 91 4e 02 	lds	r30, 0x024E
    2d5a:	f0 91 4f 02 	lds	r31, 0x024F
    2d5e:	09 95       	icall
	}

}
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	ff 91       	pop	r31
    2d66:	ef 91       	pop	r30
    2d68:	bf 91       	pop	r27
    2d6a:	af 91       	pop	r26
    2d6c:	9f 91       	pop	r25
    2d6e:	8f 91       	pop	r24
    2d70:	7f 91       	pop	r23
    2d72:	6f 91       	pop	r22
    2d74:	5f 91       	pop	r21
    2d76:	4f 91       	pop	r20
    2d78:	3f 91       	pop	r19
    2d7a:	2f 91       	pop	r18
    2d7c:	0f 90       	pop	r0
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	0f 90       	pop	r0
    2d82:	1f 90       	pop	r1
    2d84:	18 95       	reti

00002d86 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    2d8e:	ea e3       	ldi	r30, 0x3A	; 58
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	8c e7       	ldi	r24, 0x7C	; 124
    2d94:	80 83       	st	Z, r24
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    2d96:	e7 e3       	ldi	r30, 0x37	; 55
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    2d9c:	e4 e3       	ldi	r30, 0x34	; 52
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 e8       	ldi	r24, 0x80	; 128
    2da2:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    2da4:	e1 e3       	ldi	r30, 0x31	; 49
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	82 e0       	ldi	r24, 0x02	; 2
    2daa:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    2dac:	eb e3       	ldi	r30, 0x3B	; 59
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    2db2:	e8 e3       	ldi	r30, 0x38	; 56
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    2db8:	e5 e3       	ldi	r30, 0x35	; 53
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    2dbe:	e2 e3       	ldi	r30, 0x32	; 50
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	10 82       	st	Z, r1

}
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	2e 97       	sbiw	r28, 0x0e	; 14
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	8a 83       	std	Y+2, r24	; 0x02
    2de0:	6b 83       	std	Y+3, r22	; 0x03
    2de2:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	84 30       	cpi	r24, 0x04	; 4
    2dec:	08 f0       	brcs	.+2      	; 0x2df0 <DIO_u8SetPinDirection+0x26>
    2dee:	0c c1       	rjmp	.+536    	; 0x3008 <DIO_u8SetPinDirection+0x23e>
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	88 30       	cpi	r24, 0x08	; 8
    2df4:	08 f0       	brcs	.+2      	; 0x2df8 <DIO_u8SetPinDirection+0x2e>
    2df6:	08 c1       	rjmp	.+528    	; 0x3008 <DIO_u8SetPinDirection+0x23e>
    2df8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfa:	81 30       	cpi	r24, 0x01	; 1
    2dfc:	21 f0       	breq	.+8      	; 0x2e06 <DIO_u8SetPinDirection+0x3c>
    2dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    2e00:	88 23       	and	r24, r24
    2e02:	09 f0       	breq	.+2      	; 0x2e06 <DIO_u8SetPinDirection+0x3c>
    2e04:	01 c1       	rjmp	.+514    	; 0x3008 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	28 2f       	mov	r18, r24
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	3e 87       	std	Y+14, r19	; 0x0e
    2e0e:	2d 87       	std	Y+13, r18	; 0x0d
    2e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e14:	81 30       	cpi	r24, 0x01	; 1
    2e16:	91 05       	cpc	r25, r1
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <DIO_u8SetPinDirection+0x52>
    2e1a:	4f c0       	rjmp	.+158    	; 0x2eba <DIO_u8SetPinDirection+0xf0>
    2e1c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e1e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e20:	22 30       	cpi	r18, 0x02	; 2
    2e22:	31 05       	cpc	r19, r1
    2e24:	2c f4       	brge	.+10     	; 0x2e30 <DIO_u8SetPinDirection+0x66>
    2e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	71 f0       	breq	.+28     	; 0x2e4a <DIO_u8SetPinDirection+0x80>
    2e2e:	ed c0       	rjmp	.+474    	; 0x300a <DIO_u8SetPinDirection+0x240>
    2e30:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e32:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e34:	22 30       	cpi	r18, 0x02	; 2
    2e36:	31 05       	cpc	r19, r1
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <DIO_u8SetPinDirection+0x72>
    2e3a:	77 c0       	rjmp	.+238    	; 0x2f2a <DIO_u8SetPinDirection+0x160>
    2e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e40:	83 30       	cpi	r24, 0x03	; 3
    2e42:	91 05       	cpc	r25, r1
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <DIO_u8SetPinDirection+0x7e>
    2e46:	a9 c0       	rjmp	.+338    	; 0x2f9a <DIO_u8SetPinDirection+0x1d0>
    2e48:	e0 c0       	rjmp	.+448    	; 0x300a <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    2e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4c:	28 2f       	mov	r18, r24
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	3c 87       	std	Y+12, r19	; 0x0c
    2e52:	2b 87       	std	Y+11, r18	; 0x0b
    2e54:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e56:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	d1 f0       	breq	.+52     	; 0x2e90 <DIO_u8SetPinDirection+0xc6>
    2e5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e60:	21 30       	cpi	r18, 0x01	; 1
    2e62:	31 05       	cpc	r19, r1
    2e64:	09 f0       	breq	.+2      	; 0x2e68 <DIO_u8SetPinDirection+0x9e>
    2e66:	d1 c0       	rjmp	.+418    	; 0x300a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    2e68:	aa e3       	ldi	r26, 0x3A	; 58
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	ea e3       	ldi	r30, 0x3A	; 58
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	48 2f       	mov	r20, r24
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	28 2f       	mov	r18, r24
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	02 2e       	mov	r0, r18
    2e80:	02 c0       	rjmp	.+4      	; 0x2e86 <DIO_u8SetPinDirection+0xbc>
    2e82:	88 0f       	add	r24, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	0a 94       	dec	r0
    2e88:	e2 f7       	brpl	.-8      	; 0x2e82 <DIO_u8SetPinDirection+0xb8>
    2e8a:	84 2b       	or	r24, r20
    2e8c:	8c 93       	st	X, r24
    2e8e:	bd c0       	rjmp	.+378    	; 0x300a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    2e90:	aa e3       	ldi	r26, 0x3A	; 58
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	ea e3       	ldi	r30, 0x3A	; 58
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	48 2f       	mov	r20, r24
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	02 2e       	mov	r0, r18
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <DIO_u8SetPinDirection+0xe4>
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	0a 94       	dec	r0
    2eb0:	e2 f7       	brpl	.-8      	; 0x2eaa <DIO_u8SetPinDirection+0xe0>
    2eb2:	80 95       	com	r24
    2eb4:	84 23       	and	r24, r20
    2eb6:	8c 93       	st	X, r24
    2eb8:	a8 c0       	rjmp	.+336    	; 0x300a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    2eba:	8c 81       	ldd	r24, Y+4	; 0x04
    2ebc:	28 2f       	mov	r18, r24
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	3a 87       	std	Y+10, r19	; 0x0a
    2ec2:	29 87       	std	Y+9, r18	; 0x09
    2ec4:	89 85       	ldd	r24, Y+9	; 0x09
    2ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	d1 f0       	breq	.+52     	; 0x2f00 <DIO_u8SetPinDirection+0x136>
    2ecc:	29 85       	ldd	r18, Y+9	; 0x09
    2ece:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ed0:	21 30       	cpi	r18, 0x01	; 1
    2ed2:	31 05       	cpc	r19, r1
    2ed4:	09 f0       	breq	.+2      	; 0x2ed8 <DIO_u8SetPinDirection+0x10e>
    2ed6:	99 c0       	rjmp	.+306    	; 0x300a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    2ed8:	a7 e3       	ldi	r26, 0x37	; 55
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	e7 e3       	ldi	r30, 0x37	; 55
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	48 2f       	mov	r20, r24
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	02 2e       	mov	r0, r18
    2ef0:	02 c0       	rjmp	.+4      	; 0x2ef6 <DIO_u8SetPinDirection+0x12c>
    2ef2:	88 0f       	add	r24, r24
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	0a 94       	dec	r0
    2ef8:	e2 f7       	brpl	.-8      	; 0x2ef2 <DIO_u8SetPinDirection+0x128>
    2efa:	84 2b       	or	r24, r20
    2efc:	8c 93       	st	X, r24
    2efe:	85 c0       	rjmp	.+266    	; 0x300a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    2f00:	a7 e3       	ldi	r26, 0x37	; 55
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	e7 e3       	ldi	r30, 0x37	; 55
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	48 2f       	mov	r20, r24
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	02 2e       	mov	r0, r18
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <DIO_u8SetPinDirection+0x154>
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	0a 94       	dec	r0
    2f20:	e2 f7       	brpl	.-8      	; 0x2f1a <DIO_u8SetPinDirection+0x150>
    2f22:	80 95       	com	r24
    2f24:	84 23       	and	r24, r20
    2f26:	8c 93       	st	X, r24
    2f28:	70 c0       	rjmp	.+224    	; 0x300a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    2f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2c:	28 2f       	mov	r18, r24
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	38 87       	std	Y+8, r19	; 0x08
    2f32:	2f 83       	std	Y+7, r18	; 0x07
    2f34:	8f 81       	ldd	r24, Y+7	; 0x07
    2f36:	98 85       	ldd	r25, Y+8	; 0x08
    2f38:	00 97       	sbiw	r24, 0x00	; 0
    2f3a:	d1 f0       	breq	.+52     	; 0x2f70 <DIO_u8SetPinDirection+0x1a6>
    2f3c:	2f 81       	ldd	r18, Y+7	; 0x07
    2f3e:	38 85       	ldd	r19, Y+8	; 0x08
    2f40:	21 30       	cpi	r18, 0x01	; 1
    2f42:	31 05       	cpc	r19, r1
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <DIO_u8SetPinDirection+0x17e>
    2f46:	61 c0       	rjmp	.+194    	; 0x300a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    2f48:	a4 e3       	ldi	r26, 0x34	; 52
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	e4 e3       	ldi	r30, 0x34	; 52
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	48 2f       	mov	r20, r24
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	28 2f       	mov	r18, r24
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	02 2e       	mov	r0, r18
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <DIO_u8SetPinDirection+0x19c>
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	0a 94       	dec	r0
    2f68:	e2 f7       	brpl	.-8      	; 0x2f62 <DIO_u8SetPinDirection+0x198>
    2f6a:	84 2b       	or	r24, r20
    2f6c:	8c 93       	st	X, r24
    2f6e:	4d c0       	rjmp	.+154    	; 0x300a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    2f70:	a4 e3       	ldi	r26, 0x34	; 52
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	e4 e3       	ldi	r30, 0x34	; 52
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	48 2f       	mov	r20, r24
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	28 2f       	mov	r18, r24
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	02 2e       	mov	r0, r18
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <DIO_u8SetPinDirection+0x1c4>
    2f8a:	88 0f       	add	r24, r24
    2f8c:	99 1f       	adc	r25, r25
    2f8e:	0a 94       	dec	r0
    2f90:	e2 f7       	brpl	.-8      	; 0x2f8a <DIO_u8SetPinDirection+0x1c0>
    2f92:	80 95       	com	r24
    2f94:	84 23       	and	r24, r20
    2f96:	8c 93       	st	X, r24
    2f98:	38 c0       	rjmp	.+112    	; 0x300a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    2f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	3e 83       	std	Y+6, r19	; 0x06
    2fa2:	2d 83       	std	Y+5, r18	; 0x05
    2fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	c9 f0       	breq	.+50     	; 0x2fde <DIO_u8SetPinDirection+0x214>
    2fac:	2d 81       	ldd	r18, Y+5	; 0x05
    2fae:	3e 81       	ldd	r19, Y+6	; 0x06
    2fb0:	21 30       	cpi	r18, 0x01	; 1
    2fb2:	31 05       	cpc	r19, r1
    2fb4:	51 f5       	brne	.+84     	; 0x300a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    2fb6:	a1 e3       	ldi	r26, 0x31	; 49
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e1 e3       	ldi	r30, 0x31	; 49
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	48 2f       	mov	r20, r24
    2fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	02 2e       	mov	r0, r18
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <DIO_u8SetPinDirection+0x20a>
    2fd0:	88 0f       	add	r24, r24
    2fd2:	99 1f       	adc	r25, r25
    2fd4:	0a 94       	dec	r0
    2fd6:	e2 f7       	brpl	.-8      	; 0x2fd0 <DIO_u8SetPinDirection+0x206>
    2fd8:	84 2b       	or	r24, r20
    2fda:	8c 93       	st	X, r24
    2fdc:	16 c0       	rjmp	.+44     	; 0x300a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    2fde:	a1 e3       	ldi	r26, 0x31	; 49
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	e1 e3       	ldi	r30, 0x31	; 49
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	48 2f       	mov	r20, r24
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	28 2f       	mov	r18, r24
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	02 2e       	mov	r0, r18
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <DIO_u8SetPinDirection+0x232>
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	0a 94       	dec	r0
    2ffe:	e2 f7       	brpl	.-8      	; 0x2ff8 <DIO_u8SetPinDirection+0x22e>
    3000:	80 95       	com	r24
    3002:	84 23       	and	r24, r20
    3004:	8c 93       	st	X, r24
    3006:	01 c0       	rjmp	.+2      	; 0x300a <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3008:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    300a:	89 81       	ldd	r24, Y+1	; 0x01
}
    300c:	2e 96       	adiw	r28, 0x0e	; 14
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	08 95       	ret

0000301e <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    301e:	df 93       	push	r29
    3020:	cf 93       	push	r28
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	2f 97       	sbiw	r28, 0x0f	; 15
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	8b 83       	std	Y+3, r24	; 0x03
    3034:	6c 83       	std	Y+4, r22	; 0x04
    3036:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    303c:	8b 81       	ldd	r24, Y+3	; 0x03
    303e:	84 30       	cpi	r24, 0x04	; 4
    3040:	08 f0       	brcs	.+2      	; 0x3044 <DIO_u8SetPinValue+0x26>
    3042:	13 c1       	rjmp	.+550    	; 0x326a <DIO_u8SetPinValue+0x24c>
    3044:	8c 81       	ldd	r24, Y+4	; 0x04
    3046:	88 30       	cpi	r24, 0x08	; 8
    3048:	08 f0       	brcs	.+2      	; 0x304c <DIO_u8SetPinValue+0x2e>
    304a:	0f c1       	rjmp	.+542    	; 0x326a <DIO_u8SetPinValue+0x24c>
    304c:	8d 81       	ldd	r24, Y+5	; 0x05
    304e:	88 23       	and	r24, r24
    3050:	21 f0       	breq	.+8      	; 0x305a <DIO_u8SetPinValue+0x3c>
    3052:	8d 81       	ldd	r24, Y+5	; 0x05
    3054:	81 30       	cpi	r24, 0x01	; 1
    3056:	09 f0       	breq	.+2      	; 0x305a <DIO_u8SetPinValue+0x3c>
    3058:	08 c1       	rjmp	.+528    	; 0x326a <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	28 2f       	mov	r18, r24
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	3f 87       	std	Y+15, r19	; 0x0f
    3062:	2e 87       	std	Y+14, r18	; 0x0e
    3064:	8e 85       	ldd	r24, Y+14	; 0x0e
    3066:	9f 85       	ldd	r25, Y+15	; 0x0f
    3068:	81 30       	cpi	r24, 0x01	; 1
    306a:	91 05       	cpc	r25, r1
    306c:	09 f4       	brne	.+2      	; 0x3070 <DIO_u8SetPinValue+0x52>
    306e:	50 c0       	rjmp	.+160    	; 0x3110 <DIO_u8SetPinValue+0xf2>
    3070:	2e 85       	ldd	r18, Y+14	; 0x0e
    3072:	3f 85       	ldd	r19, Y+15	; 0x0f
    3074:	22 30       	cpi	r18, 0x02	; 2
    3076:	31 05       	cpc	r19, r1
    3078:	2c f4       	brge	.+10     	; 0x3084 <DIO_u8SetPinValue+0x66>
    307a:	8e 85       	ldd	r24, Y+14	; 0x0e
    307c:	9f 85       	ldd	r25, Y+15	; 0x0f
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	71 f0       	breq	.+28     	; 0x309e <DIO_u8SetPinValue+0x80>
    3082:	f4 c0       	rjmp	.+488    	; 0x326c <DIO_u8SetPinValue+0x24e>
    3084:	2e 85       	ldd	r18, Y+14	; 0x0e
    3086:	3f 85       	ldd	r19, Y+15	; 0x0f
    3088:	22 30       	cpi	r18, 0x02	; 2
    308a:	31 05       	cpc	r19, r1
    308c:	09 f4       	brne	.+2      	; 0x3090 <DIO_u8SetPinValue+0x72>
    308e:	79 c0       	rjmp	.+242    	; 0x3182 <DIO_u8SetPinValue+0x164>
    3090:	8e 85       	ldd	r24, Y+14	; 0x0e
    3092:	9f 85       	ldd	r25, Y+15	; 0x0f
    3094:	83 30       	cpi	r24, 0x03	; 3
    3096:	91 05       	cpc	r25, r1
    3098:	09 f4       	brne	.+2      	; 0x309c <DIO_u8SetPinValue+0x7e>
    309a:	ad c0       	rjmp	.+346    	; 0x31f6 <DIO_u8SetPinValue+0x1d8>
    309c:	e7 c0       	rjmp	.+462    	; 0x326c <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    309e:	8d 81       	ldd	r24, Y+5	; 0x05
    30a0:	28 2f       	mov	r18, r24
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	3d 87       	std	Y+13, r19	; 0x0d
    30a6:	2c 87       	std	Y+12, r18	; 0x0c
    30a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    30aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	c9 f0       	breq	.+50     	; 0x30e2 <DIO_u8SetPinValue+0xc4>
    30b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    30b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    30b4:	21 30       	cpi	r18, 0x01	; 1
    30b6:	31 05       	cpc	r19, r1
    30b8:	49 f5       	brne	.+82     	; 0x310c <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    30ba:	ab e3       	ldi	r26, 0x3B	; 59
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	eb e3       	ldi	r30, 0x3B	; 59
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	48 2f       	mov	r20, r24
    30c6:	8c 81       	ldd	r24, Y+4	; 0x04
    30c8:	28 2f       	mov	r18, r24
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	02 2e       	mov	r0, r18
    30d2:	02 c0       	rjmp	.+4      	; 0x30d8 <DIO_u8SetPinValue+0xba>
    30d4:	88 0f       	add	r24, r24
    30d6:	99 1f       	adc	r25, r25
    30d8:	0a 94       	dec	r0
    30da:	e2 f7       	brpl	.-8      	; 0x30d4 <DIO_u8SetPinValue+0xb6>
    30dc:	84 2b       	or	r24, r20
    30de:	8c 93       	st	X, r24
    30e0:	c5 c0       	rjmp	.+394    	; 0x326c <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    30e2:	ab e3       	ldi	r26, 0x3B	; 59
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	eb e3       	ldi	r30, 0x3B	; 59
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	80 81       	ld	r24, Z
    30ec:	48 2f       	mov	r20, r24
    30ee:	8c 81       	ldd	r24, Y+4	; 0x04
    30f0:	28 2f       	mov	r18, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	02 2e       	mov	r0, r18
    30fa:	02 c0       	rjmp	.+4      	; 0x3100 <DIO_u8SetPinValue+0xe2>
    30fc:	88 0f       	add	r24, r24
    30fe:	99 1f       	adc	r25, r25
    3100:	0a 94       	dec	r0
    3102:	e2 f7       	brpl	.-8      	; 0x30fc <DIO_u8SetPinValue+0xde>
    3104:	80 95       	com	r24
    3106:	84 23       	and	r24, r20
    3108:	8c 93       	st	X, r24
    310a:	b0 c0       	rjmp	.+352    	; 0x326c <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    310c:	1a 82       	std	Y+2, r1	; 0x02
    310e:	ae c0       	rjmp	.+348    	; 0x326c <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    3110:	8d 81       	ldd	r24, Y+5	; 0x05
    3112:	28 2f       	mov	r18, r24
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	3b 87       	std	Y+11, r19	; 0x0b
    3118:	2a 87       	std	Y+10, r18	; 0x0a
    311a:	8a 85       	ldd	r24, Y+10	; 0x0a
    311c:	9b 85       	ldd	r25, Y+11	; 0x0b
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	c9 f0       	breq	.+50     	; 0x3154 <DIO_u8SetPinValue+0x136>
    3122:	2a 85       	ldd	r18, Y+10	; 0x0a
    3124:	3b 85       	ldd	r19, Y+11	; 0x0b
    3126:	21 30       	cpi	r18, 0x01	; 1
    3128:	31 05       	cpc	r19, r1
    312a:	49 f5       	brne	.+82     	; 0x317e <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    312c:	a8 e3       	ldi	r26, 0x38	; 56
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e8 e3       	ldi	r30, 0x38	; 56
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	48 2f       	mov	r20, r24
    3138:	8c 81       	ldd	r24, Y+4	; 0x04
    313a:	28 2f       	mov	r18, r24
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	02 2e       	mov	r0, r18
    3144:	02 c0       	rjmp	.+4      	; 0x314a <DIO_u8SetPinValue+0x12c>
    3146:	88 0f       	add	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	0a 94       	dec	r0
    314c:	e2 f7       	brpl	.-8      	; 0x3146 <DIO_u8SetPinValue+0x128>
    314e:	84 2b       	or	r24, r20
    3150:	8c 93       	st	X, r24
    3152:	8c c0       	rjmp	.+280    	; 0x326c <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    3154:	a8 e3       	ldi	r26, 0x38	; 56
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	e8 e3       	ldi	r30, 0x38	; 56
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	48 2f       	mov	r20, r24
    3160:	8c 81       	ldd	r24, Y+4	; 0x04
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	02 2e       	mov	r0, r18
    316c:	02 c0       	rjmp	.+4      	; 0x3172 <DIO_u8SetPinValue+0x154>
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	0a 94       	dec	r0
    3174:	e2 f7       	brpl	.-8      	; 0x316e <DIO_u8SetPinValue+0x150>
    3176:	80 95       	com	r24
    3178:	84 23       	and	r24, r20
    317a:	8c 93       	st	X, r24
    317c:	77 c0       	rjmp	.+238    	; 0x326c <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    317e:	1a 82       	std	Y+2, r1	; 0x02
    3180:	75 c0       	rjmp	.+234    	; 0x326c <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    3182:	8d 81       	ldd	r24, Y+5	; 0x05
    3184:	28 2f       	mov	r18, r24
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	39 87       	std	Y+9, r19	; 0x09
    318a:	28 87       	std	Y+8, r18	; 0x08
    318c:	88 85       	ldd	r24, Y+8	; 0x08
    318e:	99 85       	ldd	r25, Y+9	; 0x09
    3190:	00 97       	sbiw	r24, 0x00	; 0
    3192:	31 f0       	breq	.+12     	; 0x31a0 <DIO_u8SetPinValue+0x182>
    3194:	28 85       	ldd	r18, Y+8	; 0x08
    3196:	39 85       	ldd	r19, Y+9	; 0x09
    3198:	21 30       	cpi	r18, 0x01	; 1
    319a:	31 05       	cpc	r19, r1
    319c:	b1 f0       	breq	.+44     	; 0x31ca <DIO_u8SetPinValue+0x1ac>
    319e:	29 c0       	rjmp	.+82     	; 0x31f2 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    31a0:	a5 e3       	ldi	r26, 0x35	; 53
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	e5 e3       	ldi	r30, 0x35	; 53
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	48 2f       	mov	r20, r24
    31ac:	8c 81       	ldd	r24, Y+4	; 0x04
    31ae:	28 2f       	mov	r18, r24
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	02 2e       	mov	r0, r18
    31b8:	02 c0       	rjmp	.+4      	; 0x31be <DIO_u8SetPinValue+0x1a0>
    31ba:	88 0f       	add	r24, r24
    31bc:	99 1f       	adc	r25, r25
    31be:	0a 94       	dec	r0
    31c0:	e2 f7       	brpl	.-8      	; 0x31ba <DIO_u8SetPinValue+0x19c>
    31c2:	80 95       	com	r24
    31c4:	84 23       	and	r24, r20
    31c6:	8c 93       	st	X, r24
    31c8:	51 c0       	rjmp	.+162    	; 0x326c <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    31ca:	a5 e3       	ldi	r26, 0x35	; 53
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	e5 e3       	ldi	r30, 0x35	; 53
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	48 2f       	mov	r20, r24
    31d6:	8c 81       	ldd	r24, Y+4	; 0x04
    31d8:	28 2f       	mov	r18, r24
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	02 2e       	mov	r0, r18
    31e2:	02 c0       	rjmp	.+4      	; 0x31e8 <DIO_u8SetPinValue+0x1ca>
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	0a 94       	dec	r0
    31ea:	e2 f7       	brpl	.-8      	; 0x31e4 <DIO_u8SetPinValue+0x1c6>
    31ec:	84 2b       	or	r24, r20
    31ee:	8c 93       	st	X, r24
    31f0:	3d c0       	rjmp	.+122    	; 0x326c <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    31f2:	1a 82       	std	Y+2, r1	; 0x02
    31f4:	3b c0       	rjmp	.+118    	; 0x326c <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	3f 83       	std	Y+7, r19	; 0x07
    31fe:	2e 83       	std	Y+6, r18	; 0x06
    3200:	8e 81       	ldd	r24, Y+6	; 0x06
    3202:	9f 81       	ldd	r25, Y+7	; 0x07
    3204:	00 97       	sbiw	r24, 0x00	; 0
    3206:	31 f0       	breq	.+12     	; 0x3214 <DIO_u8SetPinValue+0x1f6>
    3208:	2e 81       	ldd	r18, Y+6	; 0x06
    320a:	3f 81       	ldd	r19, Y+7	; 0x07
    320c:	21 30       	cpi	r18, 0x01	; 1
    320e:	31 05       	cpc	r19, r1
    3210:	b1 f0       	breq	.+44     	; 0x323e <DIO_u8SetPinValue+0x220>
    3212:	29 c0       	rjmp	.+82     	; 0x3266 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    3214:	a5 e3       	ldi	r26, 0x35	; 53
    3216:	b0 e0       	ldi	r27, 0x00	; 0
    3218:	e5 e3       	ldi	r30, 0x35	; 53
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	80 81       	ld	r24, Z
    321e:	48 2f       	mov	r20, r24
    3220:	8c 81       	ldd	r24, Y+4	; 0x04
    3222:	28 2f       	mov	r18, r24
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	02 2e       	mov	r0, r18
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <DIO_u8SetPinValue+0x214>
    322e:	88 0f       	add	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	0a 94       	dec	r0
    3234:	e2 f7       	brpl	.-8      	; 0x322e <DIO_u8SetPinValue+0x210>
    3236:	80 95       	com	r24
    3238:	84 23       	and	r24, r20
    323a:	8c 93       	st	X, r24
    323c:	17 c0       	rjmp	.+46     	; 0x326c <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    323e:	a2 e3       	ldi	r26, 0x32	; 50
    3240:	b0 e0       	ldi	r27, 0x00	; 0
    3242:	e2 e3       	ldi	r30, 0x32	; 50
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	80 81       	ld	r24, Z
    3248:	48 2f       	mov	r20, r24
    324a:	8c 81       	ldd	r24, Y+4	; 0x04
    324c:	28 2f       	mov	r18, r24
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	02 2e       	mov	r0, r18
    3256:	02 c0       	rjmp	.+4      	; 0x325c <DIO_u8SetPinValue+0x23e>
    3258:	88 0f       	add	r24, r24
    325a:	99 1f       	adc	r25, r25
    325c:	0a 94       	dec	r0
    325e:	e2 f7       	brpl	.-8      	; 0x3258 <DIO_u8SetPinValue+0x23a>
    3260:	84 2b       	or	r24, r20
    3262:	8c 93       	st	X, r24
    3264:	03 c0       	rjmp	.+6      	; 0x326c <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    3266:	1a 82       	std	Y+2, r1	; 0x02
    3268:	01 c0       	rjmp	.+2      	; 0x326c <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    326a:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    326c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    326e:	2f 96       	adiw	r28, 0x0f	; 15
    3270:	0f b6       	in	r0, 0x3f	; 63
    3272:	f8 94       	cli
    3274:	de bf       	out	0x3e, r29	; 62
    3276:	0f be       	out	0x3f, r0	; 63
    3278:	cd bf       	out	0x3d, r28	; 61
    327a:	cf 91       	pop	r28
    327c:	df 91       	pop	r29
    327e:	08 95       	ret

00003280 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    3280:	df 93       	push	r29
    3282:	cf 93       	push	r28
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	28 97       	sbiw	r28, 0x08	; 8
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	f8 94       	cli
    328e:	de bf       	out	0x3e, r29	; 62
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	cd bf       	out	0x3d, r28	; 61
    3294:	8b 83       	std	Y+3, r24	; 0x03
    3296:	6c 83       	std	Y+4, r22	; 0x04
    3298:	5e 83       	std	Y+6, r21	; 0x06
    329a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    32a0:	8b 81       	ldd	r24, Y+3	; 0x03
    32a2:	84 30       	cpi	r24, 0x04	; 4
    32a4:	08 f0       	brcs	.+2      	; 0x32a8 <DIO_u8GetPinValue+0x28>
    32a6:	9f c0       	rjmp	.+318    	; 0x33e6 <DIO_u8GetPinValue+0x166>
    32a8:	8c 81       	ldd	r24, Y+4	; 0x04
    32aa:	88 30       	cpi	r24, 0x08	; 8
    32ac:	08 f0       	brcs	.+2      	; 0x32b0 <DIO_u8GetPinValue+0x30>
    32ae:	9b c0       	rjmp	.+310    	; 0x33e6 <DIO_u8GetPinValue+0x166>
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	09 f4       	brne	.+2      	; 0x32ba <DIO_u8GetPinValue+0x3a>
    32b8:	96 c0       	rjmp	.+300    	; 0x33e6 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    32ba:	8b 81       	ldd	r24, Y+3	; 0x03
    32bc:	28 2f       	mov	r18, r24
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	38 87       	std	Y+8, r19	; 0x08
    32c2:	2f 83       	std	Y+7, r18	; 0x07
    32c4:	4f 81       	ldd	r20, Y+7	; 0x07
    32c6:	58 85       	ldd	r21, Y+8	; 0x08
    32c8:	41 30       	cpi	r20, 0x01	; 1
    32ca:	51 05       	cpc	r21, r1
    32cc:	a9 f1       	breq	.+106    	; 0x3338 <DIO_u8GetPinValue+0xb8>
    32ce:	8f 81       	ldd	r24, Y+7	; 0x07
    32d0:	98 85       	ldd	r25, Y+8	; 0x08
    32d2:	82 30       	cpi	r24, 0x02	; 2
    32d4:	91 05       	cpc	r25, r1
    32d6:	34 f4       	brge	.+12     	; 0x32e4 <DIO_u8GetPinValue+0x64>
    32d8:	2f 81       	ldd	r18, Y+7	; 0x07
    32da:	38 85       	ldd	r19, Y+8	; 0x08
    32dc:	21 15       	cp	r18, r1
    32de:	31 05       	cpc	r19, r1
    32e0:	71 f0       	breq	.+28     	; 0x32fe <DIO_u8GetPinValue+0x7e>
    32e2:	82 c0       	rjmp	.+260    	; 0x33e8 <DIO_u8GetPinValue+0x168>
    32e4:	4f 81       	ldd	r20, Y+7	; 0x07
    32e6:	58 85       	ldd	r21, Y+8	; 0x08
    32e8:	42 30       	cpi	r20, 0x02	; 2
    32ea:	51 05       	cpc	r21, r1
    32ec:	09 f4       	brne	.+2      	; 0x32f0 <DIO_u8GetPinValue+0x70>
    32ee:	41 c0       	rjmp	.+130    	; 0x3372 <DIO_u8GetPinValue+0xf2>
    32f0:	8f 81       	ldd	r24, Y+7	; 0x07
    32f2:	98 85       	ldd	r25, Y+8	; 0x08
    32f4:	83 30       	cpi	r24, 0x03	; 3
    32f6:	91 05       	cpc	r25, r1
    32f8:	09 f4       	brne	.+2      	; 0x32fc <DIO_u8GetPinValue+0x7c>
    32fa:	58 c0       	rjmp	.+176    	; 0x33ac <DIO_u8GetPinValue+0x12c>
    32fc:	75 c0       	rjmp	.+234    	; 0x33e8 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    32fe:	e9 e3       	ldi	r30, 0x39	; 57
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
    3304:	28 2f       	mov	r18, r24
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	8c 81       	ldd	r24, Y+4	; 0x04
    330a:	88 2f       	mov	r24, r24
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	a9 01       	movw	r20, r18
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <DIO_u8GetPinValue+0x96>
    3312:	55 95       	asr	r21
    3314:	47 95       	ror	r20
    3316:	8a 95       	dec	r24
    3318:	e2 f7       	brpl	.-8      	; 0x3312 <DIO_u8GetPinValue+0x92>
    331a:	ca 01       	movw	r24, r20
    331c:	81 70       	andi	r24, 0x01	; 1
    331e:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	88 23       	and	r24, r24
    3324:	21 f4       	brne	.+8      	; 0x332e <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    3326:	ed 81       	ldd	r30, Y+5	; 0x05
    3328:	fe 81       	ldd	r31, Y+6	; 0x06
    332a:	10 82       	st	Z, r1
    332c:	5d c0       	rjmp	.+186    	; 0x33e8 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    332e:	ed 81       	ldd	r30, Y+5	; 0x05
    3330:	fe 81       	ldd	r31, Y+6	; 0x06
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	80 83       	st	Z, r24
    3336:	58 c0       	rjmp	.+176    	; 0x33e8 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    3338:	e6 e3       	ldi	r30, 0x36	; 54
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	80 81       	ld	r24, Z
    333e:	28 2f       	mov	r18, r24
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	8c 81       	ldd	r24, Y+4	; 0x04
    3344:	88 2f       	mov	r24, r24
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	a9 01       	movw	r20, r18
    334a:	02 c0       	rjmp	.+4      	; 0x3350 <DIO_u8GetPinValue+0xd0>
    334c:	55 95       	asr	r21
    334e:	47 95       	ror	r20
    3350:	8a 95       	dec	r24
    3352:	e2 f7       	brpl	.-8      	; 0x334c <DIO_u8GetPinValue+0xcc>
    3354:	ca 01       	movw	r24, r20
    3356:	81 70       	andi	r24, 0x01	; 1
    3358:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    335a:	89 81       	ldd	r24, Y+1	; 0x01
    335c:	88 23       	and	r24, r24
    335e:	21 f4       	brne	.+8      	; 0x3368 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    3360:	ed 81       	ldd	r30, Y+5	; 0x05
    3362:	fe 81       	ldd	r31, Y+6	; 0x06
    3364:	10 82       	st	Z, r1
    3366:	40 c0       	rjmp	.+128    	; 0x33e8 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    3368:	ed 81       	ldd	r30, Y+5	; 0x05
    336a:	fe 81       	ldd	r31, Y+6	; 0x06
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	80 83       	st	Z, r24
    3370:	3b c0       	rjmp	.+118    	; 0x33e8 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    3372:	e3 e3       	ldi	r30, 0x33	; 51
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	28 2f       	mov	r18, r24
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	8c 81       	ldd	r24, Y+4	; 0x04
    337e:	88 2f       	mov	r24, r24
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	a9 01       	movw	r20, r18
    3384:	02 c0       	rjmp	.+4      	; 0x338a <DIO_u8GetPinValue+0x10a>
    3386:	55 95       	asr	r21
    3388:	47 95       	ror	r20
    338a:	8a 95       	dec	r24
    338c:	e2 f7       	brpl	.-8      	; 0x3386 <DIO_u8GetPinValue+0x106>
    338e:	ca 01       	movw	r24, r20
    3390:	81 70       	andi	r24, 0x01	; 1
    3392:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	88 23       	and	r24, r24
    3398:	21 f4       	brne	.+8      	; 0x33a2 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    339a:	ed 81       	ldd	r30, Y+5	; 0x05
    339c:	fe 81       	ldd	r31, Y+6	; 0x06
    339e:	10 82       	st	Z, r1
    33a0:	23 c0       	rjmp	.+70     	; 0x33e8 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    33a2:	ed 81       	ldd	r30, Y+5	; 0x05
    33a4:	fe 81       	ldd	r31, Y+6	; 0x06
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	80 83       	st	Z, r24
    33aa:	1e c0       	rjmp	.+60     	; 0x33e8 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    33ac:	e0 e3       	ldi	r30, 0x30	; 48
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	80 81       	ld	r24, Z
    33b2:	28 2f       	mov	r18, r24
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	8c 81       	ldd	r24, Y+4	; 0x04
    33b8:	88 2f       	mov	r24, r24
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	a9 01       	movw	r20, r18
    33be:	02 c0       	rjmp	.+4      	; 0x33c4 <DIO_u8GetPinValue+0x144>
    33c0:	55 95       	asr	r21
    33c2:	47 95       	ror	r20
    33c4:	8a 95       	dec	r24
    33c6:	e2 f7       	brpl	.-8      	; 0x33c0 <DIO_u8GetPinValue+0x140>
    33c8:	ca 01       	movw	r24, r20
    33ca:	81 70       	andi	r24, 0x01	; 1
    33cc:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    33ce:	89 81       	ldd	r24, Y+1	; 0x01
    33d0:	88 23       	and	r24, r24
    33d2:	21 f4       	brne	.+8      	; 0x33dc <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    33d4:	ed 81       	ldd	r30, Y+5	; 0x05
    33d6:	fe 81       	ldd	r31, Y+6	; 0x06
    33d8:	10 82       	st	Z, r1
    33da:	06 c0       	rjmp	.+12     	; 0x33e8 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    33dc:	ed 81       	ldd	r30, Y+5	; 0x05
    33de:	fe 81       	ldd	r31, Y+6	; 0x06
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	80 83       	st	Z, r24
    33e4:	01 c0       	rjmp	.+2      	; 0x33e8 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    33e6:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    33ea:	28 96       	adiw	r28, 0x08	; 8
    33ec:	0f b6       	in	r0, 0x3f	; 63
    33ee:	f8 94       	cli
    33f0:	de bf       	out	0x3e, r29	; 62
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	cd bf       	out	0x3d, r28	; 61
    33f6:	cf 91       	pop	r28
    33f8:	df 91       	pop	r29
    33fa:	08 95       	ret

000033fc <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    33fc:	df 93       	push	r29
    33fe:	cf 93       	push	r28
    3400:	00 d0       	rcall	.+0      	; 0x3402 <DIO_getPinValueWithoutPointer+0x6>
    3402:	00 d0       	rcall	.+0      	; 0x3404 <DIO_getPinValueWithoutPointer+0x8>
    3404:	0f 92       	push	r0
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	8a 83       	std	Y+2, r24	; 0x02
    340c:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    340e:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3410:	8b 81       	ldd	r24, Y+3	; 0x03
    3412:	88 30       	cpi	r24, 0x08	; 8
    3414:	08 f0       	brcs	.+2      	; 0x3418 <DIO_getPinValueWithoutPointer+0x1c>
    3416:	6b c0       	rjmp	.+214    	; 0x34ee <DIO_getPinValueWithoutPointer+0xf2>
    3418:	8a 81       	ldd	r24, Y+2	; 0x02
    341a:	84 30       	cpi	r24, 0x04	; 4
    341c:	08 f0       	brcs	.+2      	; 0x3420 <DIO_getPinValueWithoutPointer+0x24>
    341e:	67 c0       	rjmp	.+206    	; 0x34ee <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    3420:	8a 81       	ldd	r24, Y+2	; 0x02
    3422:	28 2f       	mov	r18, r24
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	3d 83       	std	Y+5, r19	; 0x05
    3428:	2c 83       	std	Y+4, r18	; 0x04
    342a:	4c 81       	ldd	r20, Y+4	; 0x04
    342c:	5d 81       	ldd	r21, Y+5	; 0x05
    342e:	41 30       	cpi	r20, 0x01	; 1
    3430:	51 05       	cpc	r21, r1
    3432:	41 f1       	breq	.+80     	; 0x3484 <DIO_getPinValueWithoutPointer+0x88>
    3434:	8c 81       	ldd	r24, Y+4	; 0x04
    3436:	9d 81       	ldd	r25, Y+5	; 0x05
    3438:	82 30       	cpi	r24, 0x02	; 2
    343a:	91 05       	cpc	r25, r1
    343c:	34 f4       	brge	.+12     	; 0x344a <DIO_getPinValueWithoutPointer+0x4e>
    343e:	2c 81       	ldd	r18, Y+4	; 0x04
    3440:	3d 81       	ldd	r19, Y+5	; 0x05
    3442:	21 15       	cp	r18, r1
    3444:	31 05       	cpc	r19, r1
    3446:	61 f0       	breq	.+24     	; 0x3460 <DIO_getPinValueWithoutPointer+0x64>
    3448:	52 c0       	rjmp	.+164    	; 0x34ee <DIO_getPinValueWithoutPointer+0xf2>
    344a:	4c 81       	ldd	r20, Y+4	; 0x04
    344c:	5d 81       	ldd	r21, Y+5	; 0x05
    344e:	42 30       	cpi	r20, 0x02	; 2
    3450:	51 05       	cpc	r21, r1
    3452:	51 f1       	breq	.+84     	; 0x34a8 <DIO_getPinValueWithoutPointer+0xac>
    3454:	8c 81       	ldd	r24, Y+4	; 0x04
    3456:	9d 81       	ldd	r25, Y+5	; 0x05
    3458:	83 30       	cpi	r24, 0x03	; 3
    345a:	91 05       	cpc	r25, r1
    345c:	b9 f1       	breq	.+110    	; 0x34cc <DIO_getPinValueWithoutPointer+0xd0>
    345e:	47 c0       	rjmp	.+142    	; 0x34ee <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    3460:	e9 e3       	ldi	r30, 0x39	; 57
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	80 81       	ld	r24, Z
    3466:	28 2f       	mov	r18, r24
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
    346c:	88 2f       	mov	r24, r24
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	a9 01       	movw	r20, r18
    3472:	02 c0       	rjmp	.+4      	; 0x3478 <DIO_getPinValueWithoutPointer+0x7c>
    3474:	55 95       	asr	r21
    3476:	47 95       	ror	r20
    3478:	8a 95       	dec	r24
    347a:	e2 f7       	brpl	.-8      	; 0x3474 <DIO_getPinValueWithoutPointer+0x78>
    347c:	ca 01       	movw	r24, r20
    347e:	81 70       	andi	r24, 0x01	; 1
    3480:	89 83       	std	Y+1, r24	; 0x01
    3482:	35 c0       	rjmp	.+106    	; 0x34ee <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    3484:	e6 e3       	ldi	r30, 0x36	; 54
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	28 2f       	mov	r18, r24
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	8b 81       	ldd	r24, Y+3	; 0x03
    3490:	88 2f       	mov	r24, r24
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	a9 01       	movw	r20, r18
    3496:	02 c0       	rjmp	.+4      	; 0x349c <DIO_getPinValueWithoutPointer+0xa0>
    3498:	55 95       	asr	r21
    349a:	47 95       	ror	r20
    349c:	8a 95       	dec	r24
    349e:	e2 f7       	brpl	.-8      	; 0x3498 <DIO_getPinValueWithoutPointer+0x9c>
    34a0:	ca 01       	movw	r24, r20
    34a2:	81 70       	andi	r24, 0x01	; 1
    34a4:	89 83       	std	Y+1, r24	; 0x01
    34a6:	23 c0       	rjmp	.+70     	; 0x34ee <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    34a8:	e3 e3       	ldi	r30, 0x33	; 51
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 81       	ld	r24, Z
    34ae:	28 2f       	mov	r18, r24
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	8b 81       	ldd	r24, Y+3	; 0x03
    34b4:	88 2f       	mov	r24, r24
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	a9 01       	movw	r20, r18
    34ba:	02 c0       	rjmp	.+4      	; 0x34c0 <DIO_getPinValueWithoutPointer+0xc4>
    34bc:	55 95       	asr	r21
    34be:	47 95       	ror	r20
    34c0:	8a 95       	dec	r24
    34c2:	e2 f7       	brpl	.-8      	; 0x34bc <DIO_getPinValueWithoutPointer+0xc0>
    34c4:	ca 01       	movw	r24, r20
    34c6:	81 70       	andi	r24, 0x01	; 1
    34c8:	89 83       	std	Y+1, r24	; 0x01
    34ca:	11 c0       	rjmp	.+34     	; 0x34ee <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    34cc:	e0 e3       	ldi	r30, 0x30	; 48
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	28 2f       	mov	r18, r24
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	8b 81       	ldd	r24, Y+3	; 0x03
    34d8:	88 2f       	mov	r24, r24
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	a9 01       	movw	r20, r18
    34de:	02 c0       	rjmp	.+4      	; 0x34e4 <DIO_getPinValueWithoutPointer+0xe8>
    34e0:	55 95       	asr	r21
    34e2:	47 95       	ror	r20
    34e4:	8a 95       	dec	r24
    34e6:	e2 f7       	brpl	.-8      	; 0x34e0 <DIO_getPinValueWithoutPointer+0xe4>
    34e8:	ca 01       	movw	r24, r20
    34ea:	81 70       	andi	r24, 0x01	; 1
    34ec:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    34f0:	0f 90       	pop	r0
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	0f 90       	pop	r0
    34fa:	cf 91       	pop	r28
    34fc:	df 91       	pop	r29
    34fe:	08 95       	ret

00003500 <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    3500:	df 93       	push	r29
    3502:	cf 93       	push	r28
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    3508:	2d 97       	sbiw	r28, 0x0d	; 13
    350a:	0f b6       	in	r0, 0x3f	; 63
    350c:	f8 94       	cli
    350e:	de bf       	out	0x3e, r29	; 62
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	cd bf       	out	0x3d, r28	; 61
    3514:	89 83       	std	Y+1, r24	; 0x01
    3516:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    3518:	89 81       	ldd	r24, Y+1	; 0x01
    351a:	28 2f       	mov	r18, r24
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	3c 87       	std	Y+12, r19	; 0x0c
    3520:	2b 87       	std	Y+11, r18	; 0x0b
    3522:	8b 85       	ldd	r24, Y+11	; 0x0b
    3524:	9c 85       	ldd	r25, Y+12	; 0x0c
    3526:	81 30       	cpi	r24, 0x01	; 1
    3528:	91 05       	cpc	r25, r1
    352a:	71 f1       	breq	.+92     	; 0x3588 <DIO_u8SetPortDirection+0x88>
    352c:	2b 85       	ldd	r18, Y+11	; 0x0b
    352e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3530:	22 30       	cpi	r18, 0x02	; 2
    3532:	31 05       	cpc	r19, r1
    3534:	2c f4       	brge	.+10     	; 0x3540 <DIO_u8SetPortDirection+0x40>
    3536:	8b 85       	ldd	r24, Y+11	; 0x0b
    3538:	9c 85       	ldd	r25, Y+12	; 0x0c
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	69 f0       	breq	.+26     	; 0x3558 <DIO_u8SetPortDirection+0x58>
    353e:	6b c0       	rjmp	.+214    	; 0x3616 <DIO_u8SetPortDirection+0x116>
    3540:	2b 85       	ldd	r18, Y+11	; 0x0b
    3542:	3c 85       	ldd	r19, Y+12	; 0x0c
    3544:	22 30       	cpi	r18, 0x02	; 2
    3546:	31 05       	cpc	r19, r1
    3548:	b9 f1       	breq	.+110    	; 0x35b8 <DIO_u8SetPortDirection+0xb8>
    354a:	8b 85       	ldd	r24, Y+11	; 0x0b
    354c:	9c 85       	ldd	r25, Y+12	; 0x0c
    354e:	83 30       	cpi	r24, 0x03	; 3
    3550:	91 05       	cpc	r25, r1
    3552:	09 f4       	brne	.+2      	; 0x3556 <DIO_u8SetPortDirection+0x56>
    3554:	49 c0       	rjmp	.+146    	; 0x35e8 <DIO_u8SetPortDirection+0xe8>
    3556:	5f c0       	rjmp	.+190    	; 0x3616 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    3558:	8a 81       	ldd	r24, Y+2	; 0x02
    355a:	28 2f       	mov	r18, r24
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	3a 87       	std	Y+10, r19	; 0x0a
    3560:	29 87       	std	Y+9, r18	; 0x09
    3562:	89 85       	ldd	r24, Y+9	; 0x09
    3564:	9a 85       	ldd	r25, Y+10	; 0x0a
    3566:	00 97       	sbiw	r24, 0x00	; 0
    3568:	31 f0       	breq	.+12     	; 0x3576 <DIO_u8SetPortDirection+0x76>
    356a:	29 85       	ldd	r18, Y+9	; 0x09
    356c:	3a 85       	ldd	r19, Y+10	; 0x0a
    356e:	21 30       	cpi	r18, 0x01	; 1
    3570:	31 05       	cpc	r19, r1
    3572:	29 f0       	breq	.+10     	; 0x357e <DIO_u8SetPortDirection+0x7e>
    3574:	50 c0       	rjmp	.+160    	; 0x3616 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    3576:	ea e3       	ldi	r30, 0x3A	; 58
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	10 82       	st	Z, r1
    357c:	4c c0       	rjmp	.+152    	; 0x3616 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    357e:	ea e3       	ldi	r30, 0x3A	; 58
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	8f ef       	ldi	r24, 0xFF	; 255
    3584:	80 83       	st	Z, r24
    3586:	47 c0       	rjmp	.+142    	; 0x3616 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    3588:	8a 81       	ldd	r24, Y+2	; 0x02
    358a:	28 2f       	mov	r18, r24
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	38 87       	std	Y+8, r19	; 0x08
    3590:	2f 83       	std	Y+7, r18	; 0x07
    3592:	8f 81       	ldd	r24, Y+7	; 0x07
    3594:	98 85       	ldd	r25, Y+8	; 0x08
    3596:	00 97       	sbiw	r24, 0x00	; 0
    3598:	31 f0       	breq	.+12     	; 0x35a6 <DIO_u8SetPortDirection+0xa6>
    359a:	2f 81       	ldd	r18, Y+7	; 0x07
    359c:	38 85       	ldd	r19, Y+8	; 0x08
    359e:	21 30       	cpi	r18, 0x01	; 1
    35a0:	31 05       	cpc	r19, r1
    35a2:	29 f0       	breq	.+10     	; 0x35ae <DIO_u8SetPortDirection+0xae>
    35a4:	38 c0       	rjmp	.+112    	; 0x3616 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    35a6:	e7 e3       	ldi	r30, 0x37	; 55
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	10 82       	st	Z, r1
    35ac:	34 c0       	rjmp	.+104    	; 0x3616 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    35ae:	e7 e3       	ldi	r30, 0x37	; 55
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	8f ef       	ldi	r24, 0xFF	; 255
    35b4:	80 83       	st	Z, r24
    35b6:	2f c0       	rjmp	.+94     	; 0x3616 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    35b8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	3e 83       	std	Y+6, r19	; 0x06
    35c0:	2d 83       	std	Y+5, r18	; 0x05
    35c2:	8d 81       	ldd	r24, Y+5	; 0x05
    35c4:	9e 81       	ldd	r25, Y+6	; 0x06
    35c6:	00 97       	sbiw	r24, 0x00	; 0
    35c8:	31 f0       	breq	.+12     	; 0x35d6 <DIO_u8SetPortDirection+0xd6>
    35ca:	2d 81       	ldd	r18, Y+5	; 0x05
    35cc:	3e 81       	ldd	r19, Y+6	; 0x06
    35ce:	21 30       	cpi	r18, 0x01	; 1
    35d0:	31 05       	cpc	r19, r1
    35d2:	29 f0       	breq	.+10     	; 0x35de <DIO_u8SetPortDirection+0xde>
    35d4:	20 c0       	rjmp	.+64     	; 0x3616 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    35d6:	e4 e3       	ldi	r30, 0x34	; 52
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	10 82       	st	Z, r1
    35dc:	1c c0       	rjmp	.+56     	; 0x3616 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    35de:	e4 e3       	ldi	r30, 0x34	; 52
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	8f ef       	ldi	r24, 0xFF	; 255
    35e4:	80 83       	st	Z, r24
    35e6:	17 c0       	rjmp	.+46     	; 0x3616 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    35e8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ea:	28 2f       	mov	r18, r24
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	3c 83       	std	Y+4, r19	; 0x04
    35f0:	2b 83       	std	Y+3, r18	; 0x03
    35f2:	8b 81       	ldd	r24, Y+3	; 0x03
    35f4:	9c 81       	ldd	r25, Y+4	; 0x04
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	31 f0       	breq	.+12     	; 0x3606 <DIO_u8SetPortDirection+0x106>
    35fa:	2b 81       	ldd	r18, Y+3	; 0x03
    35fc:	3c 81       	ldd	r19, Y+4	; 0x04
    35fe:	21 30       	cpi	r18, 0x01	; 1
    3600:	31 05       	cpc	r19, r1
    3602:	29 f0       	breq	.+10     	; 0x360e <DIO_u8SetPortDirection+0x10e>
    3604:	08 c0       	rjmp	.+16     	; 0x3616 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    3606:	e1 e3       	ldi	r30, 0x31	; 49
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	10 82       	st	Z, r1
    360c:	04 c0       	rjmp	.+8      	; 0x3616 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    360e:	e1 e3       	ldi	r30, 0x31	; 49
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	8f ef       	ldi	r24, 0xFF	; 255
    3614:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    3616:	2d 96       	adiw	r28, 0x0d	; 13
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	f8 94       	cli
    361c:	de bf       	out	0x3e, r29	; 62
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	cf 91       	pop	r28
    3624:	df 91       	pop	r29
    3626:	08 95       	ret

00003628 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    3628:	df 93       	push	r29
    362a:	cf 93       	push	r28
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	2d 97       	sbiw	r28, 0x0d	; 13
    3632:	0f b6       	in	r0, 0x3f	; 63
    3634:	f8 94       	cli
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	cd bf       	out	0x3d, r28	; 61
    363c:	8a 83       	std	Y+2, r24	; 0x02
    363e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    3644:	8a 81       	ldd	r24, Y+2	; 0x02
    3646:	84 30       	cpi	r24, 0x04	; 4
    3648:	08 f0       	brcs	.+2      	; 0x364c <DIO_u8SetPortValue+0x24>
    364a:	80 c0       	rjmp	.+256    	; 0x374c <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    364c:	8a 81       	ldd	r24, Y+2	; 0x02
    364e:	28 2f       	mov	r18, r24
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	3d 87       	std	Y+13, r19	; 0x0d
    3654:	2c 87       	std	Y+12, r18	; 0x0c
    3656:	8c 85       	ldd	r24, Y+12	; 0x0c
    3658:	9d 85       	ldd	r25, Y+13	; 0x0d
    365a:	81 30       	cpi	r24, 0x01	; 1
    365c:	91 05       	cpc	r25, r1
    365e:	71 f1       	breq	.+92     	; 0x36bc <DIO_u8SetPortValue+0x94>
    3660:	2c 85       	ldd	r18, Y+12	; 0x0c
    3662:	3d 85       	ldd	r19, Y+13	; 0x0d
    3664:	22 30       	cpi	r18, 0x02	; 2
    3666:	31 05       	cpc	r19, r1
    3668:	2c f4       	brge	.+10     	; 0x3674 <DIO_u8SetPortValue+0x4c>
    366a:	8c 85       	ldd	r24, Y+12	; 0x0c
    366c:	9d 85       	ldd	r25, Y+13	; 0x0d
    366e:	00 97       	sbiw	r24, 0x00	; 0
    3670:	69 f0       	breq	.+26     	; 0x368c <DIO_u8SetPortValue+0x64>
    3672:	6d c0       	rjmp	.+218    	; 0x374e <DIO_u8SetPortValue+0x126>
    3674:	2c 85       	ldd	r18, Y+12	; 0x0c
    3676:	3d 85       	ldd	r19, Y+13	; 0x0d
    3678:	22 30       	cpi	r18, 0x02	; 2
    367a:	31 05       	cpc	r19, r1
    367c:	b9 f1       	breq	.+110    	; 0x36ec <DIO_u8SetPortValue+0xc4>
    367e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3680:	9d 85       	ldd	r25, Y+13	; 0x0d
    3682:	83 30       	cpi	r24, 0x03	; 3
    3684:	91 05       	cpc	r25, r1
    3686:	09 f4       	brne	.+2      	; 0x368a <DIO_u8SetPortValue+0x62>
    3688:	49 c0       	rjmp	.+146    	; 0x371c <DIO_u8SetPortValue+0xf4>
    368a:	61 c0       	rjmp	.+194    	; 0x374e <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
    368e:	28 2f       	mov	r18, r24
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	3b 87       	std	Y+11, r19	; 0x0b
    3694:	2a 87       	std	Y+10, r18	; 0x0a
    3696:	8a 85       	ldd	r24, Y+10	; 0x0a
    3698:	9b 85       	ldd	r25, Y+11	; 0x0b
    369a:	00 97       	sbiw	r24, 0x00	; 0
    369c:	31 f0       	breq	.+12     	; 0x36aa <DIO_u8SetPortValue+0x82>
    369e:	2a 85       	ldd	r18, Y+10	; 0x0a
    36a0:	3b 85       	ldd	r19, Y+11	; 0x0b
    36a2:	21 30       	cpi	r18, 0x01	; 1
    36a4:	31 05       	cpc	r19, r1
    36a6:	29 f0       	breq	.+10     	; 0x36b2 <DIO_u8SetPortValue+0x8a>
    36a8:	52 c0       	rjmp	.+164    	; 0x374e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    36aa:	eb e3       	ldi	r30, 0x3B	; 59
    36ac:	f0 e0       	ldi	r31, 0x00	; 0
    36ae:	10 82       	st	Z, r1
    36b0:	4e c0       	rjmp	.+156    	; 0x374e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    36b2:	eb e3       	ldi	r30, 0x3B	; 59
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	8f ef       	ldi	r24, 0xFF	; 255
    36b8:	80 83       	st	Z, r24
    36ba:	49 c0       	rjmp	.+146    	; 0x374e <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    36bc:	8b 81       	ldd	r24, Y+3	; 0x03
    36be:	28 2f       	mov	r18, r24
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	39 87       	std	Y+9, r19	; 0x09
    36c4:	28 87       	std	Y+8, r18	; 0x08
    36c6:	88 85       	ldd	r24, Y+8	; 0x08
    36c8:	99 85       	ldd	r25, Y+9	; 0x09
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	31 f0       	breq	.+12     	; 0x36da <DIO_u8SetPortValue+0xb2>
    36ce:	28 85       	ldd	r18, Y+8	; 0x08
    36d0:	39 85       	ldd	r19, Y+9	; 0x09
    36d2:	21 30       	cpi	r18, 0x01	; 1
    36d4:	31 05       	cpc	r19, r1
    36d6:	29 f0       	breq	.+10     	; 0x36e2 <DIO_u8SetPortValue+0xba>
    36d8:	3a c0       	rjmp	.+116    	; 0x374e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    36da:	e8 e3       	ldi	r30, 0x38	; 56
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	10 82       	st	Z, r1
    36e0:	36 c0       	rjmp	.+108    	; 0x374e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    36e2:	e8 e3       	ldi	r30, 0x38	; 56
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	8f ef       	ldi	r24, 0xFF	; 255
    36e8:	80 83       	st	Z, r24
    36ea:	31 c0       	rjmp	.+98     	; 0x374e <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    36ec:	8b 81       	ldd	r24, Y+3	; 0x03
    36ee:	28 2f       	mov	r18, r24
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	3f 83       	std	Y+7, r19	; 0x07
    36f4:	2e 83       	std	Y+6, r18	; 0x06
    36f6:	8e 81       	ldd	r24, Y+6	; 0x06
    36f8:	9f 81       	ldd	r25, Y+7	; 0x07
    36fa:	00 97       	sbiw	r24, 0x00	; 0
    36fc:	31 f0       	breq	.+12     	; 0x370a <DIO_u8SetPortValue+0xe2>
    36fe:	2e 81       	ldd	r18, Y+6	; 0x06
    3700:	3f 81       	ldd	r19, Y+7	; 0x07
    3702:	21 30       	cpi	r18, 0x01	; 1
    3704:	31 05       	cpc	r19, r1
    3706:	29 f0       	breq	.+10     	; 0x3712 <DIO_u8SetPortValue+0xea>
    3708:	22 c0       	rjmp	.+68     	; 0x374e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    370a:	e5 e3       	ldi	r30, 0x35	; 53
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	10 82       	st	Z, r1
    3710:	1e c0       	rjmp	.+60     	; 0x374e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    3712:	e5 e3       	ldi	r30, 0x35	; 53
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	8f ef       	ldi	r24, 0xFF	; 255
    3718:	80 83       	st	Z, r24
    371a:	19 c0       	rjmp	.+50     	; 0x374e <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    371c:	8b 81       	ldd	r24, Y+3	; 0x03
    371e:	28 2f       	mov	r18, r24
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	3d 83       	std	Y+5, r19	; 0x05
    3724:	2c 83       	std	Y+4, r18	; 0x04
    3726:	8c 81       	ldd	r24, Y+4	; 0x04
    3728:	9d 81       	ldd	r25, Y+5	; 0x05
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	31 f0       	breq	.+12     	; 0x373a <DIO_u8SetPortValue+0x112>
    372e:	2c 81       	ldd	r18, Y+4	; 0x04
    3730:	3d 81       	ldd	r19, Y+5	; 0x05
    3732:	21 30       	cpi	r18, 0x01	; 1
    3734:	31 05       	cpc	r19, r1
    3736:	29 f0       	breq	.+10     	; 0x3742 <DIO_u8SetPortValue+0x11a>
    3738:	0a c0       	rjmp	.+20     	; 0x374e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    373a:	e2 e3       	ldi	r30, 0x32	; 50
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	10 82       	st	Z, r1
    3740:	06 c0       	rjmp	.+12     	; 0x374e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    3742:	e2 e3       	ldi	r30, 0x32	; 50
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	8f ef       	ldi	r24, 0xFF	; 255
    3748:	80 83       	st	Z, r24
    374a:	01 c0       	rjmp	.+2      	; 0x374e <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    374c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    374e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3750:	2d 96       	adiw	r28, 0x0d	; 13
    3752:	0f b6       	in	r0, 0x3f	; 63
    3754:	f8 94       	cli
    3756:	de bf       	out	0x3e, r29	; 62
    3758:	0f be       	out	0x3f, r0	; 63
    375a:	cd bf       	out	0x3d, r28	; 61
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	00 d0       	rcall	.+0      	; 0x3768 <DIO_u8GetPortValue+0x6>
    3768:	00 d0       	rcall	.+0      	; 0x376a <DIO_u8GetPortValue+0x8>
    376a:	00 d0       	rcall	.+0      	; 0x376c <DIO_u8GetPortValue+0xa>
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	8a 83       	std	Y+2, r24	; 0x02
    3772:	7c 83       	std	Y+4, r23	; 0x04
    3774:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    377a:	8a 81       	ldd	r24, Y+2	; 0x02
    377c:	84 30       	cpi	r24, 0x04	; 4
    377e:	08 f0       	brcs	.+2      	; 0x3782 <DIO_u8GetPortValue+0x20>
    3780:	3f c0       	rjmp	.+126    	; 0x3800 <DIO_u8GetPortValue+0x9e>
    3782:	8b 81       	ldd	r24, Y+3	; 0x03
    3784:	9c 81       	ldd	r25, Y+4	; 0x04
    3786:	00 97       	sbiw	r24, 0x00	; 0
    3788:	d9 f1       	breq	.+118    	; 0x3800 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    378a:	8a 81       	ldd	r24, Y+2	; 0x02
    378c:	28 2f       	mov	r18, r24
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	3e 83       	std	Y+6, r19	; 0x06
    3792:	2d 83       	std	Y+5, r18	; 0x05
    3794:	8d 81       	ldd	r24, Y+5	; 0x05
    3796:	9e 81       	ldd	r25, Y+6	; 0x06
    3798:	81 30       	cpi	r24, 0x01	; 1
    379a:	91 05       	cpc	r25, r1
    379c:	e1 f0       	breq	.+56     	; 0x37d6 <DIO_u8GetPortValue+0x74>
    379e:	2d 81       	ldd	r18, Y+5	; 0x05
    37a0:	3e 81       	ldd	r19, Y+6	; 0x06
    37a2:	22 30       	cpi	r18, 0x02	; 2
    37a4:	31 05       	cpc	r19, r1
    37a6:	2c f4       	brge	.+10     	; 0x37b2 <DIO_u8GetPortValue+0x50>
    37a8:	8d 81       	ldd	r24, Y+5	; 0x05
    37aa:	9e 81       	ldd	r25, Y+6	; 0x06
    37ac:	00 97       	sbiw	r24, 0x00	; 0
    37ae:	61 f0       	breq	.+24     	; 0x37c8 <DIO_u8GetPortValue+0x66>
    37b0:	28 c0       	rjmp	.+80     	; 0x3802 <DIO_u8GetPortValue+0xa0>
    37b2:	2d 81       	ldd	r18, Y+5	; 0x05
    37b4:	3e 81       	ldd	r19, Y+6	; 0x06
    37b6:	22 30       	cpi	r18, 0x02	; 2
    37b8:	31 05       	cpc	r19, r1
    37ba:	a1 f0       	breq	.+40     	; 0x37e4 <DIO_u8GetPortValue+0x82>
    37bc:	8d 81       	ldd	r24, Y+5	; 0x05
    37be:	9e 81       	ldd	r25, Y+6	; 0x06
    37c0:	83 30       	cpi	r24, 0x03	; 3
    37c2:	91 05       	cpc	r25, r1
    37c4:	b1 f0       	breq	.+44     	; 0x37f2 <DIO_u8GetPortValue+0x90>
    37c6:	1d c0       	rjmp	.+58     	; 0x3802 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    37c8:	e9 e3       	ldi	r30, 0x39	; 57
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	80 81       	ld	r24, Z
    37ce:	eb 81       	ldd	r30, Y+3	; 0x03
    37d0:	fc 81       	ldd	r31, Y+4	; 0x04
    37d2:	80 83       	st	Z, r24
    37d4:	16 c0       	rjmp	.+44     	; 0x3802 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    37d6:	e6 e3       	ldi	r30, 0x36	; 54
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	eb 81       	ldd	r30, Y+3	; 0x03
    37de:	fc 81       	ldd	r31, Y+4	; 0x04
    37e0:	80 83       	st	Z, r24
    37e2:	0f c0       	rjmp	.+30     	; 0x3802 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    37e4:	e3 e3       	ldi	r30, 0x33	; 51
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	eb 81       	ldd	r30, Y+3	; 0x03
    37ec:	fc 81       	ldd	r31, Y+4	; 0x04
    37ee:	80 83       	st	Z, r24
    37f0:	08 c0       	rjmp	.+16     	; 0x3802 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    37f2:	e0 e3       	ldi	r30, 0x30	; 48
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	80 81       	ld	r24, Z
    37f8:	eb 81       	ldd	r30, Y+3	; 0x03
    37fa:	fc 81       	ldd	r31, Y+4	; 0x04
    37fc:	80 83       	st	Z, r24
    37fe:	01 c0       	rjmp	.+2      	; 0x3802 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3800:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3802:	89 81       	ldd	r24, Y+1	; 0x01
}
    3804:	26 96       	adiw	r28, 0x06	; 6
    3806:	0f b6       	in	r0, 0x3f	; 63
    3808:	f8 94       	cli
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	cd bf       	out	0x3d, r28	; 61
    3810:	cf 91       	pop	r28
    3812:	df 91       	pop	r29
    3814:	08 95       	ret

00003816 <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    3816:	df 93       	push	r29
    3818:	cf 93       	push	r28
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    381e:	a7 e2       	ldi	r26, 0x27	; 39
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	e7 e2       	ldi	r30, 0x27	; 39
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	80 81       	ld	r24, Z
    3828:	8f 77       	andi	r24, 0x7F	; 127
    382a:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    382c:	a7 e2       	ldi	r26, 0x27	; 39
    382e:	b0 e0       	ldi	r27, 0x00	; 0
    3830:	e7 e2       	ldi	r30, 0x27	; 39
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	80 81       	ld	r24, Z
    3836:	80 64       	ori	r24, 0x40	; 64
    3838:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    383a:	a7 e2       	ldi	r26, 0x27	; 39
    383c:	b0 e0       	ldi	r27, 0x00	; 0
    383e:	e7 e2       	ldi	r30, 0x27	; 39
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	80 81       	ld	r24, Z
    3844:	8f 7d       	andi	r24, 0xDF	; 223
    3846:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    3848:	a6 e2       	ldi	r26, 0x26	; 38
    384a:	b0 e0       	ldi	r27, 0x00	; 0
    384c:	e6 e2       	ldi	r30, 0x26	; 38
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	80 81       	ld	r24, Z
    3852:	8f 7d       	andi	r24, 0xDF	; 223
    3854:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    3856:	a6 e2       	ldi	r26, 0x26	; 38
    3858:	b0 e0       	ldi	r27, 0x00	; 0
    385a:	e6 e2       	ldi	r30, 0x26	; 38
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	80 81       	ld	r24, Z
    3860:	84 60       	ori	r24, 0x04	; 4
    3862:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    3864:	a6 e2       	ldi	r26, 0x26	; 38
    3866:	b0 e0       	ldi	r27, 0x00	; 0
    3868:	e6 e2       	ldi	r30, 0x26	; 38
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	80 81       	ld	r24, Z
    386e:	82 60       	ori	r24, 0x02	; 2
    3870:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    3872:	a6 e2       	ldi	r26, 0x26	; 38
    3874:	b0 e0       	ldi	r27, 0x00	; 0
    3876:	e6 e2       	ldi	r30, 0x26	; 38
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	8e 7f       	andi	r24, 0xFE	; 254
    387e:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    3880:	a6 e2       	ldi	r26, 0x26	; 38
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	e6 e2       	ldi	r30, 0x26	; 38
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 81       	ld	r24, Z
    388a:	80 68       	ori	r24, 0x80	; 128
    388c:	8c 93       	st	X, r24

}
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	08 95       	ret

00003894 <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    3894:	df 93       	push	r29
    3896:	cf 93       	push	r28
    3898:	cd b7       	in	r28, 0x3d	; 61
    389a:	de b7       	in	r29, 0x3e	; 62
    389c:	28 97       	sbiw	r28, 0x08	; 8
    389e:	0f b6       	in	r0, 0x3f	; 63
    38a0:	f8 94       	cli
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	8e 83       	std	Y+6, r24	; 0x06
    38aa:	78 87       	std	Y+8, r23	; 0x08
    38ac:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    38b2:	19 82       	std	Y+1, r1	; 0x01
    38b4:	1a 82       	std	Y+2, r1	; 0x02
    38b6:	1b 82       	std	Y+3, r1	; 0x03
    38b8:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    38ba:	8e 81       	ldd	r24, Y+6	; 0x06
    38bc:	80 32       	cpi	r24, 0x20	; 32
    38be:	08 f0       	brcs	.+2      	; 0x38c2 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    38c0:	5b c0       	rjmp	.+182    	; 0x3978 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    38c2:	8f 81       	ldd	r24, Y+7	; 0x07
    38c4:	98 85       	ldd	r25, Y+8	; 0x08
    38c6:	00 97       	sbiw	r24, 0x00	; 0
    38c8:	09 f4       	brne	.+2      	; 0x38cc <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    38ca:	56 c0       	rjmp	.+172    	; 0x3978 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    38cc:	a7 e2       	ldi	r26, 0x27	; 39
    38ce:	b0 e0       	ldi	r27, 0x00	; 0
    38d0:	e7 e2       	ldi	r30, 0x27	; 39
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	80 81       	ld	r24, Z
    38d6:	80 7e       	andi	r24, 0xE0	; 224
    38d8:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    38da:	a7 e2       	ldi	r26, 0x27	; 39
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	e7 e2       	ldi	r30, 0x27	; 39
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	90 81       	ld	r25, Z
    38e4:	8e 81       	ldd	r24, Y+6	; 0x06
    38e6:	89 2b       	or	r24, r25
    38e8:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    38ea:	a6 e2       	ldi	r26, 0x26	; 38
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	e6 e2       	ldi	r30, 0x26	; 38
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	80 81       	ld	r24, Z
    38f4:	80 64       	ori	r24, 0x40	; 64
    38f6:	8c 93       	st	X, r24
    38f8:	0b c0       	rjmp	.+22     	; 0x3910 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    38fa:	89 81       	ldd	r24, Y+1	; 0x01
    38fc:	9a 81       	ldd	r25, Y+2	; 0x02
    38fe:	ab 81       	ldd	r26, Y+3	; 0x03
    3900:	bc 81       	ldd	r27, Y+4	; 0x04
    3902:	01 96       	adiw	r24, 0x01	; 1
    3904:	a1 1d       	adc	r26, r1
    3906:	b1 1d       	adc	r27, r1
    3908:	89 83       	std	Y+1, r24	; 0x01
    390a:	9a 83       	std	Y+2, r25	; 0x02
    390c:	ab 83       	std	Y+3, r26	; 0x03
    390e:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    3910:	e6 e2       	ldi	r30, 0x26	; 38
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	80 81       	ld	r24, Z
    3916:	82 95       	swap	r24
    3918:	8f 70       	andi	r24, 0x0F	; 15
    391a:	88 2f       	mov	r24, r24
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	81 70       	andi	r24, 0x01	; 1
    3920:	90 70       	andi	r25, 0x00	; 0
    3922:	00 97       	sbiw	r24, 0x00	; 0
    3924:	61 f4       	brne	.+24     	; 0x393e <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    3926:	89 81       	ldd	r24, Y+1	; 0x01
    3928:	9a 81       	ldd	r25, Y+2	; 0x02
    392a:	ab 81       	ldd	r26, Y+3	; 0x03
    392c:	bc 81       	ldd	r27, Y+4	; 0x04
    392e:	80 35       	cpi	r24, 0x50	; 80
    3930:	23 ec       	ldi	r18, 0xC3	; 195
    3932:	92 07       	cpc	r25, r18
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	a2 07       	cpc	r26, r18
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	b2 07       	cpc	r27, r18
    393c:	f0 f2       	brcs	.-68     	; 0x38fa <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    393e:	e6 e2       	ldi	r30, 0x26	; 38
    3940:	f0 e0       	ldi	r31, 0x00	; 0
    3942:	80 81       	ld	r24, Z
    3944:	82 95       	swap	r24
    3946:	8f 70       	andi	r24, 0x0F	; 15
    3948:	88 2f       	mov	r24, r24
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	81 70       	andi	r24, 0x01	; 1
    394e:	90 70       	andi	r25, 0x00	; 0
    3950:	88 23       	and	r24, r24
    3952:	81 f0       	breq	.+32     	; 0x3974 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    3954:	a6 e2       	ldi	r26, 0x26	; 38
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	e6 e2       	ldi	r30, 0x26	; 38
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	80 81       	ld	r24, Z
    395e:	80 61       	ori	r24, 0x10	; 16
    3960:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    3962:	e4 e2       	ldi	r30, 0x24	; 36
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	80 81       	ld	r24, Z
    3968:	91 81       	ldd	r25, Z+1	; 0x01
    396a:	ef 81       	ldd	r30, Y+7	; 0x07
    396c:	f8 85       	ldd	r31, Y+8	; 0x08
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	80 83       	st	Z, r24
    3972:	03 c0       	rjmp	.+6      	; 0x397a <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    3974:	1d 82       	std	Y+5, r1	; 0x05
    3976:	01 c0       	rjmp	.+2      	; 0x397a <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    3978:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    397a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    397c:	28 96       	adiw	r28, 0x08	; 8
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	de bf       	out	0x3e, r29	; 62
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	cf 91       	pop	r28
    398a:	df 91       	pop	r29
    398c:	08 95       	ret

0000398e <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    398e:	df 93       	push	r29
    3990:	cf 93       	push	r28
    3992:	00 d0       	rcall	.+0      	; 0x3994 <ADC_u8_Get_Digital_ValueAsynch+0x6>
    3994:	00 d0       	rcall	.+0      	; 0x3996 <ADC_u8_Get_Digital_ValueAsynch+0x8>
    3996:	cd b7       	in	r28, 0x3d	; 61
    3998:	de b7       	in	r29, 0x3e	; 62
    399a:	8a 83       	std	Y+2, r24	; 0x02
    399c:	7c 83       	std	Y+4, r23	; 0x04
    399e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    39a4:	8a 81       	ldd	r24, Y+2	; 0x02
    39a6:	80 32       	cpi	r24, 0x20	; 32
    39a8:	78 f5       	brcc	.+94     	; 0x3a08 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    39aa:	8b 81       	ldd	r24, Y+3	; 0x03
    39ac:	9c 81       	ldd	r25, Y+4	; 0x04
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	59 f1       	breq	.+86     	; 0x3a08 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    39b2:	80 91 52 02 	lds	r24, 0x0252
    39b6:	88 23       	and	r24, r24
    39b8:	39 f5       	brne	.+78     	; 0x3a08 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	80 93 52 02 	sts	0x0252, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    39c0:	8b 81       	ldd	r24, Y+3	; 0x03
    39c2:	9c 81       	ldd	r25, Y+4	; 0x04
    39c4:	90 93 51 02 	sts	0x0251, r25
    39c8:	80 93 50 02 	sts	0x0250, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    39cc:	a6 e2       	ldi	r26, 0x26	; 38
    39ce:	b0 e0       	ldi	r27, 0x00	; 0
    39d0:	e6 e2       	ldi	r30, 0x26	; 38
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	80 81       	ld	r24, Z
    39d6:	88 60       	ori	r24, 0x08	; 8
    39d8:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    39da:	a7 e2       	ldi	r26, 0x27	; 39
    39dc:	b0 e0       	ldi	r27, 0x00	; 0
    39de:	e7 e2       	ldi	r30, 0x27	; 39
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	80 81       	ld	r24, Z
    39e4:	80 7e       	andi	r24, 0xE0	; 224
    39e6:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    39e8:	a7 e2       	ldi	r26, 0x27	; 39
    39ea:	b0 e0       	ldi	r27, 0x00	; 0
    39ec:	e7 e2       	ldi	r30, 0x27	; 39
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	90 81       	ld	r25, Z
    39f2:	8a 81       	ldd	r24, Y+2	; 0x02
    39f4:	89 2b       	or	r24, r25
    39f6:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    39f8:	a6 e2       	ldi	r26, 0x26	; 38
    39fa:	b0 e0       	ldi	r27, 0x00	; 0
    39fc:	e6 e2       	ldi	r30, 0x26	; 38
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	80 81       	ld	r24, Z
    3a02:	80 64       	ori	r24, 0x40	; 64
    3a04:	8c 93       	st	X, r24
    3a06:	01 c0       	rjmp	.+2      	; 0x3a0a <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    3a08:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a0c:	0f 90       	pop	r0
    3a0e:	0f 90       	pop	r0
    3a10:	0f 90       	pop	r0
    3a12:	0f 90       	pop	r0
    3a14:	cf 91       	pop	r28
    3a16:	df 91       	pop	r29
    3a18:	08 95       	ret

00003a1a <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    3a1a:	df 93       	push	r29
    3a1c:	cf 93       	push	r28
    3a1e:	00 d0       	rcall	.+0      	; 0x3a20 <ADC_u8GetADCRegValue+0x6>
    3a20:	0f 92       	push	r0
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	9b 83       	std	Y+3, r25	; 0x03
    3a28:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    3a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a30:	9b 81       	ldd	r25, Y+3	; 0x03
    3a32:	00 97       	sbiw	r24, 0x00	; 0
    3a34:	39 f0       	breq	.+14     	; 0x3a44 <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    3a36:	e4 e2       	ldi	r30, 0x24	; 36
    3a38:	f0 e0       	ldi	r31, 0x00	; 0
    3a3a:	80 81       	ld	r24, Z
    3a3c:	91 81       	ldd	r25, Z+1	; 0x01
    3a3e:	9b 83       	std	Y+3, r25	; 0x03
    3a40:	8a 83       	std	Y+2, r24	; 0x02
    3a42:	01 c0       	rjmp	.+2      	; 0x3a46 <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    3a44:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3a46:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a48:	0f 90       	pop	r0
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	cf 91       	pop	r28
    3a50:	df 91       	pop	r29
    3a52:	08 95       	ret

00003a54 <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    3a54:	1f 92       	push	r1
    3a56:	0f 92       	push	r0
    3a58:	0f b6       	in	r0, 0x3f	; 63
    3a5a:	0f 92       	push	r0
    3a5c:	11 24       	eor	r1, r1
    3a5e:	2f 93       	push	r18
    3a60:	3f 93       	push	r19
    3a62:	4f 93       	push	r20
    3a64:	5f 93       	push	r21
    3a66:	6f 93       	push	r22
    3a68:	7f 93       	push	r23
    3a6a:	8f 93       	push	r24
    3a6c:	9f 93       	push	r25
    3a6e:	af 93       	push	r26
    3a70:	bf 93       	push	r27
    3a72:	ef 93       	push	r30
    3a74:	ff 93       	push	r31
    3a76:	df 93       	push	r29
    3a78:	cf 93       	push	r28
    3a7a:	cd b7       	in	r28, 0x3d	; 61
    3a7c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    3a7e:	80 91 50 02 	lds	r24, 0x0250
    3a82:	90 91 51 02 	lds	r25, 0x0251
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	99 f0       	breq	.+38     	; 0x3ab0 <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    3a8a:	10 92 52 02 	sts	0x0252, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    3a8e:	a6 e2       	ldi	r26, 0x26	; 38
    3a90:	b0 e0       	ldi	r27, 0x00	; 0
    3a92:	e6 e2       	ldi	r30, 0x26	; 38
    3a94:	f0 e0       	ldi	r31, 0x00	; 0
    3a96:	80 81       	ld	r24, Z
    3a98:	87 7f       	andi	r24, 0xF7	; 247
    3a9a:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    3a9c:	20 91 50 02 	lds	r18, 0x0250
    3aa0:	30 91 51 02 	lds	r19, 0x0251
    3aa4:	e4 e2       	ldi	r30, 0x24	; 36
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	80 81       	ld	r24, Z
    3aaa:	91 81       	ldd	r25, Z+1	; 0x01
    3aac:	f9 01       	movw	r30, r18
    3aae:	09 95       	icall
	}
}
    3ab0:	cf 91       	pop	r28
    3ab2:	df 91       	pop	r29
    3ab4:	ff 91       	pop	r31
    3ab6:	ef 91       	pop	r30
    3ab8:	bf 91       	pop	r27
    3aba:	af 91       	pop	r26
    3abc:	9f 91       	pop	r25
    3abe:	8f 91       	pop	r24
    3ac0:	7f 91       	pop	r23
    3ac2:	6f 91       	pop	r22
    3ac4:	5f 91       	pop	r21
    3ac6:	4f 91       	pop	r20
    3ac8:	3f 91       	pop	r19
    3aca:	2f 91       	pop	r18
    3acc:	0f 90       	pop	r0
    3ace:	0f be       	out	0x3f, r0	; 63
    3ad0:	0f 90       	pop	r0
    3ad2:	1f 90       	pop	r1
    3ad4:	18 95       	reti

00003ad6 <LCD_ES_tTrigger_Enable>:


static void LCD_ES_tTrigger_Enable(void);

//We make it static cuz we won't use it anywhere but here
static void LCD_ES_tTrigger_Enable(void){
    3ad6:	df 93       	push	r29
    3ad8:	cf 93       	push	r28
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
    3ade:	e0 97       	sbiw	r28, 0x30	; 48
    3ae0:	0f b6       	in	r0, 0x3f	; 63
    3ae2:	f8 94       	cli
    3ae4:	de bf       	out	0x3e, r29	; 62
    3ae6:	0f be       	out	0x3f, r0	; 63
    3ae8:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	62 e0       	ldi	r22, 0x02	; 2
    3aee:	41 e0       	ldi	r20, 0x01	; 1
    3af0:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	a0 e2       	ldi	r26, 0x20	; 32
    3afa:	b1 e4       	ldi	r27, 0x41	; 65
    3afc:	8d a7       	std	Y+45, r24	; 0x2d
    3afe:	9e a7       	std	Y+46, r25	; 0x2e
    3b00:	af a7       	std	Y+47, r26	; 0x2f
    3b02:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b04:	6d a5       	ldd	r22, Y+45	; 0x2d
    3b06:	7e a5       	ldd	r23, Y+46	; 0x2e
    3b08:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b0a:	98 a9       	ldd	r25, Y+48	; 0x30
    3b0c:	2b ea       	ldi	r18, 0xAB	; 171
    3b0e:	3a ea       	ldi	r19, 0xAA	; 170
    3b10:	4a ea       	ldi	r20, 0xAA	; 170
    3b12:	50 e4       	ldi	r21, 0x40	; 64
    3b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	89 a7       	std	Y+41, r24	; 0x29
    3b1e:	9a a7       	std	Y+42, r25	; 0x2a
    3b20:	ab a7       	std	Y+43, r26	; 0x2b
    3b22:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3b24:	69 a5       	ldd	r22, Y+41	; 0x29
    3b26:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b28:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	40 e8       	ldi	r20, 0x80	; 128
    3b32:	5f e3       	ldi	r21, 0x3F	; 63
    3b34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b38:	88 23       	and	r24, r24
    3b3a:	1c f4       	brge	.+6      	; 0x3b42 <LCD_ES_tTrigger_Enable+0x6c>
		__ticks = 1;
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	88 a7       	std	Y+40, r24	; 0x28
    3b40:	91 c0       	rjmp	.+290    	; 0x3c64 <LCD_ES_tTrigger_Enable+0x18e>
	else if (__tmp > 255)
    3b42:	69 a5       	ldd	r22, Y+41	; 0x29
    3b44:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b46:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b48:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	4f e7       	ldi	r20, 0x7F	; 127
    3b50:	53 e4       	ldi	r21, 0x43	; 67
    3b52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b56:	18 16       	cp	r1, r24
    3b58:	0c f0       	brlt	.+2      	; 0x3b5c <LCD_ES_tTrigger_Enable+0x86>
    3b5a:	7b c0       	rjmp	.+246    	; 0x3c52 <LCD_ES_tTrigger_Enable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    3b5c:	6d a5       	ldd	r22, Y+45	; 0x2d
    3b5e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3b60:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b62:	98 a9       	ldd	r25, Y+48	; 0x30
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	4a e7       	ldi	r20, 0x7A	; 122
    3b6a:	54 e4       	ldi	r21, 0x44	; 68
    3b6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b70:	dc 01       	movw	r26, r24
    3b72:	cb 01       	movw	r24, r22
    3b74:	8c a3       	std	Y+36, r24	; 0x24
    3b76:	9d a3       	std	Y+37, r25	; 0x25
    3b78:	ae a3       	std	Y+38, r26	; 0x26
    3b7a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b7c:	6c a1       	ldd	r22, Y+36	; 0x24
    3b7e:	7d a1       	ldd	r23, Y+37	; 0x25
    3b80:	8e a1       	ldd	r24, Y+38	; 0x26
    3b82:	9f a1       	ldd	r25, Y+39	; 0x27
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	4a e7       	ldi	r20, 0x7A	; 122
    3b8a:	55 e4       	ldi	r21, 0x45	; 69
    3b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	88 a3       	std	Y+32, r24	; 0x20
    3b96:	99 a3       	std	Y+33, r25	; 0x21
    3b98:	aa a3       	std	Y+34, r26	; 0x22
    3b9a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3b9c:	68 a1       	ldd	r22, Y+32	; 0x20
    3b9e:	79 a1       	ldd	r23, Y+33	; 0x21
    3ba0:	8a a1       	ldd	r24, Y+34	; 0x22
    3ba2:	9b a1       	ldd	r25, Y+35	; 0x23
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	40 e8       	ldi	r20, 0x80	; 128
    3baa:	5f e3       	ldi	r21, 0x3F	; 63
    3bac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bb0:	88 23       	and	r24, r24
    3bb2:	2c f4       	brge	.+10     	; 0x3bbe <LCD_ES_tTrigger_Enable+0xe8>
		__ticks = 1;
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	9f 8f       	std	Y+31, r25	; 0x1f
    3bba:	8e 8f       	std	Y+30, r24	; 0x1e
    3bbc:	3f c0       	rjmp	.+126    	; 0x3c3c <LCD_ES_tTrigger_Enable+0x166>
	else if (__tmp > 65535)
    3bbe:	68 a1       	ldd	r22, Y+32	; 0x20
    3bc0:	79 a1       	ldd	r23, Y+33	; 0x21
    3bc2:	8a a1       	ldd	r24, Y+34	; 0x22
    3bc4:	9b a1       	ldd	r25, Y+35	; 0x23
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	3f ef       	ldi	r19, 0xFF	; 255
    3bca:	4f e7       	ldi	r20, 0x7F	; 127
    3bcc:	57 e4       	ldi	r21, 0x47	; 71
    3bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bd2:	18 16       	cp	r1, r24
    3bd4:	4c f5       	brge	.+82     	; 0x3c28 <LCD_ES_tTrigger_Enable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd6:	6c a1       	ldd	r22, Y+36	; 0x24
    3bd8:	7d a1       	ldd	r23, Y+37	; 0x25
    3bda:	8e a1       	ldd	r24, Y+38	; 0x26
    3bdc:	9f a1       	ldd	r25, Y+39	; 0x27
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	40 e2       	ldi	r20, 0x20	; 32
    3be4:	51 e4       	ldi	r21, 0x41	; 65
    3be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	bc 01       	movw	r22, r24
    3bf0:	cd 01       	movw	r24, r26
    3bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	9f 8f       	std	Y+31, r25	; 0x1f
    3bfc:	8e 8f       	std	Y+30, r24	; 0x1e
    3bfe:	0f c0       	rjmp	.+30     	; 0x3c1e <LCD_ES_tTrigger_Enable+0x148>
    3c00:	80 e9       	ldi	r24, 0x90	; 144
    3c02:	91 e0       	ldi	r25, 0x01	; 1
    3c04:	9d 8f       	std	Y+29, r25	; 0x1d
    3c06:	8c 8f       	std	Y+28, r24	; 0x1c
    3c08:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c0a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3c0c:	01 97       	sbiw	r24, 0x01	; 1
    3c0e:	f1 f7       	brne	.-4      	; 0x3c0c <LCD_ES_tTrigger_Enable+0x136>
    3c10:	9d 8f       	std	Y+29, r25	; 0x1d
    3c12:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c16:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	9f 8f       	std	Y+31, r25	; 0x1f
    3c1c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c20:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c22:	00 97       	sbiw	r24, 0x00	; 0
    3c24:	69 f7       	brne	.-38     	; 0x3c00 <LCD_ES_tTrigger_Enable+0x12a>
    3c26:	24 c0       	rjmp	.+72     	; 0x3c70 <LCD_ES_tTrigger_Enable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c28:	68 a1       	ldd	r22, Y+32	; 0x20
    3c2a:	79 a1       	ldd	r23, Y+33	; 0x21
    3c2c:	8a a1       	ldd	r24, Y+34	; 0x22
    3c2e:	9b a1       	ldd	r25, Y+35	; 0x23
    3c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	9f 8f       	std	Y+31, r25	; 0x1f
    3c3a:	8e 8f       	std	Y+30, r24	; 0x1e
    3c3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c3e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c40:	9b 8f       	std	Y+27, r25	; 0x1b
    3c42:	8a 8f       	std	Y+26, r24	; 0x1a
    3c44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c46:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c48:	01 97       	sbiw	r24, 0x01	; 1
    3c4a:	f1 f7       	brne	.-4      	; 0x3c48 <LCD_ES_tTrigger_Enable+0x172>
    3c4c:	9b 8f       	std	Y+27, r25	; 0x1b
    3c4e:	8a 8f       	std	Y+26, r24	; 0x1a
    3c50:	0f c0       	rjmp	.+30     	; 0x3c70 <LCD_ES_tTrigger_Enable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c52:	69 a5       	ldd	r22, Y+41	; 0x29
    3c54:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c56:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c58:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5e:	dc 01       	movw	r26, r24
    3c60:	cb 01       	movw	r24, r22
    3c62:	88 a7       	std	Y+40, r24	; 0x28
    3c64:	88 a5       	ldd	r24, Y+40	; 0x28
    3c66:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c68:	89 8d       	ldd	r24, Y+25	; 0x19
    3c6a:	8a 95       	dec	r24
    3c6c:	f1 f7       	brne	.-4      	; 0x3c6a <LCD_ES_tTrigger_Enable+0x194>
    3c6e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_u8SetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	62 e0       	ldi	r22, 0x02	; 2
    3c74:	40 e0       	ldi	r20, 0x00	; 0
    3c76:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	aa ef       	ldi	r26, 0xFA	; 250
    3c80:	b4 e4       	ldi	r27, 0x44	; 68
    3c82:	8d 8b       	std	Y+21, r24	; 0x15
    3c84:	9e 8b       	std	Y+22, r25	; 0x16
    3c86:	af 8b       	std	Y+23, r26	; 0x17
    3c88:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c90:	98 8d       	ldd	r25, Y+24	; 0x18
    3c92:	2b ea       	ldi	r18, 0xAB	; 171
    3c94:	3a ea       	ldi	r19, 0xAA	; 170
    3c96:	4a ea       	ldi	r20, 0xAA	; 170
    3c98:	50 e4       	ldi	r21, 0x40	; 64
    3c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	89 8b       	std	Y+17, r24	; 0x11
    3ca4:	9a 8b       	std	Y+18, r25	; 0x12
    3ca6:	ab 8b       	std	Y+19, r26	; 0x13
    3ca8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3caa:	69 89       	ldd	r22, Y+17	; 0x11
    3cac:	7a 89       	ldd	r23, Y+18	; 0x12
    3cae:	8b 89       	ldd	r24, Y+19	; 0x13
    3cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    3cb2:	20 e0       	ldi	r18, 0x00	; 0
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	40 e8       	ldi	r20, 0x80	; 128
    3cb8:	5f e3       	ldi	r21, 0x3F	; 63
    3cba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cbe:	88 23       	and	r24, r24
    3cc0:	1c f4       	brge	.+6      	; 0x3cc8 <LCD_ES_tTrigger_Enable+0x1f2>
		__ticks = 1;
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	88 8b       	std	Y+16, r24	; 0x10
    3cc6:	91 c0       	rjmp	.+290    	; 0x3dea <LCD_ES_tTrigger_Enable+0x314>
	else if (__tmp > 255)
    3cc8:	69 89       	ldd	r22, Y+17	; 0x11
    3cca:	7a 89       	ldd	r23, Y+18	; 0x12
    3ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    3cce:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	4f e7       	ldi	r20, 0x7F	; 127
    3cd6:	53 e4       	ldi	r21, 0x43	; 67
    3cd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cdc:	18 16       	cp	r1, r24
    3cde:	0c f0       	brlt	.+2      	; 0x3ce2 <LCD_ES_tTrigger_Enable+0x20c>
    3ce0:	7b c0       	rjmp	.+246    	; 0x3dd8 <LCD_ES_tTrigger_Enable+0x302>
	{
		_delay_ms(__us / 1000.0);
    3ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	4a e7       	ldi	r20, 0x7A	; 122
    3cf0:	54 e4       	ldi	r21, 0x44	; 68
    3cf2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	8c 87       	std	Y+12, r24	; 0x0c
    3cfc:	9d 87       	std	Y+13, r25	; 0x0d
    3cfe:	ae 87       	std	Y+14, r26	; 0x0e
    3d00:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d02:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d04:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d06:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d08:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	4a e7       	ldi	r20, 0x7A	; 122
    3d10:	55 e4       	ldi	r21, 0x45	; 69
    3d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	88 87       	std	Y+8, r24	; 0x08
    3d1c:	99 87       	std	Y+9, r25	; 0x09
    3d1e:	aa 87       	std	Y+10, r26	; 0x0a
    3d20:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3d22:	68 85       	ldd	r22, Y+8	; 0x08
    3d24:	79 85       	ldd	r23, Y+9	; 0x09
    3d26:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d28:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	40 e8       	ldi	r20, 0x80	; 128
    3d30:	5f e3       	ldi	r21, 0x3F	; 63
    3d32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d36:	88 23       	and	r24, r24
    3d38:	2c f4       	brge	.+10     	; 0x3d44 <LCD_ES_tTrigger_Enable+0x26e>
		__ticks = 1;
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	9f 83       	std	Y+7, r25	; 0x07
    3d40:	8e 83       	std	Y+6, r24	; 0x06
    3d42:	3f c0       	rjmp	.+126    	; 0x3dc2 <LCD_ES_tTrigger_Enable+0x2ec>
	else if (__tmp > 65535)
    3d44:	68 85       	ldd	r22, Y+8	; 0x08
    3d46:	79 85       	ldd	r23, Y+9	; 0x09
    3d48:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	3f ef       	ldi	r19, 0xFF	; 255
    3d50:	4f e7       	ldi	r20, 0x7F	; 127
    3d52:	57 e4       	ldi	r21, 0x47	; 71
    3d54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d58:	18 16       	cp	r1, r24
    3d5a:	4c f5       	brge	.+82     	; 0x3dae <LCD_ES_tTrigger_Enable+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d60:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d62:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	40 e2       	ldi	r20, 0x20	; 32
    3d6a:	51 e4       	ldi	r21, 0x41	; 65
    3d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	bc 01       	movw	r22, r24
    3d76:	cd 01       	movw	r24, r26
    3d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	9f 83       	std	Y+7, r25	; 0x07
    3d82:	8e 83       	std	Y+6, r24	; 0x06
    3d84:	0f c0       	rjmp	.+30     	; 0x3da4 <LCD_ES_tTrigger_Enable+0x2ce>
    3d86:	80 e9       	ldi	r24, 0x90	; 144
    3d88:	91 e0       	ldi	r25, 0x01	; 1
    3d8a:	9d 83       	std	Y+5, r25	; 0x05
    3d8c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d90:	9d 81       	ldd	r25, Y+5	; 0x05
    3d92:	01 97       	sbiw	r24, 0x01	; 1
    3d94:	f1 f7       	brne	.-4      	; 0x3d92 <LCD_ES_tTrigger_Enable+0x2bc>
    3d96:	9d 83       	std	Y+5, r25	; 0x05
    3d98:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d9a:	8e 81       	ldd	r24, Y+6	; 0x06
    3d9c:	9f 81       	ldd	r25, Y+7	; 0x07
    3d9e:	01 97       	sbiw	r24, 0x01	; 1
    3da0:	9f 83       	std	Y+7, r25	; 0x07
    3da2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da4:	8e 81       	ldd	r24, Y+6	; 0x06
    3da6:	9f 81       	ldd	r25, Y+7	; 0x07
    3da8:	00 97       	sbiw	r24, 0x00	; 0
    3daa:	69 f7       	brne	.-38     	; 0x3d86 <LCD_ES_tTrigger_Enable+0x2b0>
    3dac:	24 c0       	rjmp	.+72     	; 0x3df6 <LCD_ES_tTrigger_Enable+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dae:	68 85       	ldd	r22, Y+8	; 0x08
    3db0:	79 85       	ldd	r23, Y+9	; 0x09
    3db2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3db4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	9f 83       	std	Y+7, r25	; 0x07
    3dc0:	8e 83       	std	Y+6, r24	; 0x06
    3dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    3dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    3dc6:	9b 83       	std	Y+3, r25	; 0x03
    3dc8:	8a 83       	std	Y+2, r24	; 0x02
    3dca:	8a 81       	ldd	r24, Y+2	; 0x02
    3dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	f1 f7       	brne	.-4      	; 0x3dce <LCD_ES_tTrigger_Enable+0x2f8>
    3dd2:	9b 83       	std	Y+3, r25	; 0x03
    3dd4:	8a 83       	std	Y+2, r24	; 0x02
    3dd6:	0f c0       	rjmp	.+30     	; 0x3df6 <LCD_ES_tTrigger_Enable+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3dd8:	69 89       	ldd	r22, Y+17	; 0x11
    3dda:	7a 89       	ldd	r23, Y+18	; 0x12
    3ddc:	8b 89       	ldd	r24, Y+19	; 0x13
    3dde:	9c 89       	ldd	r25, Y+20	; 0x14
    3de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	88 8b       	std	Y+16, r24	; 0x10
    3dea:	88 89       	ldd	r24, Y+16	; 0x10
    3dec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3dee:	89 81       	ldd	r24, Y+1	; 0x01
    3df0:	8a 95       	dec	r24
    3df2:	f1 f7       	brne	.-4      	; 0x3df0 <LCD_ES_tTrigger_Enable+0x31a>
    3df4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
}
    3df6:	e0 96       	adiw	r28, 0x30	; 48
    3df8:	0f b6       	in	r0, 0x3f	; 63
    3dfa:	f8 94       	cli
    3dfc:	de bf       	out	0x3e, r29	; 62
    3dfe:	0f be       	out	0x3f, r0	; 63
    3e00:	cd bf       	out	0x3d, r28	; 61
    3e02:	cf 91       	pop	r28
    3e04:	df 91       	pop	r29
    3e06:	08 95       	ret

00003e08 <LCD_sendCommand>:
#define Force2ndline 0xC0
#define ShiftLeft 0x18
#define ShiftRight 0x1C

void LCD_sendCommand(u8 command)
{
    3e08:	df 93       	push	r29
    3e0a:	cf 93       	push	r28
    3e0c:	0f 92       	push	r0
    3e0e:	cd b7       	in	r28, 0x3d	; 61
    3e10:	de b7       	in	r29, 0x3e	; 62
    3e12:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    3e14:	82 e0       	ldi	r24, 0x02	; 2
    3e16:	67 e0       	ldi	r22, 0x07	; 7
    3e18:	40 e0       	ldi	r20, 0x00	; 0
    3e1a:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>

	(GET_BIT(command,7)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D7, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D7, LOGIC_LOW);
    3e1e:	89 81       	ldd	r24, Y+1	; 0x01
    3e20:	88 23       	and	r24, r24
    3e22:	34 f4       	brge	.+12     	; 0x3e30 <LCD_sendCommand+0x28>
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	66 e0       	ldi	r22, 0x06	; 6
    3e28:	41 e0       	ldi	r20, 0x01	; 1
    3e2a:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3e2e:	05 c0       	rjmp	.+10     	; 0x3e3a <LCD_sendCommand+0x32>
    3e30:	80 e0       	ldi	r24, 0x00	; 0
    3e32:	66 e0       	ldi	r22, 0x06	; 6
    3e34:	40 e0       	ldi	r20, 0x00	; 0
    3e36:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	(GET_BIT(command,6)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D6, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D6, LOGIC_LOW);
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
    3e3c:	82 95       	swap	r24
    3e3e:	86 95       	lsr	r24
    3e40:	86 95       	lsr	r24
    3e42:	83 70       	andi	r24, 0x03	; 3
    3e44:	88 2f       	mov	r24, r24
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	81 70       	andi	r24, 0x01	; 1
    3e4a:	90 70       	andi	r25, 0x00	; 0
    3e4c:	88 23       	and	r24, r24
    3e4e:	31 f0       	breq	.+12     	; 0x3e5c <LCD_sendCommand+0x54>
    3e50:	80 e0       	ldi	r24, 0x00	; 0
    3e52:	65 e0       	ldi	r22, 0x05	; 5
    3e54:	41 e0       	ldi	r20, 0x01	; 1
    3e56:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3e5a:	05 c0       	rjmp	.+10     	; 0x3e66 <LCD_sendCommand+0x5e>
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	65 e0       	ldi	r22, 0x05	; 5
    3e60:	40 e0       	ldi	r20, 0x00	; 0
    3e62:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	(GET_BIT(command,5)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D5, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D5, LOGIC_LOW);
    3e66:	89 81       	ldd	r24, Y+1	; 0x01
    3e68:	82 95       	swap	r24
    3e6a:	86 95       	lsr	r24
    3e6c:	87 70       	andi	r24, 0x07	; 7
    3e6e:	88 2f       	mov	r24, r24
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	81 70       	andi	r24, 0x01	; 1
    3e74:	90 70       	andi	r25, 0x00	; 0
    3e76:	88 23       	and	r24, r24
    3e78:	31 f0       	breq	.+12     	; 0x3e86 <LCD_sendCommand+0x7e>
    3e7a:	80 e0       	ldi	r24, 0x00	; 0
    3e7c:	64 e0       	ldi	r22, 0x04	; 4
    3e7e:	41 e0       	ldi	r20, 0x01	; 1
    3e80:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3e84:	05 c0       	rjmp	.+10     	; 0x3e90 <LCD_sendCommand+0x88>
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	64 e0       	ldi	r22, 0x04	; 4
    3e8a:	40 e0       	ldi	r20, 0x00	; 0
    3e8c:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	(GET_BIT(command,4)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D4, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D4, LOGIC_LOW);
    3e90:	89 81       	ldd	r24, Y+1	; 0x01
    3e92:	82 95       	swap	r24
    3e94:	8f 70       	andi	r24, 0x0F	; 15
    3e96:	88 2f       	mov	r24, r24
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	81 70       	andi	r24, 0x01	; 1
    3e9c:	90 70       	andi	r25, 0x00	; 0
    3e9e:	88 23       	and	r24, r24
    3ea0:	31 f0       	breq	.+12     	; 0x3eae <LCD_sendCommand+0xa6>
    3ea2:	80 e0       	ldi	r24, 0x00	; 0
    3ea4:	63 e0       	ldi	r22, 0x03	; 3
    3ea6:	41 e0       	ldi	r20, 0x01	; 1
    3ea8:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3eac:	05 c0       	rjmp	.+10     	; 0x3eb8 <LCD_sendCommand+0xb0>
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	63 e0       	ldi	r22, 0x03	; 3
    3eb2:	40 e0       	ldi	r20, 0x00	; 0
    3eb4:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3eb8:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <LCD_ES_tTrigger_Enable>
	(GET_BIT(command,3)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D7, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D7, LOGIC_LOW);
    3ebc:	89 81       	ldd	r24, Y+1	; 0x01
    3ebe:	86 95       	lsr	r24
    3ec0:	86 95       	lsr	r24
    3ec2:	86 95       	lsr	r24
    3ec4:	88 2f       	mov	r24, r24
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	81 70       	andi	r24, 0x01	; 1
    3eca:	90 70       	andi	r25, 0x00	; 0
    3ecc:	88 23       	and	r24, r24
    3ece:	31 f0       	breq	.+12     	; 0x3edc <LCD_sendCommand+0xd4>
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	66 e0       	ldi	r22, 0x06	; 6
    3ed4:	41 e0       	ldi	r20, 0x01	; 1
    3ed6:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3eda:	05 c0       	rjmp	.+10     	; 0x3ee6 <LCD_sendCommand+0xde>
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	66 e0       	ldi	r22, 0x06	; 6
    3ee0:	40 e0       	ldi	r20, 0x00	; 0
    3ee2:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	(GET_BIT(command,2)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D6, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D6, LOGIC_LOW);
    3ee6:	89 81       	ldd	r24, Y+1	; 0x01
    3ee8:	86 95       	lsr	r24
    3eea:	86 95       	lsr	r24
    3eec:	88 2f       	mov	r24, r24
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	81 70       	andi	r24, 0x01	; 1
    3ef2:	90 70       	andi	r25, 0x00	; 0
    3ef4:	88 23       	and	r24, r24
    3ef6:	31 f0       	breq	.+12     	; 0x3f04 <LCD_sendCommand+0xfc>
    3ef8:	80 e0       	ldi	r24, 0x00	; 0
    3efa:	65 e0       	ldi	r22, 0x05	; 5
    3efc:	41 e0       	ldi	r20, 0x01	; 1
    3efe:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3f02:	05 c0       	rjmp	.+10     	; 0x3f0e <LCD_sendCommand+0x106>
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	65 e0       	ldi	r22, 0x05	; 5
    3f08:	40 e0       	ldi	r20, 0x00	; 0
    3f0a:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	(GET_BIT(command,1)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D5, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D5, LOGIC_LOW);
    3f0e:	89 81       	ldd	r24, Y+1	; 0x01
    3f10:	86 95       	lsr	r24
    3f12:	88 2f       	mov	r24, r24
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	81 70       	andi	r24, 0x01	; 1
    3f18:	90 70       	andi	r25, 0x00	; 0
    3f1a:	88 23       	and	r24, r24
    3f1c:	31 f0       	breq	.+12     	; 0x3f2a <LCD_sendCommand+0x122>
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	64 e0       	ldi	r22, 0x04	; 4
    3f22:	41 e0       	ldi	r20, 0x01	; 1
    3f24:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3f28:	05 c0       	rjmp	.+10     	; 0x3f34 <LCD_sendCommand+0x12c>
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	64 e0       	ldi	r22, 0x04	; 4
    3f2e:	40 e0       	ldi	r20, 0x00	; 0
    3f30:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	(GET_BIT(command,0)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D4, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D4, LOGIC_LOW);
    3f34:	89 81       	ldd	r24, Y+1	; 0x01
    3f36:	88 2f       	mov	r24, r24
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	81 70       	andi	r24, 0x01	; 1
    3f3c:	90 70       	andi	r25, 0x00	; 0
    3f3e:	88 23       	and	r24, r24
    3f40:	31 f0       	breq	.+12     	; 0x3f4e <LCD_sendCommand+0x146>
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	63 e0       	ldi	r22, 0x03	; 3
    3f46:	41 e0       	ldi	r20, 0x01	; 1
    3f48:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3f4c:	05 c0       	rjmp	.+10     	; 0x3f58 <LCD_sendCommand+0x150>
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	63 e0       	ldi	r22, 0x03	; 3
    3f52:	40 e0       	ldi	r20, 0x00	; 0
    3f54:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    3f58:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <LCD_ES_tTrigger_Enable>


}
    3f5c:	0f 90       	pop	r0
    3f5e:	cf 91       	pop	r28
    3f60:	df 91       	pop	r29
    3f62:	08 95       	ret

00003f64 <LCD_displayCharacter>:

void LCD_displayCharacter(u8 data)
{
    3f64:	df 93       	push	r29
    3f66:	cf 93       	push	r28
    3f68:	0f 92       	push	r0
    3f6a:	cd b7       	in	r28, 0x3d	; 61
    3f6c:	de b7       	in	r29, 0x3e	; 62
    3f6e:	89 83       	std	Y+1, r24	; 0x01
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    3f70:	82 e0       	ldi	r24, 0x02	; 2
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	67 e0       	ldi	r22, 0x07	; 7
    3f76:	70 e0       	ldi	r23, 0x00	; 0
    3f78:	41 e0       	ldi	r20, 0x01	; 1
    3f7a:	50 e0       	ldi	r21, 0x00	; 0
    3f7c:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_setPinValue>

	(GET_BIT(data,7)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D7, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D7, LOGIC_LOW);
    3f80:	89 81       	ldd	r24, Y+1	; 0x01
    3f82:	88 23       	and	r24, r24
    3f84:	34 f4       	brge	.+12     	; 0x3f92 <LCD_displayCharacter+0x2e>
    3f86:	80 e0       	ldi	r24, 0x00	; 0
    3f88:	66 e0       	ldi	r22, 0x06	; 6
    3f8a:	41 e0       	ldi	r20, 0x01	; 1
    3f8c:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3f90:	05 c0       	rjmp	.+10     	; 0x3f9c <LCD_displayCharacter+0x38>
    3f92:	80 e0       	ldi	r24, 0x00	; 0
    3f94:	66 e0       	ldi	r22, 0x06	; 6
    3f96:	40 e0       	ldi	r20, 0x00	; 0
    3f98:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	(GET_BIT(data,6)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D6, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D6, LOGIC_LOW);
    3f9c:	89 81       	ldd	r24, Y+1	; 0x01
    3f9e:	82 95       	swap	r24
    3fa0:	86 95       	lsr	r24
    3fa2:	86 95       	lsr	r24
    3fa4:	83 70       	andi	r24, 0x03	; 3
    3fa6:	88 2f       	mov	r24, r24
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	81 70       	andi	r24, 0x01	; 1
    3fac:	90 70       	andi	r25, 0x00	; 0
    3fae:	88 23       	and	r24, r24
    3fb0:	31 f0       	breq	.+12     	; 0x3fbe <LCD_displayCharacter+0x5a>
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	65 e0       	ldi	r22, 0x05	; 5
    3fb6:	41 e0       	ldi	r20, 0x01	; 1
    3fb8:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3fbc:	05 c0       	rjmp	.+10     	; 0x3fc8 <LCD_displayCharacter+0x64>
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	65 e0       	ldi	r22, 0x05	; 5
    3fc2:	40 e0       	ldi	r20, 0x00	; 0
    3fc4:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	(GET_BIT(data,5)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D5, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D5, LOGIC_LOW);
    3fc8:	89 81       	ldd	r24, Y+1	; 0x01
    3fca:	82 95       	swap	r24
    3fcc:	86 95       	lsr	r24
    3fce:	87 70       	andi	r24, 0x07	; 7
    3fd0:	88 2f       	mov	r24, r24
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	81 70       	andi	r24, 0x01	; 1
    3fd6:	90 70       	andi	r25, 0x00	; 0
    3fd8:	88 23       	and	r24, r24
    3fda:	31 f0       	breq	.+12     	; 0x3fe8 <LCD_displayCharacter+0x84>
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
    3fde:	64 e0       	ldi	r22, 0x04	; 4
    3fe0:	41 e0       	ldi	r20, 0x01	; 1
    3fe2:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    3fe6:	05 c0       	rjmp	.+10     	; 0x3ff2 <LCD_displayCharacter+0x8e>
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	64 e0       	ldi	r22, 0x04	; 4
    3fec:	40 e0       	ldi	r20, 0x00	; 0
    3fee:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	(GET_BIT(data,4)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D4, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D4, LOGIC_LOW);
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	82 95       	swap	r24
    3ff6:	8f 70       	andi	r24, 0x0F	; 15
    3ff8:	88 2f       	mov	r24, r24
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	81 70       	andi	r24, 0x01	; 1
    3ffe:	90 70       	andi	r25, 0x00	; 0
    4000:	88 23       	and	r24, r24
    4002:	31 f0       	breq	.+12     	; 0x4010 <LCD_displayCharacter+0xac>
    4004:	80 e0       	ldi	r24, 0x00	; 0
    4006:	63 e0       	ldi	r22, 0x03	; 3
    4008:	41 e0       	ldi	r20, 0x01	; 1
    400a:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    400e:	05 c0       	rjmp	.+10     	; 0x401a <LCD_displayCharacter+0xb6>
    4010:	80 e0       	ldi	r24, 0x00	; 0
    4012:	63 e0       	ldi	r22, 0x03	; 3
    4014:	40 e0       	ldi	r20, 0x00	; 0
    4016:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    401a:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D7, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D7, LOGIC_LOW);
    401e:	89 81       	ldd	r24, Y+1	; 0x01
    4020:	86 95       	lsr	r24
    4022:	86 95       	lsr	r24
    4024:	86 95       	lsr	r24
    4026:	88 2f       	mov	r24, r24
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	81 70       	andi	r24, 0x01	; 1
    402c:	90 70       	andi	r25, 0x00	; 0
    402e:	88 23       	and	r24, r24
    4030:	31 f0       	breq	.+12     	; 0x403e <LCD_displayCharacter+0xda>
    4032:	80 e0       	ldi	r24, 0x00	; 0
    4034:	66 e0       	ldi	r22, 0x06	; 6
    4036:	41 e0       	ldi	r20, 0x01	; 1
    4038:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    403c:	05 c0       	rjmp	.+10     	; 0x4048 <LCD_displayCharacter+0xe4>
    403e:	80 e0       	ldi	r24, 0x00	; 0
    4040:	66 e0       	ldi	r22, 0x06	; 6
    4042:	40 e0       	ldi	r20, 0x00	; 0
    4044:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	(GET_BIT(data,2)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D6, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D6, LOGIC_LOW);
    4048:	89 81       	ldd	r24, Y+1	; 0x01
    404a:	86 95       	lsr	r24
    404c:	86 95       	lsr	r24
    404e:	88 2f       	mov	r24, r24
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	81 70       	andi	r24, 0x01	; 1
    4054:	90 70       	andi	r25, 0x00	; 0
    4056:	88 23       	and	r24, r24
    4058:	31 f0       	breq	.+12     	; 0x4066 <LCD_displayCharacter+0x102>
    405a:	80 e0       	ldi	r24, 0x00	; 0
    405c:	65 e0       	ldi	r22, 0x05	; 5
    405e:	41 e0       	ldi	r20, 0x01	; 1
    4060:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    4064:	05 c0       	rjmp	.+10     	; 0x4070 <LCD_displayCharacter+0x10c>
    4066:	80 e0       	ldi	r24, 0x00	; 0
    4068:	65 e0       	ldi	r22, 0x05	; 5
    406a:	40 e0       	ldi	r20, 0x00	; 0
    406c:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	(GET_BIT(data,1)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D5, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D5, LOGIC_LOW);
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	86 95       	lsr	r24
    4074:	88 2f       	mov	r24, r24
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	81 70       	andi	r24, 0x01	; 1
    407a:	90 70       	andi	r25, 0x00	; 0
    407c:	88 23       	and	r24, r24
    407e:	31 f0       	breq	.+12     	; 0x408c <LCD_displayCharacter+0x128>
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	64 e0       	ldi	r22, 0x04	; 4
    4084:	41 e0       	ldi	r20, 0x01	; 1
    4086:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    408a:	05 c0       	rjmp	.+10     	; 0x4096 <LCD_displayCharacter+0x132>
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	64 e0       	ldi	r22, 0x04	; 4
    4090:	40 e0       	ldi	r20, 0x00	; 0
    4092:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	(GET_BIT(data,0)) ? DIO_u8SetPinValue(LCD_DATA_PORT, D4, LOGIC_HIGH) : DIO_u8SetPinValue(LCD_DATA_PORT, D4, LOGIC_LOW);
    4096:	89 81       	ldd	r24, Y+1	; 0x01
    4098:	88 2f       	mov	r24, r24
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	81 70       	andi	r24, 0x01	; 1
    409e:	90 70       	andi	r25, 0x00	; 0
    40a0:	88 23       	and	r24, r24
    40a2:	31 f0       	breq	.+12     	; 0x40b0 <LCD_displayCharacter+0x14c>
    40a4:	80 e0       	ldi	r24, 0x00	; 0
    40a6:	63 e0       	ldi	r22, 0x03	; 3
    40a8:	41 e0       	ldi	r20, 0x01	; 1
    40aa:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
    40ae:	05 c0       	rjmp	.+10     	; 0x40ba <LCD_displayCharacter+0x156>
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	63 e0       	ldi	r22, 0x03	; 3
    40b4:	40 e0       	ldi	r20, 0x00	; 0
    40b6:	0e 94 0f 18 	call	0x301e	; 0x301e <DIO_u8SetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
    40ba:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <LCD_ES_tTrigger_Enable>
}
    40be:	0f 90       	pop	r0
    40c0:	cf 91       	pop	r28
    40c2:	df 91       	pop	r29
    40c4:	08 95       	ret

000040c6 <LCD_DisplayInteger>:

void LCD_DisplayInteger(u32 num) {
    40c6:	0f 93       	push	r16
    40c8:	1f 93       	push	r17
    40ca:	df 93       	push	r29
    40cc:	cf 93       	push	r28
    40ce:	cd b7       	in	r28, 0x3d	; 61
    40d0:	de b7       	in	r29, 0x3e	; 62
    40d2:	68 97       	sbiw	r28, 0x18	; 24
    40d4:	0f b6       	in	r0, 0x3f	; 63
    40d6:	f8 94       	cli
    40d8:	de bf       	out	0x3e, r29	; 62
    40da:	0f be       	out	0x3f, r0	; 63
    40dc:	cd bf       	out	0x3d, r28	; 61
    40de:	6d 8b       	std	Y+21, r22	; 0x15
    40e0:	7e 8b       	std	Y+22, r23	; 0x16
    40e2:	8f 8b       	std	Y+23, r24	; 0x17
    40e4:	98 8f       	std	Y+24, r25	; 0x18

	// Convert the number to a string
	u8 buffer[16];
	u8 i = 0;
    40e6:	1c 82       	std	Y+4, r1	; 0x04
	u8 isNegative = 0;
    40e8:	1b 82       	std	Y+3, r1	; 0x03
		isNegative = 1;
		num = -num;
	}

	do {
		buffer[i++] = (char)(num % 10) + '0';
    40ea:	8c 81       	ldd	r24, Y+4	; 0x04
    40ec:	08 2f       	mov	r16, r24
    40ee:	10 e0       	ldi	r17, 0x00	; 0
    40f0:	8d 89       	ldd	r24, Y+21	; 0x15
    40f2:	9e 89       	ldd	r25, Y+22	; 0x16
    40f4:	af 89       	ldd	r26, Y+23	; 0x17
    40f6:	b8 8d       	ldd	r27, Y+24	; 0x18
    40f8:	2a e0       	ldi	r18, 0x0A	; 10
    40fa:	30 e0       	ldi	r19, 0x00	; 0
    40fc:	40 e0       	ldi	r20, 0x00	; 0
    40fe:	50 e0       	ldi	r21, 0x00	; 0
    4100:	bc 01       	movw	r22, r24
    4102:	cd 01       	movw	r24, r26
    4104:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <__udivmodsi4>
    4108:	dc 01       	movw	r26, r24
    410a:	cb 01       	movw	r24, r22
    410c:	28 2f       	mov	r18, r24
    410e:	20 5d       	subi	r18, 0xD0	; 208
    4110:	ce 01       	movw	r24, r28
    4112:	05 96       	adiw	r24, 0x05	; 5
    4114:	fc 01       	movw	r30, r24
    4116:	e0 0f       	add	r30, r16
    4118:	f1 1f       	adc	r31, r17
    411a:	20 83       	st	Z, r18
    411c:	8c 81       	ldd	r24, Y+4	; 0x04
    411e:	8f 5f       	subi	r24, 0xFF	; 255
    4120:	8c 83       	std	Y+4, r24	; 0x04
		num /= 10;
    4122:	8d 89       	ldd	r24, Y+21	; 0x15
    4124:	9e 89       	ldd	r25, Y+22	; 0x16
    4126:	af 89       	ldd	r26, Y+23	; 0x17
    4128:	b8 8d       	ldd	r27, Y+24	; 0x18
    412a:	2a e0       	ldi	r18, 0x0A	; 10
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	40 e0       	ldi	r20, 0x00	; 0
    4130:	50 e0       	ldi	r21, 0x00	; 0
    4132:	bc 01       	movw	r22, r24
    4134:	cd 01       	movw	r24, r26
    4136:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <__udivmodsi4>
    413a:	da 01       	movw	r26, r20
    413c:	c9 01       	movw	r24, r18
    413e:	8d 8b       	std	Y+21, r24	; 0x15
    4140:	9e 8b       	std	Y+22, r25	; 0x16
    4142:	af 8b       	std	Y+23, r26	; 0x17
    4144:	b8 8f       	std	Y+24, r27	; 0x18
	} while (num > 0);
    4146:	8d 89       	ldd	r24, Y+21	; 0x15
    4148:	9e 89       	ldd	r25, Y+22	; 0x16
    414a:	af 89       	ldd	r26, Y+23	; 0x17
    414c:	b8 8d       	ldd	r27, Y+24	; 0x18
    414e:	00 97       	sbiw	r24, 0x00	; 0
    4150:	a1 05       	cpc	r26, r1
    4152:	b1 05       	cpc	r27, r1
    4154:	51 f6       	brne	.-108    	; 0x40ea <LCD_DisplayInteger+0x24>

	if (isNegative) {
    4156:	8b 81       	ldd	r24, Y+3	; 0x03
    4158:	88 23       	and	r24, r24
    415a:	69 f0       	breq	.+26     	; 0x4176 <LCD_DisplayInteger+0xb0>
		buffer[i++] = '-';
    415c:	8c 81       	ldd	r24, Y+4	; 0x04
    415e:	28 2f       	mov	r18, r24
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	ce 01       	movw	r24, r28
    4164:	05 96       	adiw	r24, 0x05	; 5
    4166:	fc 01       	movw	r30, r24
    4168:	e2 0f       	add	r30, r18
    416a:	f3 1f       	adc	r31, r19
    416c:	8d e2       	ldi	r24, 0x2D	; 45
    416e:	80 83       	st	Z, r24
    4170:	8c 81       	ldd	r24, Y+4	; 0x04
    4172:	8f 5f       	subi	r24, 0xFF	; 255
    4174:	8c 83       	std	Y+4, r24	; 0x04
	}

	// Reverse the string
	u8 j;
	for (j = 0; j < i / 2; j++) {
    4176:	1a 82       	std	Y+2, r1	; 0x02
    4178:	3d c0       	rjmp	.+122    	; 0x41f4 <LCD_DisplayInteger+0x12e>
		char temp = buffer[j];
    417a:	8a 81       	ldd	r24, Y+2	; 0x02
    417c:	28 2f       	mov	r18, r24
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	ce 01       	movw	r24, r28
    4182:	05 96       	adiw	r24, 0x05	; 5
    4184:	fc 01       	movw	r30, r24
    4186:	e2 0f       	add	r30, r18
    4188:	f3 1f       	adc	r31, r19
    418a:	80 81       	ld	r24, Z
    418c:	89 83       	std	Y+1, r24	; 0x01
		buffer[j] = buffer[i - j - 1];
    418e:	8a 81       	ldd	r24, Y+2	; 0x02
    4190:	48 2f       	mov	r20, r24
    4192:	50 e0       	ldi	r21, 0x00	; 0
    4194:	8c 81       	ldd	r24, Y+4	; 0x04
    4196:	28 2f       	mov	r18, r24
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	8a 81       	ldd	r24, Y+2	; 0x02
    419c:	88 2f       	mov	r24, r24
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	b9 01       	movw	r22, r18
    41a2:	68 1b       	sub	r22, r24
    41a4:	79 0b       	sbc	r23, r25
    41a6:	cb 01       	movw	r24, r22
    41a8:	9c 01       	movw	r18, r24
    41aa:	21 50       	subi	r18, 0x01	; 1
    41ac:	30 40       	sbci	r19, 0x00	; 0
    41ae:	ce 01       	movw	r24, r28
    41b0:	05 96       	adiw	r24, 0x05	; 5
    41b2:	fc 01       	movw	r30, r24
    41b4:	e2 0f       	add	r30, r18
    41b6:	f3 1f       	adc	r31, r19
    41b8:	20 81       	ld	r18, Z
    41ba:	ce 01       	movw	r24, r28
    41bc:	05 96       	adiw	r24, 0x05	; 5
    41be:	fc 01       	movw	r30, r24
    41c0:	e4 0f       	add	r30, r20
    41c2:	f5 1f       	adc	r31, r21
    41c4:	20 83       	st	Z, r18
		buffer[i - j - 1] = temp;
    41c6:	8c 81       	ldd	r24, Y+4	; 0x04
    41c8:	28 2f       	mov	r18, r24
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	8a 81       	ldd	r24, Y+2	; 0x02
    41ce:	88 2f       	mov	r24, r24
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	a9 01       	movw	r20, r18
    41d4:	48 1b       	sub	r20, r24
    41d6:	59 0b       	sbc	r21, r25
    41d8:	ca 01       	movw	r24, r20
    41da:	9c 01       	movw	r18, r24
    41dc:	21 50       	subi	r18, 0x01	; 1
    41de:	30 40       	sbci	r19, 0x00	; 0
    41e0:	ce 01       	movw	r24, r28
    41e2:	05 96       	adiw	r24, 0x05	; 5
    41e4:	fc 01       	movw	r30, r24
    41e6:	e2 0f       	add	r30, r18
    41e8:	f3 1f       	adc	r31, r19
    41ea:	89 81       	ldd	r24, Y+1	; 0x01
    41ec:	80 83       	st	Z, r24
		buffer[i++] = '-';
	}

	// Reverse the string
	u8 j;
	for (j = 0; j < i / 2; j++) {
    41ee:	8a 81       	ldd	r24, Y+2	; 0x02
    41f0:	8f 5f       	subi	r24, 0xFF	; 255
    41f2:	8a 83       	std	Y+2, r24	; 0x02
    41f4:	8c 81       	ldd	r24, Y+4	; 0x04
    41f6:	98 2f       	mov	r25, r24
    41f8:	96 95       	lsr	r25
    41fa:	8a 81       	ldd	r24, Y+2	; 0x02
    41fc:	89 17       	cp	r24, r25
    41fe:	08 f4       	brcc	.+2      	; 0x4202 <LCD_DisplayInteger+0x13c>
    4200:	bc cf       	rjmp	.-136    	; 0x417a <LCD_DisplayInteger+0xb4>
		buffer[j] = buffer[i - j - 1];
		buffer[i - j - 1] = temp;
	}

	// Null-terminate the string
	buffer[i] = '\0';
    4202:	8c 81       	ldd	r24, Y+4	; 0x04
    4204:	28 2f       	mov	r18, r24
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	ce 01       	movw	r24, r28
    420a:	05 96       	adiw	r24, 0x05	; 5
    420c:	fc 01       	movw	r30, r24
    420e:	e2 0f       	add	r30, r18
    4210:	f3 1f       	adc	r31, r19
    4212:	10 82       	st	Z, r1

	// Write the string to LCD
	LCD_displayString(buffer);
    4214:	ce 01       	movw	r24, r28
    4216:	05 96       	adiw	r24, 0x05	; 5
    4218:	0e 94 59 21 	call	0x42b2	; 0x42b2 <LCD_displayString>
}
    421c:	68 96       	adiw	r28, 0x18	; 24
    421e:	0f b6       	in	r0, 0x3f	; 63
    4220:	f8 94       	cli
    4222:	de bf       	out	0x3e, r29	; 62
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	cf 91       	pop	r28
    422a:	df 91       	pop	r29
    422c:	1f 91       	pop	r17
    422e:	0f 91       	pop	r16
    4230:	08 95       	ret

00004232 <LCD_init>:


void LCD_init(void)
{
    4232:	df 93       	push	r29
    4234:	cf 93       	push	r28
    4236:	cd b7       	in	r28, 0x3d	; 61
    4238:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(Four_BitMode); /* Go into 4-bit operating mode*/
    423a:	82 e0       	ldi	r24, 0x02	; 2
    423c:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
	LCD_sendCommand(D4_D7); /* 2 Line, 5*7 matrix in 4-bit mode */
    4240:	88 e2       	ldi	r24, 0x28	; 40
    4242:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
	LCD_sendCommand(CursorON); /* Display on cursor off */
    4246:	8e e0       	ldi	r24, 0x0E	; 14
    4248:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
	LCD_sendCommand(IncrCursor); /* Increment cursor (shift cursor to right) */
    424c:	86 e0       	ldi	r24, 0x06	; 6
    424e:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
	LCD_sendCommand(CLR_Display); /* Clear display screen */
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
}
    4258:	cf 91       	pop	r28
    425a:	df 91       	pop	r29
    425c:	08 95       	ret

0000425e <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    425e:	df 93       	push	r29
    4260:	cf 93       	push	r28
    4262:	00 d0       	rcall	.+0      	; 0x4264 <LCD_GoToXY+0x6>
    4264:	00 d0       	rcall	.+0      	; 0x4266 <LCD_GoToXY+0x8>
    4266:	cd b7       	in	r28, 0x3d	; 61
    4268:	de b7       	in	r29, 0x3e	; 62
    426a:	89 83       	std	Y+1, r24	; 0x01
    426c:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    426e:	89 81       	ldd	r24, Y+1	; 0x01
    4270:	88 32       	cpi	r24, 0x28	; 40
    4272:	c0 f4       	brcc	.+48     	; 0x42a4 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    4274:	89 81       	ldd	r24, Y+1	; 0x01
    4276:	28 2f       	mov	r18, r24
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	3c 83       	std	Y+4, r19	; 0x04
    427c:	2b 83       	std	Y+3, r18	; 0x03
    427e:	8b 81       	ldd	r24, Y+3	; 0x03
    4280:	9c 81       	ldd	r25, Y+4	; 0x04
    4282:	00 97       	sbiw	r24, 0x00	; 0
    4284:	31 f0       	breq	.+12     	; 0x4292 <LCD_GoToXY+0x34>
    4286:	2b 81       	ldd	r18, Y+3	; 0x03
    4288:	3c 81       	ldd	r19, Y+4	; 0x04
    428a:	21 30       	cpi	r18, 0x01	; 1
    428c:	31 05       	cpc	r19, r1
    428e:	31 f0       	breq	.+12     	; 0x429c <LCD_GoToXY+0x3e>
    4290:	09 c0       	rjmp	.+18     	; 0x42a4 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    4292:	8a 81       	ldd	r24, Y+2	; 0x02
    4294:	80 58       	subi	r24, 0x80	; 128
    4296:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
    429a:	04 c0       	rjmp	.+8      	; 0x42a4 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    429c:	8a 81       	ldd	r24, Y+2	; 0x02
    429e:	80 54       	subi	r24, 0x40	; 64
    42a0:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
			break;
		}
	}
}
    42a4:	0f 90       	pop	r0
    42a6:	0f 90       	pop	r0
    42a8:	0f 90       	pop	r0
    42aa:	0f 90       	pop	r0
    42ac:	cf 91       	pop	r28
    42ae:	df 91       	pop	r29
    42b0:	08 95       	ret

000042b2 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    42b2:	df 93       	push	r29
    42b4:	cf 93       	push	r28
    42b6:	00 d0       	rcall	.+0      	; 0x42b8 <LCD_displayString+0x6>
    42b8:	0f 92       	push	r0
    42ba:	cd b7       	in	r28, 0x3d	; 61
    42bc:	de b7       	in	r29, 0x3e	; 62
    42be:	9b 83       	std	Y+3, r25	; 0x03
    42c0:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    42c2:	19 82       	std	Y+1, r1	; 0x01
    42c4:	0e c0       	rjmp	.+28     	; 0x42e2 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    42c6:	89 81       	ldd	r24, Y+1	; 0x01
    42c8:	28 2f       	mov	r18, r24
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	8a 81       	ldd	r24, Y+2	; 0x02
    42ce:	9b 81       	ldd	r25, Y+3	; 0x03
    42d0:	fc 01       	movw	r30, r24
    42d2:	e2 0f       	add	r30, r18
    42d4:	f3 1f       	adc	r31, r19
    42d6:	80 81       	ld	r24, Z
    42d8:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <LCD_displayCharacter>
		i++;
    42dc:	89 81       	ldd	r24, Y+1	; 0x01
    42de:	8f 5f       	subi	r24, 0xFF	; 255
    42e0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
    42e4:	28 2f       	mov	r18, r24
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	8a 81       	ldd	r24, Y+2	; 0x02
    42ea:	9b 81       	ldd	r25, Y+3	; 0x03
    42ec:	fc 01       	movw	r30, r24
    42ee:	e2 0f       	add	r30, r18
    42f0:	f3 1f       	adc	r31, r19
    42f2:	80 81       	ld	r24, Z
    42f4:	88 23       	and	r24, r24
    42f6:	39 f7       	brne	.-50     	; 0x42c6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    42f8:	0f 90       	pop	r0
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	cf 91       	pop	r28
    4300:	df 91       	pop	r29
    4302:	08 95       	ret

00004304 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    4304:	df 93       	push	r29
    4306:	cf 93       	push	r28
    4308:	cd b7       	in	r28, 0x3d	; 61
    430a:	de b7       	in	r29, 0x3e	; 62
    430c:	28 97       	sbiw	r28, 0x08	; 8
    430e:	0f b6       	in	r0, 0x3f	; 63
    4310:	f8 94       	cli
    4312:	de bf       	out	0x3e, r29	; 62
    4314:	0f be       	out	0x3f, r0	; 63
    4316:	cd bf       	out	0x3d, r28	; 61
    4318:	8b 83       	std	Y+3, r24	; 0x03
    431a:	6c 83       	std	Y+4, r22	; 0x04
    431c:	5e 83       	std	Y+6, r21	; 0x06
    431e:	4d 83       	std	Y+5, r20	; 0x05
    4320:	38 87       	std	Y+8, r19	; 0x08
    4322:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    4324:	1a 82       	std	Y+2, r1	; 0x02
    4326:	81 e0       	ldi	r24, 0x01	; 1
    4328:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    432a:	8b 81       	ldd	r24, Y+3	; 0x03
    432c:	88 23       	and	r24, r24
    432e:	49 f4       	brne	.+18     	; 0x4342 <LCD_String_xy+0x3e>
    4330:	8c 81       	ldd	r24, Y+4	; 0x04
    4332:	80 31       	cpi	r24, 0x10	; 16
    4334:	30 f4       	brcc	.+12     	; 0x4342 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    4336:	8c 81       	ldd	r24, Y+4	; 0x04
    4338:	8f 70       	andi	r24, 0x0F	; 15
    433a:	80 68       	ori	r24, 0x80	; 128
    433c:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
    4340:	3a c0       	rjmp	.+116    	; 0x43b6 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    4342:	8b 81       	ldd	r24, Y+3	; 0x03
    4344:	81 30       	cpi	r24, 0x01	; 1
    4346:	b9 f5       	brne	.+110    	; 0x43b6 <LCD_String_xy+0xb2>
    4348:	8c 81       	ldd	r24, Y+4	; 0x04
    434a:	80 31       	cpi	r24, 0x10	; 16
    434c:	a0 f5       	brcc	.+104    	; 0x43b6 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    434e:	8c 81       	ldd	r24, Y+4	; 0x04
    4350:	8f 70       	andi	r24, 0x0F	; 15
    4352:	80 6c       	ori	r24, 0xC0	; 192
    4354:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
    4358:	2e c0       	rjmp	.+92     	; 0x43b6 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    435a:	8a 81       	ldd	r24, Y+2	; 0x02
    435c:	28 2f       	mov	r18, r24
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	8d 81       	ldd	r24, Y+5	; 0x05
    4362:	9e 81       	ldd	r25, Y+6	; 0x06
    4364:	fc 01       	movw	r30, r24
    4366:	e2 0f       	add	r30, r18
    4368:	f3 1f       	adc	r31, r19
    436a:	80 81       	ld	r24, Z
    436c:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <LCD_displayCharacter>
		i++;
    4370:	8a 81       	ldd	r24, Y+2	; 0x02
    4372:	8f 5f       	subi	r24, 0xFF	; 255
    4374:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    4376:	8b 81       	ldd	r24, Y+3	; 0x03
    4378:	88 23       	and	r24, r24
    437a:	71 f4       	brne	.+28     	; 0x4398 <LCD_String_xy+0x94>
    437c:	8c 81       	ldd	r24, Y+4	; 0x04
    437e:	83 30       	cpi	r24, 0x03	; 3
    4380:	58 f0       	brcs	.+22     	; 0x4398 <LCD_String_xy+0x94>
    4382:	8a 81       	ldd	r24, Y+2	; 0x02
    4384:	8b 30       	cpi	r24, 0x0B	; 11
    4386:	41 f4       	brne	.+16     	; 0x4398 <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	60 e0       	ldi	r22, 0x00	; 0
    438c:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
			c++;
    4390:	89 81       	ldd	r24, Y+1	; 0x01
    4392:	8f 5f       	subi	r24, 0xFF	; 255
    4394:	89 83       	std	Y+1, r24	; 0x01
    4396:	0b c0       	rjmp	.+22     	; 0x43ae <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    4398:	8b 81       	ldd	r24, Y+3	; 0x03
    439a:	81 30       	cpi	r24, 0x01	; 1
    439c:	41 f4       	brne	.+16     	; 0x43ae <LCD_String_xy+0xaa>
    439e:	8c 81       	ldd	r24, Y+4	; 0x04
    43a0:	83 30       	cpi	r24, 0x03	; 3
    43a2:	28 f0       	brcs	.+10     	; 0x43ae <LCD_String_xy+0xaa>
    43a4:	8a 81       	ldd	r24, Y+2	; 0x02
    43a6:	8b 30       	cpi	r24, 0x0B	; 11
    43a8:	11 f4       	brne	.+4      	; 0x43ae <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    43aa:	0e 94 ef 21 	call	0x43de	; 0x43de <LCD_ClearScreen>
		}

		*count = c;
    43ae:	ef 81       	ldd	r30, Y+7	; 0x07
    43b0:	f8 85       	ldd	r31, Y+8	; 0x08
    43b2:	89 81       	ldd	r24, Y+1	; 0x01
    43b4:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    43b6:	8a 81       	ldd	r24, Y+2	; 0x02
    43b8:	28 2f       	mov	r18, r24
    43ba:	30 e0       	ldi	r19, 0x00	; 0
    43bc:	8d 81       	ldd	r24, Y+5	; 0x05
    43be:	9e 81       	ldd	r25, Y+6	; 0x06
    43c0:	fc 01       	movw	r30, r24
    43c2:	e2 0f       	add	r30, r18
    43c4:	f3 1f       	adc	r31, r19
    43c6:	80 81       	ld	r24, Z
    43c8:	88 23       	and	r24, r24
    43ca:	39 f6       	brne	.-114    	; 0x435a <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    43cc:	28 96       	adiw	r28, 0x08	; 8
    43ce:	0f b6       	in	r0, 0x3f	; 63
    43d0:	f8 94       	cli
    43d2:	de bf       	out	0x3e, r29	; 62
    43d4:	0f be       	out	0x3f, r0	; 63
    43d6:	cd bf       	out	0x3d, r28	; 61
    43d8:	cf 91       	pop	r28
    43da:	df 91       	pop	r29
    43dc:	08 95       	ret

000043de <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    43de:	df 93       	push	r29
    43e0:	cf 93       	push	r28
    43e2:	cd b7       	in	r28, 0x3d	; 61
    43e4:	de b7       	in	r29, 0x3e	; 62
    43e6:	2e 97       	sbiw	r28, 0x0e	; 14
    43e8:	0f b6       	in	r0, 0x3f	; 63
    43ea:	f8 94       	cli
    43ec:	de bf       	out	0x3e, r29	; 62
    43ee:	0f be       	out	0x3f, r0	; 63
    43f0:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
    43f8:	80 e0       	ldi	r24, 0x00	; 0
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	a0 e0       	ldi	r26, 0x00	; 0
    43fe:	b0 e4       	ldi	r27, 0x40	; 64
    4400:	8b 87       	std	Y+11, r24	; 0x0b
    4402:	9c 87       	std	Y+12, r25	; 0x0c
    4404:	ad 87       	std	Y+13, r26	; 0x0d
    4406:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4408:	6b 85       	ldd	r22, Y+11	; 0x0b
    440a:	7c 85       	ldd	r23, Y+12	; 0x0c
    440c:	8d 85       	ldd	r24, Y+13	; 0x0d
    440e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	4a e7       	ldi	r20, 0x7A	; 122
    4416:	55 e4       	ldi	r21, 0x45	; 69
    4418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	8f 83       	std	Y+7, r24	; 0x07
    4422:	98 87       	std	Y+8, r25	; 0x08
    4424:	a9 87       	std	Y+9, r26	; 0x09
    4426:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4428:	6f 81       	ldd	r22, Y+7	; 0x07
    442a:	78 85       	ldd	r23, Y+8	; 0x08
    442c:	89 85       	ldd	r24, Y+9	; 0x09
    442e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4430:	20 e0       	ldi	r18, 0x00	; 0
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	40 e8       	ldi	r20, 0x80	; 128
    4436:	5f e3       	ldi	r21, 0x3F	; 63
    4438:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    443c:	88 23       	and	r24, r24
    443e:	2c f4       	brge	.+10     	; 0x444a <LCD_ClearScreen+0x6c>
		__ticks = 1;
    4440:	81 e0       	ldi	r24, 0x01	; 1
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	9e 83       	std	Y+6, r25	; 0x06
    4446:	8d 83       	std	Y+5, r24	; 0x05
    4448:	3f c0       	rjmp	.+126    	; 0x44c8 <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    444a:	6f 81       	ldd	r22, Y+7	; 0x07
    444c:	78 85       	ldd	r23, Y+8	; 0x08
    444e:	89 85       	ldd	r24, Y+9	; 0x09
    4450:	9a 85       	ldd	r25, Y+10	; 0x0a
    4452:	20 e0       	ldi	r18, 0x00	; 0
    4454:	3f ef       	ldi	r19, 0xFF	; 255
    4456:	4f e7       	ldi	r20, 0x7F	; 127
    4458:	57 e4       	ldi	r21, 0x47	; 71
    445a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    445e:	18 16       	cp	r1, r24
    4460:	4c f5       	brge	.+82     	; 0x44b4 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4462:	6b 85       	ldd	r22, Y+11	; 0x0b
    4464:	7c 85       	ldd	r23, Y+12	; 0x0c
    4466:	8d 85       	ldd	r24, Y+13	; 0x0d
    4468:	9e 85       	ldd	r25, Y+14	; 0x0e
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	40 e2       	ldi	r20, 0x20	; 32
    4470:	51 e4       	ldi	r21, 0x41	; 65
    4472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4476:	dc 01       	movw	r26, r24
    4478:	cb 01       	movw	r24, r22
    447a:	bc 01       	movw	r22, r24
    447c:	cd 01       	movw	r24, r26
    447e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4482:	dc 01       	movw	r26, r24
    4484:	cb 01       	movw	r24, r22
    4486:	9e 83       	std	Y+6, r25	; 0x06
    4488:	8d 83       	std	Y+5, r24	; 0x05
    448a:	0f c0       	rjmp	.+30     	; 0x44aa <LCD_ClearScreen+0xcc>
    448c:	80 e9       	ldi	r24, 0x90	; 144
    448e:	91 e0       	ldi	r25, 0x01	; 1
    4490:	9c 83       	std	Y+4, r25	; 0x04
    4492:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4494:	8b 81       	ldd	r24, Y+3	; 0x03
    4496:	9c 81       	ldd	r25, Y+4	; 0x04
    4498:	01 97       	sbiw	r24, 0x01	; 1
    449a:	f1 f7       	brne	.-4      	; 0x4498 <LCD_ClearScreen+0xba>
    449c:	9c 83       	std	Y+4, r25	; 0x04
    449e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a0:	8d 81       	ldd	r24, Y+5	; 0x05
    44a2:	9e 81       	ldd	r25, Y+6	; 0x06
    44a4:	01 97       	sbiw	r24, 0x01	; 1
    44a6:	9e 83       	std	Y+6, r25	; 0x06
    44a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44aa:	8d 81       	ldd	r24, Y+5	; 0x05
    44ac:	9e 81       	ldd	r25, Y+6	; 0x06
    44ae:	00 97       	sbiw	r24, 0x00	; 0
    44b0:	69 f7       	brne	.-38     	; 0x448c <LCD_ClearScreen+0xae>
    44b2:	14 c0       	rjmp	.+40     	; 0x44dc <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b4:	6f 81       	ldd	r22, Y+7	; 0x07
    44b6:	78 85       	ldd	r23, Y+8	; 0x08
    44b8:	89 85       	ldd	r24, Y+9	; 0x09
    44ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    44bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c0:	dc 01       	movw	r26, r24
    44c2:	cb 01       	movw	r24, r22
    44c4:	9e 83       	std	Y+6, r25	; 0x06
    44c6:	8d 83       	std	Y+5, r24	; 0x05
    44c8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ca:	9e 81       	ldd	r25, Y+6	; 0x06
    44cc:	9a 83       	std	Y+2, r25	; 0x02
    44ce:	89 83       	std	Y+1, r24	; 0x01
    44d0:	89 81       	ldd	r24, Y+1	; 0x01
    44d2:	9a 81       	ldd	r25, Y+2	; 0x02
    44d4:	01 97       	sbiw	r24, 0x01	; 1
    44d6:	f1 f7       	brne	.-4      	; 0x44d4 <LCD_ClearScreen+0xf6>
    44d8:	9a 83       	std	Y+2, r25	; 0x02
    44da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    44dc:	2e 96       	adiw	r28, 0x0e	; 14
    44de:	0f b6       	in	r0, 0x3f	; 63
    44e0:	f8 94       	cli
    44e2:	de bf       	out	0x3e, r29	; 62
    44e4:	0f be       	out	0x3f, r0	; 63
    44e6:	cd bf       	out	0x3d, r28	; 61
    44e8:	cf 91       	pop	r28
    44ea:	df 91       	pop	r29
    44ec:	08 95       	ret

000044ee <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    44ee:	df 93       	push	r29
    44f0:	cf 93       	push	r28
    44f2:	cd b7       	in	r28, 0x3d	; 61
    44f4:	de b7       	in	r29, 0x3e	; 62
    44f6:	2e 97       	sbiw	r28, 0x0e	; 14
    44f8:	0f b6       	in	r0, 0x3f	; 63
    44fa:	f8 94       	cli
    44fc:	de bf       	out	0x3e, r29	; 62
    44fe:	0f be       	out	0x3f, r0	; 63
    4500:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    4502:	88 e1       	ldi	r24, 0x18	; 24
    4504:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
    4508:	80 e0       	ldi	r24, 0x00	; 0
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	a0 ea       	ldi	r26, 0xA0	; 160
    450e:	b1 e4       	ldi	r27, 0x41	; 65
    4510:	8b 87       	std	Y+11, r24	; 0x0b
    4512:	9c 87       	std	Y+12, r25	; 0x0c
    4514:	ad 87       	std	Y+13, r26	; 0x0d
    4516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4518:	6b 85       	ldd	r22, Y+11	; 0x0b
    451a:	7c 85       	ldd	r23, Y+12	; 0x0c
    451c:	8d 85       	ldd	r24, Y+13	; 0x0d
    451e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	4a e7       	ldi	r20, 0x7A	; 122
    4526:	55 e4       	ldi	r21, 0x45	; 69
    4528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    452c:	dc 01       	movw	r26, r24
    452e:	cb 01       	movw	r24, r22
    4530:	8f 83       	std	Y+7, r24	; 0x07
    4532:	98 87       	std	Y+8, r25	; 0x08
    4534:	a9 87       	std	Y+9, r26	; 0x09
    4536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4538:	6f 81       	ldd	r22, Y+7	; 0x07
    453a:	78 85       	ldd	r23, Y+8	; 0x08
    453c:	89 85       	ldd	r24, Y+9	; 0x09
    453e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	40 e8       	ldi	r20, 0x80	; 128
    4546:	5f e3       	ldi	r21, 0x3F	; 63
    4548:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    454c:	88 23       	and	r24, r24
    454e:	2c f4       	brge	.+10     	; 0x455a <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    4550:	81 e0       	ldi	r24, 0x01	; 1
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	9e 83       	std	Y+6, r25	; 0x06
    4556:	8d 83       	std	Y+5, r24	; 0x05
    4558:	3f c0       	rjmp	.+126    	; 0x45d8 <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    455a:	6f 81       	ldd	r22, Y+7	; 0x07
    455c:	78 85       	ldd	r23, Y+8	; 0x08
    455e:	89 85       	ldd	r24, Y+9	; 0x09
    4560:	9a 85       	ldd	r25, Y+10	; 0x0a
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	3f ef       	ldi	r19, 0xFF	; 255
    4566:	4f e7       	ldi	r20, 0x7F	; 127
    4568:	57 e4       	ldi	r21, 0x47	; 71
    456a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    456e:	18 16       	cp	r1, r24
    4570:	4c f5       	brge	.+82     	; 0x45c4 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4572:	6b 85       	ldd	r22, Y+11	; 0x0b
    4574:	7c 85       	ldd	r23, Y+12	; 0x0c
    4576:	8d 85       	ldd	r24, Y+13	; 0x0d
    4578:	9e 85       	ldd	r25, Y+14	; 0x0e
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	40 e2       	ldi	r20, 0x20	; 32
    4580:	51 e4       	ldi	r21, 0x41	; 65
    4582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4586:	dc 01       	movw	r26, r24
    4588:	cb 01       	movw	r24, r22
    458a:	bc 01       	movw	r22, r24
    458c:	cd 01       	movw	r24, r26
    458e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	9e 83       	std	Y+6, r25	; 0x06
    4598:	8d 83       	std	Y+5, r24	; 0x05
    459a:	0f c0       	rjmp	.+30     	; 0x45ba <LCD_ShiftingLeft+0xcc>
    459c:	80 e9       	ldi	r24, 0x90	; 144
    459e:	91 e0       	ldi	r25, 0x01	; 1
    45a0:	9c 83       	std	Y+4, r25	; 0x04
    45a2:	8b 83       	std	Y+3, r24	; 0x03
    45a4:	8b 81       	ldd	r24, Y+3	; 0x03
    45a6:	9c 81       	ldd	r25, Y+4	; 0x04
    45a8:	01 97       	sbiw	r24, 0x01	; 1
    45aa:	f1 f7       	brne	.-4      	; 0x45a8 <LCD_ShiftingLeft+0xba>
    45ac:	9c 83       	std	Y+4, r25	; 0x04
    45ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b0:	8d 81       	ldd	r24, Y+5	; 0x05
    45b2:	9e 81       	ldd	r25, Y+6	; 0x06
    45b4:	01 97       	sbiw	r24, 0x01	; 1
    45b6:	9e 83       	std	Y+6, r25	; 0x06
    45b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ba:	8d 81       	ldd	r24, Y+5	; 0x05
    45bc:	9e 81       	ldd	r25, Y+6	; 0x06
    45be:	00 97       	sbiw	r24, 0x00	; 0
    45c0:	69 f7       	brne	.-38     	; 0x459c <LCD_ShiftingLeft+0xae>
    45c2:	14 c0       	rjmp	.+40     	; 0x45ec <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45c4:	6f 81       	ldd	r22, Y+7	; 0x07
    45c6:	78 85       	ldd	r23, Y+8	; 0x08
    45c8:	89 85       	ldd	r24, Y+9	; 0x09
    45ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    45cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d0:	dc 01       	movw	r26, r24
    45d2:	cb 01       	movw	r24, r22
    45d4:	9e 83       	std	Y+6, r25	; 0x06
    45d6:	8d 83       	std	Y+5, r24	; 0x05
    45d8:	8d 81       	ldd	r24, Y+5	; 0x05
    45da:	9e 81       	ldd	r25, Y+6	; 0x06
    45dc:	9a 83       	std	Y+2, r25	; 0x02
    45de:	89 83       	std	Y+1, r24	; 0x01
    45e0:	89 81       	ldd	r24, Y+1	; 0x01
    45e2:	9a 81       	ldd	r25, Y+2	; 0x02
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	f1 f7       	brne	.-4      	; 0x45e4 <LCD_ShiftingLeft+0xf6>
    45e8:	9a 83       	std	Y+2, r25	; 0x02
    45ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    45ec:	2e 96       	adiw	r28, 0x0e	; 14
    45ee:	0f b6       	in	r0, 0x3f	; 63
    45f0:	f8 94       	cli
    45f2:	de bf       	out	0x3e, r29	; 62
    45f4:	0f be       	out	0x3f, r0	; 63
    45f6:	cd bf       	out	0x3d, r28	; 61
    45f8:	cf 91       	pop	r28
    45fa:	df 91       	pop	r29
    45fc:	08 95       	ret

000045fe <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    45fe:	df 93       	push	r29
    4600:	cf 93       	push	r28
    4602:	cd b7       	in	r28, 0x3d	; 61
    4604:	de b7       	in	r29, 0x3e	; 62
    4606:	2e 97       	sbiw	r28, 0x0e	; 14
    4608:	0f b6       	in	r0, 0x3f	; 63
    460a:	f8 94       	cli
    460c:	de bf       	out	0x3e, r29	; 62
    460e:	0f be       	out	0x3f, r0	; 63
    4610:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    4612:	8c e1       	ldi	r24, 0x1C	; 28
    4614:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
    4618:	80 e0       	ldi	r24, 0x00	; 0
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	a0 ea       	ldi	r26, 0xA0	; 160
    461e:	b1 e4       	ldi	r27, 0x41	; 65
    4620:	8b 87       	std	Y+11, r24	; 0x0b
    4622:	9c 87       	std	Y+12, r25	; 0x0c
    4624:	ad 87       	std	Y+13, r26	; 0x0d
    4626:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4628:	6b 85       	ldd	r22, Y+11	; 0x0b
    462a:	7c 85       	ldd	r23, Y+12	; 0x0c
    462c:	8d 85       	ldd	r24, Y+13	; 0x0d
    462e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4630:	20 e0       	ldi	r18, 0x00	; 0
    4632:	30 e0       	ldi	r19, 0x00	; 0
    4634:	4a e7       	ldi	r20, 0x7A	; 122
    4636:	55 e4       	ldi	r21, 0x45	; 69
    4638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    463c:	dc 01       	movw	r26, r24
    463e:	cb 01       	movw	r24, r22
    4640:	8f 83       	std	Y+7, r24	; 0x07
    4642:	98 87       	std	Y+8, r25	; 0x08
    4644:	a9 87       	std	Y+9, r26	; 0x09
    4646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4648:	6f 81       	ldd	r22, Y+7	; 0x07
    464a:	78 85       	ldd	r23, Y+8	; 0x08
    464c:	89 85       	ldd	r24, Y+9	; 0x09
    464e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	30 e0       	ldi	r19, 0x00	; 0
    4654:	40 e8       	ldi	r20, 0x80	; 128
    4656:	5f e3       	ldi	r21, 0x3F	; 63
    4658:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    465c:	88 23       	and	r24, r24
    465e:	2c f4       	brge	.+10     	; 0x466a <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	9e 83       	std	Y+6, r25	; 0x06
    4666:	8d 83       	std	Y+5, r24	; 0x05
    4668:	3f c0       	rjmp	.+126    	; 0x46e8 <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    466a:	6f 81       	ldd	r22, Y+7	; 0x07
    466c:	78 85       	ldd	r23, Y+8	; 0x08
    466e:	89 85       	ldd	r24, Y+9	; 0x09
    4670:	9a 85       	ldd	r25, Y+10	; 0x0a
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	3f ef       	ldi	r19, 0xFF	; 255
    4676:	4f e7       	ldi	r20, 0x7F	; 127
    4678:	57 e4       	ldi	r21, 0x47	; 71
    467a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    467e:	18 16       	cp	r1, r24
    4680:	4c f5       	brge	.+82     	; 0x46d4 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4682:	6b 85       	ldd	r22, Y+11	; 0x0b
    4684:	7c 85       	ldd	r23, Y+12	; 0x0c
    4686:	8d 85       	ldd	r24, Y+13	; 0x0d
    4688:	9e 85       	ldd	r25, Y+14	; 0x0e
    468a:	20 e0       	ldi	r18, 0x00	; 0
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	40 e2       	ldi	r20, 0x20	; 32
    4690:	51 e4       	ldi	r21, 0x41	; 65
    4692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4696:	dc 01       	movw	r26, r24
    4698:	cb 01       	movw	r24, r22
    469a:	bc 01       	movw	r22, r24
    469c:	cd 01       	movw	r24, r26
    469e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	9e 83       	std	Y+6, r25	; 0x06
    46a8:	8d 83       	std	Y+5, r24	; 0x05
    46aa:	0f c0       	rjmp	.+30     	; 0x46ca <LCD_ShiftingRight+0xcc>
    46ac:	80 e9       	ldi	r24, 0x90	; 144
    46ae:	91 e0       	ldi	r25, 0x01	; 1
    46b0:	9c 83       	std	Y+4, r25	; 0x04
    46b2:	8b 83       	std	Y+3, r24	; 0x03
    46b4:	8b 81       	ldd	r24, Y+3	; 0x03
    46b6:	9c 81       	ldd	r25, Y+4	; 0x04
    46b8:	01 97       	sbiw	r24, 0x01	; 1
    46ba:	f1 f7       	brne	.-4      	; 0x46b8 <LCD_ShiftingRight+0xba>
    46bc:	9c 83       	std	Y+4, r25	; 0x04
    46be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c0:	8d 81       	ldd	r24, Y+5	; 0x05
    46c2:	9e 81       	ldd	r25, Y+6	; 0x06
    46c4:	01 97       	sbiw	r24, 0x01	; 1
    46c6:	9e 83       	std	Y+6, r25	; 0x06
    46c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ca:	8d 81       	ldd	r24, Y+5	; 0x05
    46cc:	9e 81       	ldd	r25, Y+6	; 0x06
    46ce:	00 97       	sbiw	r24, 0x00	; 0
    46d0:	69 f7       	brne	.-38     	; 0x46ac <LCD_ShiftingRight+0xae>
    46d2:	14 c0       	rjmp	.+40     	; 0x46fc <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46d4:	6f 81       	ldd	r22, Y+7	; 0x07
    46d6:	78 85       	ldd	r23, Y+8	; 0x08
    46d8:	89 85       	ldd	r24, Y+9	; 0x09
    46da:	9a 85       	ldd	r25, Y+10	; 0x0a
    46dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e0:	dc 01       	movw	r26, r24
    46e2:	cb 01       	movw	r24, r22
    46e4:	9e 83       	std	Y+6, r25	; 0x06
    46e6:	8d 83       	std	Y+5, r24	; 0x05
    46e8:	8d 81       	ldd	r24, Y+5	; 0x05
    46ea:	9e 81       	ldd	r25, Y+6	; 0x06
    46ec:	9a 83       	std	Y+2, r25	; 0x02
    46ee:	89 83       	std	Y+1, r24	; 0x01
    46f0:	89 81       	ldd	r24, Y+1	; 0x01
    46f2:	9a 81       	ldd	r25, Y+2	; 0x02
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	f1 f7       	brne	.-4      	; 0x46f4 <LCD_ShiftingRight+0xf6>
    46f8:	9a 83       	std	Y+2, r25	; 0x02
    46fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    46fc:	2e 96       	adiw	r28, 0x0e	; 14
    46fe:	0f b6       	in	r0, 0x3f	; 63
    4700:	f8 94       	cli
    4702:	de bf       	out	0x3e, r29	; 62
    4704:	0f be       	out	0x3f, r0	; 63
    4706:	cd bf       	out	0x3d, r28	; 61
    4708:	cf 91       	pop	r28
    470a:	df 91       	pop	r29
    470c:	08 95       	ret

0000470e <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    470e:	0f 93       	push	r16
    4710:	df 93       	push	r29
    4712:	cf 93       	push	r28
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
    4718:	28 97       	sbiw	r28, 0x08	; 8
    471a:	0f b6       	in	r0, 0x3f	; 63
    471c:	f8 94       	cli
    471e:	de bf       	out	0x3e, r29	; 62
    4720:	0f be       	out	0x3f, r0	; 63
    4722:	cd bf       	out	0x3d, r28	; 61
    4724:	8b 83       	std	Y+3, r24	; 0x03
    4726:	7d 83       	std	Y+5, r23	; 0x05
    4728:	6c 83       	std	Y+4, r22	; 0x04
    472a:	4e 83       	std	Y+6, r20	; 0x06
    472c:	2f 83       	std	Y+7, r18	; 0x07
    472e:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    4730:	88 85       	ldd	r24, Y+8	; 0x08
    4732:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    4736:	1a 82       	std	Y+2, r1	; 0x02
    4738:	19 82       	std	Y+1, r1	; 0x01
    473a:	0f c0       	rjmp	.+30     	; 0x475a <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    473c:	29 81       	ldd	r18, Y+1	; 0x01
    473e:	3a 81       	ldd	r19, Y+2	; 0x02
    4740:	8c 81       	ldd	r24, Y+4	; 0x04
    4742:	9d 81       	ldd	r25, Y+5	; 0x05
    4744:	fc 01       	movw	r30, r24
    4746:	e2 0f       	add	r30, r18
    4748:	f3 1f       	adc	r31, r19
    474a:	80 81       	ld	r24, Z
    474c:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    4750:	89 81       	ldd	r24, Y+1	; 0x01
    4752:	9a 81       	ldd	r25, Y+2	; 0x02
    4754:	01 96       	adiw	r24, 0x01	; 1
    4756:	9a 83       	std	Y+2, r25	; 0x02
    4758:	89 83       	std	Y+1, r24	; 0x01
    475a:	89 81       	ldd	r24, Y+1	; 0x01
    475c:	9a 81       	ldd	r25, Y+2	; 0x02
    475e:	88 30       	cpi	r24, 0x08	; 8
    4760:	91 05       	cpc	r25, r1
    4762:	64 f3       	brlt	.-40     	; 0x473c <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    4764:	8e 81       	ldd	r24, Y+6	; 0x06
    4766:	6f 81       	ldd	r22, Y+7	; 0x07
    4768:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    476c:	8b 81       	ldd	r24, Y+3	; 0x03
    476e:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    4772:	8f 81       	ldd	r24, Y+7	; 0x07
    4774:	80 31       	cpi	r24, 0x10	; 16
    4776:	48 f0       	brcs	.+18     	; 0x478a <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    4778:	0e 94 ef 21 	call	0x43de	; 0x43de <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    477c:	80 e0       	ldi	r24, 0x00	; 0
    477e:	60 e0       	ldi	r22, 0x00	; 0
    4780:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    4784:	8b 81       	ldd	r24, Y+3	; 0x03
    4786:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <LCD_displayCharacter>
	}
}
    478a:	28 96       	adiw	r28, 0x08	; 8
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	f8 94       	cli
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	0f be       	out	0x3f, r0	; 63
    4794:	cd bf       	out	0x3d, r28	; 61
    4796:	cf 91       	pop	r28
    4798:	df 91       	pop	r29
    479a:	0f 91       	pop	r16
    479c:	08 95       	ret

0000479e <displayFloatOnLCD>:



void displayFloatOnLCD(f32 number) {
    479e:	df 93       	push	r29
    47a0:	cf 93       	push	r28
    47a2:	cd b7       	in	r28, 0x3d	; 61
    47a4:	de b7       	in	r29, 0x3e	; 62
    47a6:	28 97       	sbiw	r28, 0x08	; 8
    47a8:	0f b6       	in	r0, 0x3f	; 63
    47aa:	f8 94       	cli
    47ac:	de bf       	out	0x3e, r29	; 62
    47ae:	0f be       	out	0x3f, r0	; 63
    47b0:	cd bf       	out	0x3d, r28	; 61
    47b2:	6d 83       	std	Y+5, r22	; 0x05
    47b4:	7e 83       	std	Y+6, r23	; 0x06
    47b6:	8f 83       	std	Y+7, r24	; 0x07
    47b8:	98 87       	std	Y+8, r25	; 0x08
	int integerPart = (int)number;
    47ba:	6d 81       	ldd	r22, Y+5	; 0x05
    47bc:	7e 81       	ldd	r23, Y+6	; 0x06
    47be:	8f 81       	ldd	r24, Y+7	; 0x07
    47c0:	98 85       	ldd	r25, Y+8	; 0x08
    47c2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    47c6:	dc 01       	movw	r26, r24
    47c8:	cb 01       	movw	r24, r22
    47ca:	9c 83       	std	Y+4, r25	; 0x04
    47cc:	8b 83       	std	Y+3, r24	; 0x03
	int decimalPart = (number - integerPart) * 1000;
    47ce:	8b 81       	ldd	r24, Y+3	; 0x03
    47d0:	9c 81       	ldd	r25, Y+4	; 0x04
    47d2:	aa 27       	eor	r26, r26
    47d4:	97 fd       	sbrc	r25, 7
    47d6:	a0 95       	com	r26
    47d8:	ba 2f       	mov	r27, r26
    47da:	bc 01       	movw	r22, r24
    47dc:	cd 01       	movw	r24, r26
    47de:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    47e2:	9b 01       	movw	r18, r22
    47e4:	ac 01       	movw	r20, r24
    47e6:	6d 81       	ldd	r22, Y+5	; 0x05
    47e8:	7e 81       	ldd	r23, Y+6	; 0x06
    47ea:	8f 81       	ldd	r24, Y+7	; 0x07
    47ec:	98 85       	ldd	r25, Y+8	; 0x08
    47ee:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    47f2:	dc 01       	movw	r26, r24
    47f4:	cb 01       	movw	r24, r22
    47f6:	bc 01       	movw	r22, r24
    47f8:	cd 01       	movw	r24, r26
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	4a e7       	ldi	r20, 0x7A	; 122
    4800:	54 e4       	ldi	r21, 0x44	; 68
    4802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4806:	dc 01       	movw	r26, r24
    4808:	cb 01       	movw	r24, r22
    480a:	bc 01       	movw	r22, r24
    480c:	cd 01       	movw	r24, r26
    480e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4812:	dc 01       	movw	r26, r24
    4814:	cb 01       	movw	r24, r22
    4816:	9a 83       	std	Y+2, r25	; 0x02
    4818:	89 83       	std	Y+1, r24	; 0x01
	if(integerPart >= 100){
    481a:	8b 81       	ldd	r24, Y+3	; 0x03
    481c:	9c 81       	ldd	r25, Y+4	; 0x04
    481e:	84 36       	cpi	r24, 0x64	; 100
    4820:	91 05       	cpc	r25, r1
    4822:	54 f0       	brlt	.+20     	; 0x4838 <displayFloatOnLCD+0x9a>
		integerPart /= 10;
    4824:	8b 81       	ldd	r24, Y+3	; 0x03
    4826:	9c 81       	ldd	r25, Y+4	; 0x04
    4828:	2a e0       	ldi	r18, 0x0A	; 10
    482a:	30 e0       	ldi	r19, 0x00	; 0
    482c:	b9 01       	movw	r22, r18
    482e:	0e 94 93 27 	call	0x4f26	; 0x4f26 <__divmodhi4>
    4832:	cb 01       	movw	r24, r22
    4834:	9c 83       	std	Y+4, r25	; 0x04
    4836:	8b 83       	std	Y+3, r24	; 0x03
	}
	LCD_DisplayInteger(integerPart);
    4838:	8b 81       	ldd	r24, Y+3	; 0x03
    483a:	9c 81       	ldd	r25, Y+4	; 0x04
    483c:	aa 27       	eor	r26, r26
    483e:	97 fd       	sbrc	r25, 7
    4840:	a0 95       	com	r26
    4842:	ba 2f       	mov	r27, r26
    4844:	bc 01       	movw	r22, r24
    4846:	cd 01       	movw	r24, r26
    4848:	0e 94 63 20 	call	0x40c6	; 0x40c6 <LCD_DisplayInteger>
	LCD_displayCharacter('.');
    484c:	8e e2       	ldi	r24, 0x2E	; 46
    484e:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <LCD_displayCharacter>
	LCD_DisplayInteger(decimalPart);
    4852:	89 81       	ldd	r24, Y+1	; 0x01
    4854:	9a 81       	ldd	r25, Y+2	; 0x02
    4856:	aa 27       	eor	r26, r26
    4858:	97 fd       	sbrc	r25, 7
    485a:	a0 95       	com	r26
    485c:	ba 2f       	mov	r27, r26
    485e:	bc 01       	movw	r22, r24
    4860:	cd 01       	movw	r24, r26
    4862:	0e 94 63 20 	call	0x40c6	; 0x40c6 <LCD_DisplayInteger>

}
    4866:	28 96       	adiw	r28, 0x08	; 8
    4868:	0f b6       	in	r0, 0x3f	; 63
    486a:	f8 94       	cli
    486c:	de bf       	out	0x3e, r29	; 62
    486e:	0f be       	out	0x3f, r0	; 63
    4870:	cd bf       	out	0x3d, r28	; 61
    4872:	cf 91       	pop	r28
    4874:	df 91       	pop	r29
    4876:	08 95       	ret

00004878 <displayMinusNumbers>:

void displayMinusNumbers(f32 number) {
    4878:	df 93       	push	r29
    487a:	cf 93       	push	r28
    487c:	00 d0       	rcall	.+0      	; 0x487e <displayMinusNumbers+0x6>
    487e:	00 d0       	rcall	.+0      	; 0x4880 <displayMinusNumbers+0x8>
    4880:	cd b7       	in	r28, 0x3d	; 61
    4882:	de b7       	in	r29, 0x3e	; 62
    4884:	69 83       	std	Y+1, r22	; 0x01
    4886:	7a 83       	std	Y+2, r23	; 0x02
    4888:	8b 83       	std	Y+3, r24	; 0x03
    488a:	9c 83       	std	Y+4, r25	; 0x04

	LCD_displayCharacter('-');
    488c:	8d e2       	ldi	r24, 0x2D	; 45
    488e:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <LCD_displayCharacter>
	number = -number;
    4892:	89 81       	ldd	r24, Y+1	; 0x01
    4894:	9a 81       	ldd	r25, Y+2	; 0x02
    4896:	ab 81       	ldd	r26, Y+3	; 0x03
    4898:	bc 81       	ldd	r27, Y+4	; 0x04
    489a:	b0 58       	subi	r27, 0x80	; 128
    489c:	89 83       	std	Y+1, r24	; 0x01
    489e:	9a 83       	std	Y+2, r25	; 0x02
    48a0:	ab 83       	std	Y+3, r26	; 0x03
    48a2:	bc 83       	std	Y+4, r27	; 0x04
	LCD_DisplayInteger(number);   
    48a4:	69 81       	ldd	r22, Y+1	; 0x01
    48a6:	7a 81       	ldd	r23, Y+2	; 0x02
    48a8:	8b 81       	ldd	r24, Y+3	; 0x03
    48aa:	9c 81       	ldd	r25, Y+4	; 0x04
    48ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48b0:	dc 01       	movw	r26, r24
    48b2:	cb 01       	movw	r24, r22
    48b4:	bc 01       	movw	r22, r24
    48b6:	cd 01       	movw	r24, r26
    48b8:	0e 94 63 20 	call	0x40c6	; 0x40c6 <LCD_DisplayInteger>
}
    48bc:	0f 90       	pop	r0
    48be:	0f 90       	pop	r0
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	cf 91       	pop	r28
    48c6:	df 91       	pop	r29
    48c8:	08 95       	ret

000048ca <main>:
#include "APP_Includes.h"


int main(void){
    48ca:	ef 92       	push	r14
    48cc:	ff 92       	push	r15
    48ce:	0f 93       	push	r16
    48d0:	1f 93       	push	r17
    48d2:	df 93       	push	r29
    48d4:	cf 93       	push	r28
    48d6:	cd b7       	in	r28, 0x3d	; 61
    48d8:	de b7       	in	r29, 0x3e	; 62
    48da:	e0 97       	sbiw	r28, 0x30	; 48
    48dc:	0f b6       	in	r0, 0x3f	; 63
    48de:	f8 94       	cli
    48e0:	de bf       	out	0x3e, r29	; 62
    48e2:	0f be       	out	0x3f, r0	; 63
    48e4:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    48e6:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <DIO_voidInit>
	ADC_void_Init();
    48ea:	0e 94 0b 1c 	call	0x3816	; 0x3816 <ADC_void_Init>
	LCD_init();
    48ee:	0e 94 19 21 	call	0x4232	; 0x4232 <LCD_init>
	UART_Init();
    48f2:	0e 94 b0 07 	call	0xf60	; 0xf60 <UART_Init>
	EXTI_voidEnable_GIE();
    48f6:	0e 94 2f 14 	call	0x285e	; 0x285e <EXTI_voidEnable_GIE>
	/* Global Variables */
	u16 digitalValue;
	u8 UART_Value;
	/* Ohmmeter Variables */
	u16 Vin = 5.0;
    48fa:	85 e0       	ldi	r24, 0x05	; 5
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	9e a3       	std	Y+38, r25	; 0x26
    4900:	8d a3       	std	Y+37, r24	; 0x25
	f64 Vout = 0, R1 = 3300.0, R2 = 0;
    4902:	80 e0       	ldi	r24, 0x00	; 0
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	a0 e0       	ldi	r26, 0x00	; 0
    4908:	b0 e0       	ldi	r27, 0x00	; 0
    490a:	89 a3       	std	Y+33, r24	; 0x21
    490c:	9a a3       	std	Y+34, r25	; 0x22
    490e:	ab a3       	std	Y+35, r26	; 0x23
    4910:	bc a3       	std	Y+36, r27	; 0x24
    4912:	80 e0       	ldi	r24, 0x00	; 0
    4914:	90 e4       	ldi	r25, 0x40	; 64
    4916:	ae e4       	ldi	r26, 0x4E	; 78
    4918:	b5 e4       	ldi	r27, 0x45	; 69
    491a:	8d 8f       	std	Y+29, r24	; 0x1d
    491c:	9e 8f       	std	Y+30, r25	; 0x1e
    491e:	af 8f       	std	Y+31, r26	; 0x1f
    4920:	b8 a3       	std	Y+32, r27	; 0x20
    4922:	80 e0       	ldi	r24, 0x00	; 0
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	a0 e0       	ldi	r26, 0x00	; 0
    4928:	b0 e0       	ldi	r27, 0x00	; 0
    492a:	89 8f       	std	Y+25, r24	; 0x19
    492c:	9a 8f       	std	Y+26, r25	; 0x1a
    492e:	ab 8f       	std	Y+27, r26	; 0x1b
    4930:	bc 8f       	std	Y+28, r27	; 0x1c
	u8 OhmDisplayed = 0;
    4932:	18 8e       	std	Y+24, r1	; 0x18

	/* Voltameter Variables */
	f32 voltValue, temp;
	u8 VoltDisplayed = 0;
    4934:	1f 86       	std	Y+15, r1	; 0x0f


	/* Ameter Variables */
	u16 currentADC = 0;
    4936:	1b a6       	std	Y+43, r1	; 0x2b
    4938:	1a a6       	std	Y+42, r1	; 0x2a
	f64 milliVolts = 0;
    493a:	80 e0       	ldi	r24, 0x00	; 0
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	a0 e0       	ldi	r26, 0x00	; 0
    4940:	b0 e0       	ldi	r27, 0x00	; 0
    4942:	8b 87       	std	Y+11, r24	; 0x0b
    4944:	9c 87       	std	Y+12, r25	; 0x0c
    4946:	ad 87       	std	Y+13, r26	; 0x0d
    4948:	be 87       	std	Y+14, r27	; 0x0e
	u8 sensitivity = 66;
    494a:	82 e4       	ldi	r24, 0x42	; 66
    494c:	8a 87       	std	Y+10, r24	; 0x0a
	f64 currentReading = 0;
    494e:	80 e0       	ldi	r24, 0x00	; 0
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	a0 e0       	ldi	r26, 0x00	; 0
    4954:	b0 e0       	ldi	r27, 0x00	; 0
    4956:	8e 83       	std	Y+6, r24	; 0x06
    4958:	9f 83       	std	Y+7, r25	; 0x07
    495a:	a8 87       	std	Y+8, r26	; 0x08
    495c:	b9 87       	std	Y+9, r27	; 0x09
	u8 ameterDisplayed = 0;
    495e:	1d 82       	std	Y+5, r1	; 0x05
	/* Frequency Variables */
	u32 freq;
	u8 duty;

	// Settings for NodeMCU
	UART_SendString("O:Ohmeter ");
    4960:	80 e6       	ldi	r24, 0x60	; 96
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>
	UART_SendString("V:Voltmeter ");
    4968:	8b e6       	ldi	r24, 0x6B	; 107
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>
	UART_SendString("A:Ameter ");
    4970:	88 e7       	ldi	r24, 0x78	; 120
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>
	UART_SendString("F:Frequency meter ");
    4978:	82 e8       	ldi	r24, 0x82	; 130
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>
	UART_SendString("Enter Your Option : ");
    4980:	85 e9       	ldi	r24, 0x95	; 149
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>


	LCD_GoToXY(0, 0);
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	60 e0       	ldi	r22, 0x00	; 0
    498c:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
	LCD_displayString("O:Ohm V:Volt");
    4990:	8a ea       	ldi	r24, 0xAA	; 170
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	0e 94 59 21 	call	0x42b2	; 0x42b2 <LCD_displayString>
	LCD_GoToXY(1, 0);
    4998:	81 e0       	ldi	r24, 0x01	; 1
    499a:	60 e0       	ldi	r22, 0x00	; 0
    499c:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
	LCD_displayString("A:Amp F:Freq");
    49a0:	87 eb       	ldi	r24, 0xB7	; 183
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	0e 94 59 21 	call	0x42b2	; 0x42b2 <LCD_displayString>

	while(1){
		UART_u8Recieve1ByteData(&UART_Value);
    49a8:	ce 01       	movw	r24, r28
    49aa:	89 96       	adiw	r24, 0x29	; 41
    49ac:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <UART_u8Recieve1ByteData>

		if(UART_Value == 'O'){
    49b0:	89 a5       	ldd	r24, Y+41	; 0x29
    49b2:	8f 34       	cpi	r24, 0x4F	; 79
    49b4:	09 f0       	breq	.+2      	; 0x49b8 <main+0xee>
    49b6:	95 c0       	rjmp	.+298    	; 0x4ae2 <main+0x218>
			ADC_u8_Get_Digital_ValueSynchNonBlocking(0, &digitalValue);
    49b8:	9e 01       	movw	r18, r28
    49ba:	29 5d       	subi	r18, 0xD9	; 217
    49bc:	3f 4f       	sbci	r19, 0xFF	; 255
    49be:	80 e0       	ldi	r24, 0x00	; 0
    49c0:	b9 01       	movw	r22, r18
    49c2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <ADC_u8_Get_Digital_ValueSynchNonBlocking>
			f32 buffer = digitalValue * Vin;
    49c6:	2f a1       	ldd	r18, Y+39	; 0x27
    49c8:	38 a5       	ldd	r19, Y+40	; 0x28
    49ca:	8d a1       	ldd	r24, Y+37	; 0x25
    49cc:	9e a1       	ldd	r25, Y+38	; 0x26
    49ce:	ac 01       	movw	r20, r24
    49d0:	24 9f       	mul	r18, r20
    49d2:	c0 01       	movw	r24, r0
    49d4:	25 9f       	mul	r18, r21
    49d6:	90 0d       	add	r25, r0
    49d8:	34 9f       	mul	r19, r20
    49da:	90 0d       	add	r25, r0
    49dc:	11 24       	eor	r1, r1
    49de:	cc 01       	movw	r24, r24
    49e0:	a0 e0       	ldi	r26, 0x00	; 0
    49e2:	b0 e0       	ldi	r27, 0x00	; 0
    49e4:	bc 01       	movw	r22, r24
    49e6:	cd 01       	movw	r24, r26
    49e8:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    49ec:	dc 01       	movw	r26, r24
    49ee:	cb 01       	movw	r24, r22
    49f0:	89 83       	std	Y+1, r24	; 0x01
    49f2:	9a 83       	std	Y+2, r25	; 0x02
    49f4:	ab 83       	std	Y+3, r26	; 0x03
    49f6:	bc 83       	std	Y+4, r27	; 0x04
			Vout = buffer / 1024.0;
    49f8:	69 81       	ldd	r22, Y+1	; 0x01
    49fa:	7a 81       	ldd	r23, Y+2	; 0x02
    49fc:	8b 81       	ldd	r24, Y+3	; 0x03
    49fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4a00:	20 e0       	ldi	r18, 0x00	; 0
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	40 e8       	ldi	r20, 0x80	; 128
    4a06:	54 e4       	ldi	r21, 0x44	; 68
    4a08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	cb 01       	movw	r24, r22
    4a10:	89 a3       	std	Y+33, r24	; 0x21
    4a12:	9a a3       	std	Y+34, r25	; 0x22
    4a14:	ab a3       	std	Y+35, r26	; 0x23
    4a16:	bc a3       	std	Y+36, r27	; 0x24
			buffer = Vout / (Vin - Vout);
    4a18:	8d a1       	ldd	r24, Y+37	; 0x25
    4a1a:	9e a1       	ldd	r25, Y+38	; 0x26
    4a1c:	cc 01       	movw	r24, r24
    4a1e:	a0 e0       	ldi	r26, 0x00	; 0
    4a20:	b0 e0       	ldi	r27, 0x00	; 0
    4a22:	bc 01       	movw	r22, r24
    4a24:	cd 01       	movw	r24, r26
    4a26:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4a2a:	dc 01       	movw	r26, r24
    4a2c:	cb 01       	movw	r24, r22
    4a2e:	bc 01       	movw	r22, r24
    4a30:	cd 01       	movw	r24, r26
    4a32:	29 a1       	ldd	r18, Y+33	; 0x21
    4a34:	3a a1       	ldd	r19, Y+34	; 0x22
    4a36:	4b a1       	ldd	r20, Y+35	; 0x23
    4a38:	5c a1       	ldd	r21, Y+36	; 0x24
    4a3a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4a3e:	dc 01       	movw	r26, r24
    4a40:	cb 01       	movw	r24, r22
    4a42:	9c 01       	movw	r18, r24
    4a44:	ad 01       	movw	r20, r26
    4a46:	69 a1       	ldd	r22, Y+33	; 0x21
    4a48:	7a a1       	ldd	r23, Y+34	; 0x22
    4a4a:	8b a1       	ldd	r24, Y+35	; 0x23
    4a4c:	9c a1       	ldd	r25, Y+36	; 0x24
    4a4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4a52:	dc 01       	movw	r26, r24
    4a54:	cb 01       	movw	r24, r22
    4a56:	89 83       	std	Y+1, r24	; 0x01
    4a58:	9a 83       	std	Y+2, r25	; 0x02
    4a5a:	ab 83       	std	Y+3, r26	; 0x03
    4a5c:	bc 83       	std	Y+4, r27	; 0x04
			R2 = R1 * buffer;
    4a5e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4a60:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4a62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a64:	98 a1       	ldd	r25, Y+32	; 0x20
    4a66:	29 81       	ldd	r18, Y+1	; 0x01
    4a68:	3a 81       	ldd	r19, Y+2	; 0x02
    4a6a:	4b 81       	ldd	r20, Y+3	; 0x03
    4a6c:	5c 81       	ldd	r21, Y+4	; 0x04
    4a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a72:	dc 01       	movw	r26, r24
    4a74:	cb 01       	movw	r24, r22
    4a76:	89 8f       	std	Y+25, r24	; 0x19
    4a78:	9a 8f       	std	Y+26, r25	; 0x1a
    4a7a:	ab 8f       	std	Y+27, r26	; 0x1b
    4a7c:	bc 8f       	std	Y+28, r27	; 0x1c
			LCD_ClearScreen();
    4a7e:	0e 94 ef 21 	call	0x43de	; 0x43de <LCD_ClearScreen>
			LCD_GoToXY(0, 0);
    4a82:	80 e0       	ldi	r24, 0x00	; 0
    4a84:	60 e0       	ldi	r22, 0x00	; 0
    4a86:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
			LCD_displayString("Ohmmeter.....");
    4a8a:	84 ec       	ldi	r24, 0xC4	; 196
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <LCD_displayString>
			LCD_GoToXY(1, 0);
    4a92:	81 e0       	ldi	r24, 0x01	; 1
    4a94:	60 e0       	ldi	r22, 0x00	; 0
    4a96:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
			LCD_DisplayInteger(R2);
    4a9a:	69 8d       	ldd	r22, Y+25	; 0x19
    4a9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4aa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aa6:	dc 01       	movw	r26, r24
    4aa8:	cb 01       	movw	r24, r22
    4aaa:	bc 01       	movw	r22, r24
    4aac:	cd 01       	movw	r24, r26
    4aae:	0e 94 63 20 	call	0x40c6	; 0x40c6 <LCD_DisplayInteger>
			if(!OhmDisplayed){
    4ab2:	88 8d       	ldd	r24, Y+24	; 0x18
    4ab4:	88 23       	and	r24, r24
    4ab6:	99 f4       	brne	.+38     	; 0x4ade <main+0x214>
				UART_DisplayNumber(R2);
    4ab8:	69 8d       	ldd	r22, Y+25	; 0x19
    4aba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4abe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac4:	dc 01       	movw	r26, r24
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	bc 01       	movw	r22, r24
    4aca:	cd 01       	movw	r24, r26
    4acc:	0e 94 49 08 	call	0x1092	; 0x1092 <UART_DisplayNumber>
				UART_SendString("Ohm ");
    4ad0:	82 ed       	ldi	r24, 0xD2	; 210
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>
				OhmDisplayed = 1;
    4ad8:	81 e0       	ldi	r24, 0x01	; 1
    4ada:	88 8f       	std	Y+24, r24	; 0x18
    4adc:	65 cf       	rjmp	.-310    	; 0x49a8 <main+0xde>
			}
			else{
				OhmDisplayed = 0;
    4ade:	18 8e       	std	Y+24, r1	; 0x18
    4ae0:	63 cf       	rjmp	.-314    	; 0x49a8 <main+0xde>
			}
		}

		else if(UART_Value == 'V'){
    4ae2:	89 a5       	ldd	r24, Y+41	; 0x29
    4ae4:	86 35       	cpi	r24, 0x56	; 86
    4ae6:	09 f0       	breq	.+2      	; 0x4aea <main+0x220>
    4ae8:	bb c0       	rjmp	.+374    	; 0x4c60 <main+0x396>
			ADC_u8_Get_Digital_ValueSynchNonBlocking(1, &digitalValue);
    4aea:	9e 01       	movw	r18, r28
    4aec:	29 5d       	subi	r18, 0xD9	; 217
    4aee:	3f 4f       	sbci	r19, 0xFF	; 255
    4af0:	81 e0       	ldi	r24, 0x01	; 1
    4af2:	b9 01       	movw	r22, r18
    4af4:	0e 94 4a 1c 	call	0x3894	; 0x3894 <ADC_u8_Get_Digital_ValueSynchNonBlocking>
			temp = (digitalValue * 5.0) / 1023;
    4af8:	8f a1       	ldd	r24, Y+39	; 0x27
    4afa:	98 a5       	ldd	r25, Y+40	; 0x28
    4afc:	cc 01       	movw	r24, r24
    4afe:	a0 e0       	ldi	r26, 0x00	; 0
    4b00:	b0 e0       	ldi	r27, 0x00	; 0
    4b02:	bc 01       	movw	r22, r24
    4b04:	cd 01       	movw	r24, r26
    4b06:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	cb 01       	movw	r24, r22
    4b0e:	bc 01       	movw	r22, r24
    4b10:	cd 01       	movw	r24, r26
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	40 ea       	ldi	r20, 0xA0	; 160
    4b18:	50 e4       	ldi	r21, 0x40	; 64
    4b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
    4b22:	bc 01       	movw	r22, r24
    4b24:	cd 01       	movw	r24, r26
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	30 ec       	ldi	r19, 0xC0	; 192
    4b2a:	4f e7       	ldi	r20, 0x7F	; 127
    4b2c:	54 e4       	ldi	r21, 0x44	; 68
    4b2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4b32:	dc 01       	movw	r26, r24
    4b34:	cb 01       	movw	r24, r22
    4b36:	88 8b       	std	Y+16, r24	; 0x10
    4b38:	99 8b       	std	Y+17, r25	; 0x11
    4b3a:	aa 8b       	std	Y+18, r26	; 0x12
    4b3c:	bb 8b       	std	Y+19, r27	; 0x13
			voltValue = temp / (10000.0/(10000.0+90900.0));
    4b3e:	68 89       	ldd	r22, Y+16	; 0x10
    4b40:	79 89       	ldd	r23, Y+17	; 0x11
    4b42:	8a 89       	ldd	r24, Y+18	; 0x12
    4b44:	9b 89       	ldd	r25, Y+19	; 0x13
    4b46:	26 e2       	ldi	r18, 0x26	; 38
    4b48:	39 ef       	ldi	r19, 0xF9	; 249
    4b4a:	4a ec       	ldi	r20, 0xCA	; 202
    4b4c:	5d e3       	ldi	r21, 0x3D	; 61
    4b4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4b52:	dc 01       	movw	r26, r24
    4b54:	cb 01       	movw	r24, r22
    4b56:	8c 8b       	std	Y+20, r24	; 0x14
    4b58:	9d 8b       	std	Y+21, r25	; 0x15
    4b5a:	ae 8b       	std	Y+22, r26	; 0x16
    4b5c:	bf 8b       	std	Y+23, r27	; 0x17
			LCD_ClearScreen();
    4b5e:	0e 94 ef 21 	call	0x43de	; 0x43de <LCD_ClearScreen>
			LCD_GoToXY(0, 0);
    4b62:	80 e0       	ldi	r24, 0x00	; 0
    4b64:	60 e0       	ldi	r22, 0x00	; 0
    4b66:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
			LCD_displayString("Voltmeter.....");
    4b6a:	87 ed       	ldi	r24, 0xD7	; 215
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <LCD_displayString>
			LCD_GoToXY(1, 0);
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	60 e0       	ldi	r22, 0x00	; 0
    4b76:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
			if(voltValue > 0){
    4b7a:	6c 89       	ldd	r22, Y+20	; 0x14
    4b7c:	7d 89       	ldd	r23, Y+21	; 0x15
    4b7e:	8e 89       	ldd	r24, Y+22	; 0x16
    4b80:	9f 89       	ldd	r25, Y+23	; 0x17
    4b82:	20 e0       	ldi	r18, 0x00	; 0
    4b84:	30 e0       	ldi	r19, 0x00	; 0
    4b86:	40 e0       	ldi	r20, 0x00	; 0
    4b88:	50 e0       	ldi	r21, 0x00	; 0
    4b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b8e:	18 16       	cp	r1, r24
    4b90:	fc f4       	brge	.+62     	; 0x4bd0 <main+0x306>
				displayFloatOnLCD(voltValue);
    4b92:	8c 89       	ldd	r24, Y+20	; 0x14
    4b94:	9d 89       	ldd	r25, Y+21	; 0x15
    4b96:	ae 89       	ldd	r26, Y+22	; 0x16
    4b98:	bf 89       	ldd	r27, Y+23	; 0x17
    4b9a:	bc 01       	movw	r22, r24
    4b9c:	cd 01       	movw	r24, r26
    4b9e:	0e 94 cf 23 	call	0x479e	; 0x479e <displayFloatOnLCD>
				LCD_displayCharacter('V');
    4ba2:	86 e5       	ldi	r24, 0x56	; 86
    4ba4:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <LCD_displayCharacter>


				if(!VoltDisplayed){
    4ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4baa:	88 23       	and	r24, r24
    4bac:	79 f4       	brne	.+30     	; 0x4bcc <main+0x302>
					UART_displayFloat(voltValue);
    4bae:	8c 89       	ldd	r24, Y+20	; 0x14
    4bb0:	9d 89       	ldd	r25, Y+21	; 0x15
    4bb2:	ae 89       	ldd	r26, Y+22	; 0x16
    4bb4:	bf 89       	ldd	r27, Y+23	; 0x17
    4bb6:	bc 01       	movw	r22, r24
    4bb8:	cd 01       	movw	r24, r26
    4bba:	0e 94 ff 08 	call	0x11fe	; 0x11fe <UART_displayFloat>
					UART_SendString("Volt ");
    4bbe:	86 ee       	ldi	r24, 0xE6	; 230
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>
					VoltDisplayed = 1;
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	8f 87       	std	Y+15, r24	; 0x0f
    4bca:	ee ce       	rjmp	.-548    	; 0x49a8 <main+0xde>
				}
				else{
					VoltDisplayed = 0;
    4bcc:	1f 86       	std	Y+15, r1	; 0x0f
    4bce:	ec ce       	rjmp	.-552    	; 0x49a8 <main+0xde>
				}

			}
			else{
				LCD_DisplayInteger((u16)(voltValue*1000));
    4bd0:	6c 89       	ldd	r22, Y+20	; 0x14
    4bd2:	7d 89       	ldd	r23, Y+21	; 0x15
    4bd4:	8e 89       	ldd	r24, Y+22	; 0x16
    4bd6:	9f 89       	ldd	r25, Y+23	; 0x17
    4bd8:	20 e0       	ldi	r18, 0x00	; 0
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	4a e7       	ldi	r20, 0x7A	; 122
    4bde:	54 e4       	ldi	r21, 0x44	; 68
    4be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4be4:	dc 01       	movw	r26, r24
    4be6:	cb 01       	movw	r24, r22
    4be8:	bc 01       	movw	r22, r24
    4bea:	cd 01       	movw	r24, r26
    4bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	cb 01       	movw	r24, r22
    4bf4:	cc 01       	movw	r24, r24
    4bf6:	a0 e0       	ldi	r26, 0x00	; 0
    4bf8:	b0 e0       	ldi	r27, 0x00	; 0
    4bfa:	bc 01       	movw	r22, r24
    4bfc:	cd 01       	movw	r24, r26
    4bfe:	0e 94 63 20 	call	0x40c6	; 0x40c6 <LCD_DisplayInteger>
				LCD_displayString("mV");
    4c02:	8c ee       	ldi	r24, 0xEC	; 236
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	0e 94 59 21 	call	0x42b2	; 0x42b2 <LCD_displayString>

				if(!VoltDisplayed){
    4c0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c0c:	88 23       	and	r24, r24
    4c0e:	31 f5       	brne	.+76     	; 0x4c5c <main+0x392>
					UART_displayFloat((u16)(voltValue*1000));
    4c10:	6c 89       	ldd	r22, Y+20	; 0x14
    4c12:	7d 89       	ldd	r23, Y+21	; 0x15
    4c14:	8e 89       	ldd	r24, Y+22	; 0x16
    4c16:	9f 89       	ldd	r25, Y+23	; 0x17
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	4a e7       	ldi	r20, 0x7A	; 122
    4c1e:	54 e4       	ldi	r21, 0x44	; 68
    4c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c24:	dc 01       	movw	r26, r24
    4c26:	cb 01       	movw	r24, r22
    4c28:	bc 01       	movw	r22, r24
    4c2a:	cd 01       	movw	r24, r26
    4c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c30:	dc 01       	movw	r26, r24
    4c32:	cb 01       	movw	r24, r22
    4c34:	cc 01       	movw	r24, r24
    4c36:	a0 e0       	ldi	r26, 0x00	; 0
    4c38:	b0 e0       	ldi	r27, 0x00	; 0
    4c3a:	bc 01       	movw	r22, r24
    4c3c:	cd 01       	movw	r24, r26
    4c3e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4c42:	dc 01       	movw	r26, r24
    4c44:	cb 01       	movw	r24, r22
    4c46:	bc 01       	movw	r22, r24
    4c48:	cd 01       	movw	r24, r26
    4c4a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <UART_displayFloat>
					UART_SendString("mV ");
    4c4e:	8f ee       	ldi	r24, 0xEF	; 239
    4c50:	90 e0       	ldi	r25, 0x00	; 0
    4c52:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>
					VoltDisplayed = 1;
    4c56:	81 e0       	ldi	r24, 0x01	; 1
    4c58:	8f 87       	std	Y+15, r24	; 0x0f
    4c5a:	a6 ce       	rjmp	.-692    	; 0x49a8 <main+0xde>
				}
				else{
					VoltDisplayed = 0;
    4c5c:	1f 86       	std	Y+15, r1	; 0x0f
    4c5e:	a4 ce       	rjmp	.-696    	; 0x49a8 <main+0xde>
				}

			}
		}

		else if(UART_Value == 'A'){
    4c60:	89 a5       	ldd	r24, Y+41	; 0x29
    4c62:	81 34       	cpi	r24, 0x41	; 65
    4c64:	09 f0       	breq	.+2      	; 0x4c68 <main+0x39e>
    4c66:	79 c0       	rjmp	.+242    	; 0x4d5a <main+0x490>
			ADC_u8_Get_Digital_ValueSynchNonBlocking(7, &currentADC);
    4c68:	9e 01       	movw	r18, r28
    4c6a:	26 5d       	subi	r18, 0xD6	; 214
    4c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c6e:	87 e0       	ldi	r24, 0x07	; 7
    4c70:	b9 01       	movw	r22, r18
    4c72:	0e 94 4a 1c 	call	0x3894	; 0x3894 <ADC_u8_Get_Digital_ValueSynchNonBlocking>
			milliVolts = (currentADC / 1024.0) * 5000.0;
    4c76:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c78:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c7a:	cc 01       	movw	r24, r24
    4c7c:	a0 e0       	ldi	r26, 0x00	; 0
    4c7e:	b0 e0       	ldi	r27, 0x00	; 0
    4c80:	bc 01       	movw	r22, r24
    4c82:	cd 01       	movw	r24, r26
    4c84:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4c88:	dc 01       	movw	r26, r24
    4c8a:	cb 01       	movw	r24, r22
    4c8c:	bc 01       	movw	r22, r24
    4c8e:	cd 01       	movw	r24, r26
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	40 e8       	ldi	r20, 0x80	; 128
    4c96:	54 e4       	ldi	r21, 0x44	; 68
    4c98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4c9c:	dc 01       	movw	r26, r24
    4c9e:	cb 01       	movw	r24, r22
    4ca0:	bc 01       	movw	r22, r24
    4ca2:	cd 01       	movw	r24, r26
    4ca4:	20 e0       	ldi	r18, 0x00	; 0
    4ca6:	30 e4       	ldi	r19, 0x40	; 64
    4ca8:	4c e9       	ldi	r20, 0x9C	; 156
    4caa:	55 e4       	ldi	r21, 0x45	; 69
    4cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	8b 87       	std	Y+11, r24	; 0x0b
    4cb6:	9c 87       	std	Y+12, r25	; 0x0c
    4cb8:	ad 87       	std	Y+13, r26	; 0x0d
    4cba:	be 87       	std	Y+14, r27	; 0x0e
			currentReading = (milliVolts - 2500)/sensitivity;
    4cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	30 e4       	ldi	r19, 0x40	; 64
    4cc8:	4c e1       	ldi	r20, 0x1C	; 28
    4cca:	55 e4       	ldi	r21, 0x45	; 69
    4ccc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	cb 01       	movw	r24, r22
    4cd4:	7c 01       	movw	r14, r24
    4cd6:	8d 01       	movw	r16, r26
    4cd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cda:	88 2f       	mov	r24, r24
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	aa 27       	eor	r26, r26
    4ce0:	97 fd       	sbrc	r25, 7
    4ce2:	a0 95       	com	r26
    4ce4:	ba 2f       	mov	r27, r26
    4ce6:	bc 01       	movw	r22, r24
    4ce8:	cd 01       	movw	r24, r26
    4cea:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4cee:	9b 01       	movw	r18, r22
    4cf0:	ac 01       	movw	r20, r24
    4cf2:	c8 01       	movw	r24, r16
    4cf4:	b7 01       	movw	r22, r14
    4cf6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4cfa:	dc 01       	movw	r26, r24
    4cfc:	cb 01       	movw	r24, r22
    4cfe:	8e 83       	std	Y+6, r24	; 0x06
    4d00:	9f 83       	std	Y+7, r25	; 0x07
    4d02:	a8 87       	std	Y+8, r26	; 0x08
    4d04:	b9 87       	std	Y+9, r27	; 0x09
			LCD_ClearScreen();
    4d06:	0e 94 ef 21 	call	0x43de	; 0x43de <LCD_ClearScreen>
			LCD_GoToXY(0, 0);
    4d0a:	80 e0       	ldi	r24, 0x00	; 0
    4d0c:	60 e0       	ldi	r22, 0x00	; 0
    4d0e:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
			LCD_displayString("Ameter.....");
    4d12:	83 ef       	ldi	r24, 0xF3	; 243
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	0e 94 59 21 	call	0x42b2	; 0x42b2 <LCD_displayString>
			LCD_GoToXY(1, 0);
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	60 e0       	ldi	r22, 0x00	; 0
    4d1e:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
			displayFloatOnLCD(currentReading);
    4d22:	8e 81       	ldd	r24, Y+6	; 0x06
    4d24:	9f 81       	ldd	r25, Y+7	; 0x07
    4d26:	a8 85       	ldd	r26, Y+8	; 0x08
    4d28:	b9 85       	ldd	r27, Y+9	; 0x09
    4d2a:	bc 01       	movw	r22, r24
    4d2c:	cd 01       	movw	r24, r26
    4d2e:	0e 94 cf 23 	call	0x479e	; 0x479e <displayFloatOnLCD>

			if(!ameterDisplayed){
    4d32:	8d 81       	ldd	r24, Y+5	; 0x05
    4d34:	88 23       	and	r24, r24
    4d36:	79 f4       	brne	.+30     	; 0x4d56 <main+0x48c>
				UART_displayFloat(currentReading);
    4d38:	8e 81       	ldd	r24, Y+6	; 0x06
    4d3a:	9f 81       	ldd	r25, Y+7	; 0x07
    4d3c:	a8 85       	ldd	r26, Y+8	; 0x08
    4d3e:	b9 85       	ldd	r27, Y+9	; 0x09
    4d40:	bc 01       	movw	r22, r24
    4d42:	cd 01       	movw	r24, r26
    4d44:	0e 94 ff 08 	call	0x11fe	; 0x11fe <UART_displayFloat>
				UART_SendString("Amps ");
    4d48:	8f ef       	ldi	r24, 0xFF	; 255
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>
				ameterDisplayed = 1;
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	8d 83       	std	Y+5, r24	; 0x05
    4d54:	29 ce       	rjmp	.-942    	; 0x49a8 <main+0xde>
			}
			else{
				ameterDisplayed = 0;
    4d56:	1d 82       	std	Y+5, r1	; 0x05
    4d58:	27 ce       	rjmp	.-946    	; 0x49a8 <main+0xde>
			}
		}

		else if(UART_Value == 'F'){
    4d5a:	89 a5       	ldd	r24, Y+41	; 0x29
    4d5c:	86 34       	cpi	r24, 0x46	; 70
    4d5e:	09 f0       	breq	.+2      	; 0x4d62 <main+0x498>
    4d60:	23 ce       	rjmp	.-954    	; 0x49a8 <main+0xde>
			ICU_PWM_Measure(&freq,&duty);
    4d62:	ce 01       	movw	r24, r28
    4d64:	8c 96       	adiw	r24, 0x2c	; 44
    4d66:	9e 01       	movw	r18, r28
    4d68:	20 5d       	subi	r18, 0xD0	; 208
    4d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6c:	b9 01       	movw	r22, r18
    4d6e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <ICU_PWM_Measure>
			LCD_ClearScreen();
    4d72:	0e 94 ef 21 	call	0x43de	; 0x43de <LCD_ClearScreen>
			LCD_GoToXY(0, 0);
    4d76:	80 e0       	ldi	r24, 0x00	; 0
    4d78:	60 e0       	ldi	r22, 0x00	; 0
    4d7a:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
			LCD_displayString("Freq: ");
    4d7e:	85 e0       	ldi	r24, 0x05	; 5
    4d80:	91 e0       	ldi	r25, 0x01	; 1
    4d82:	0e 94 59 21 	call	0x42b2	; 0x42b2 <LCD_displayString>
			UART_Send1ByteData(UART_NewLine);
    4d86:	8d e0       	ldi	r24, 0x0D	; 13
    4d88:	0e 94 06 08 	call	0x100c	; 0x100c <UART_Send1ByteData>
			if(freq < 1000)
    4d8c:	8c a5       	ldd	r24, Y+44	; 0x2c
    4d8e:	9d a5       	ldd	r25, Y+45	; 0x2d
    4d90:	ae a5       	ldd	r26, Y+46	; 0x2e
    4d92:	bf a5       	ldd	r27, Y+47	; 0x2f
    4d94:	88 3e       	cpi	r24, 0xE8	; 232
    4d96:	53 e0       	ldi	r21, 0x03	; 3
    4d98:	95 07       	cpc	r25, r21
    4d9a:	50 e0       	ldi	r21, 0x00	; 0
    4d9c:	a5 07       	cpc	r26, r21
    4d9e:	50 e0       	ldi	r21, 0x00	; 0
    4da0:	b5 07       	cpc	r27, r21
    4da2:	c8 f4       	brcc	.+50     	; 0x4dd6 <main+0x50c>
			{
				LCD_DisplayInteger(freq);
    4da4:	8c a5       	ldd	r24, Y+44	; 0x2c
    4da6:	9d a5       	ldd	r25, Y+45	; 0x2d
    4da8:	ae a5       	ldd	r26, Y+46	; 0x2e
    4daa:	bf a5       	ldd	r27, Y+47	; 0x2f
    4dac:	bc 01       	movw	r22, r24
    4dae:	cd 01       	movw	r24, r26
    4db0:	0e 94 63 20 	call	0x40c6	; 0x40c6 <LCD_DisplayInteger>
				LCD_displayString("Hz");
    4db4:	8c e0       	ldi	r24, 0x0C	; 12
    4db6:	91 e0       	ldi	r25, 0x01	; 1
    4db8:	0e 94 59 21 	call	0x42b2	; 0x42b2 <LCD_displayString>
				UART_DisplayNumber(freq);
    4dbc:	8c a5       	ldd	r24, Y+44	; 0x2c
    4dbe:	9d a5       	ldd	r25, Y+45	; 0x2d
    4dc0:	ae a5       	ldd	r26, Y+46	; 0x2e
    4dc2:	bf a5       	ldd	r27, Y+47	; 0x2f
    4dc4:	bc 01       	movw	r22, r24
    4dc6:	cd 01       	movw	r24, r26
    4dc8:	0e 94 49 08 	call	0x1092	; 0x1092 <UART_DisplayNumber>
				UART_SendString("Hz ");
    4dcc:	8f e0       	ldi	r24, 0x0F	; 15
    4dce:	91 e0       	ldi	r25, 0x01	; 1
    4dd0:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>
    4dd4:	71 c0       	rjmp	.+226    	; 0x4eb8 <main+0x5ee>
			}else if(freq > 1000 && freq < 1000000)
    4dd6:	8c a5       	ldd	r24, Y+44	; 0x2c
    4dd8:	9d a5       	ldd	r25, Y+45	; 0x2d
    4dda:	ae a5       	ldd	r26, Y+46	; 0x2e
    4ddc:	bf a5       	ldd	r27, Y+47	; 0x2f
    4dde:	89 3e       	cpi	r24, 0xE9	; 233
    4de0:	23 e0       	ldi	r18, 0x03	; 3
    4de2:	92 07       	cpc	r25, r18
    4de4:	20 e0       	ldi	r18, 0x00	; 0
    4de6:	a2 07       	cpc	r26, r18
    4de8:	20 e0       	ldi	r18, 0x00	; 0
    4dea:	b2 07       	cpc	r27, r18
    4dec:	c8 f1       	brcs	.+114    	; 0x4e60 <main+0x596>
    4dee:	8c a5       	ldd	r24, Y+44	; 0x2c
    4df0:	9d a5       	ldd	r25, Y+45	; 0x2d
    4df2:	ae a5       	ldd	r26, Y+46	; 0x2e
    4df4:	bf a5       	ldd	r27, Y+47	; 0x2f
    4df6:	80 34       	cpi	r24, 0x40	; 64
    4df8:	42 e4       	ldi	r20, 0x42	; 66
    4dfa:	94 07       	cpc	r25, r20
    4dfc:	4f e0       	ldi	r20, 0x0F	; 15
    4dfe:	a4 07       	cpc	r26, r20
    4e00:	40 e0       	ldi	r20, 0x00	; 0
    4e02:	b4 07       	cpc	r27, r20
    4e04:	68 f5       	brcc	.+90     	; 0x4e60 <main+0x596>
			{
				LCD_DisplayInteger(freq/1000);
    4e06:	8c a5       	ldd	r24, Y+44	; 0x2c
    4e08:	9d a5       	ldd	r25, Y+45	; 0x2d
    4e0a:	ae a5       	ldd	r26, Y+46	; 0x2e
    4e0c:	bf a5       	ldd	r27, Y+47	; 0x2f
    4e0e:	28 ee       	ldi	r18, 0xE8	; 232
    4e10:	33 e0       	ldi	r19, 0x03	; 3
    4e12:	40 e0       	ldi	r20, 0x00	; 0
    4e14:	50 e0       	ldi	r21, 0x00	; 0
    4e16:	bc 01       	movw	r22, r24
    4e18:	cd 01       	movw	r24, r26
    4e1a:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <__udivmodsi4>
    4e1e:	da 01       	movw	r26, r20
    4e20:	c9 01       	movw	r24, r18
    4e22:	bc 01       	movw	r22, r24
    4e24:	cd 01       	movw	r24, r26
    4e26:	0e 94 63 20 	call	0x40c6	; 0x40c6 <LCD_DisplayInteger>
				LCD_displayString("KHz");
    4e2a:	83 e1       	ldi	r24, 0x13	; 19
    4e2c:	91 e0       	ldi	r25, 0x01	; 1
    4e2e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <LCD_displayString>
				UART_DisplayNumber(freq/1000);
    4e32:	8c a5       	ldd	r24, Y+44	; 0x2c
    4e34:	9d a5       	ldd	r25, Y+45	; 0x2d
    4e36:	ae a5       	ldd	r26, Y+46	; 0x2e
    4e38:	bf a5       	ldd	r27, Y+47	; 0x2f
    4e3a:	28 ee       	ldi	r18, 0xE8	; 232
    4e3c:	33 e0       	ldi	r19, 0x03	; 3
    4e3e:	40 e0       	ldi	r20, 0x00	; 0
    4e40:	50 e0       	ldi	r21, 0x00	; 0
    4e42:	bc 01       	movw	r22, r24
    4e44:	cd 01       	movw	r24, r26
    4e46:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <__udivmodsi4>
    4e4a:	da 01       	movw	r26, r20
    4e4c:	c9 01       	movw	r24, r18
    4e4e:	bc 01       	movw	r22, r24
    4e50:	cd 01       	movw	r24, r26
    4e52:	0e 94 49 08 	call	0x1092	; 0x1092 <UART_DisplayNumber>
				UART_SendString("KHz ");
    4e56:	87 e1       	ldi	r24, 0x17	; 23
    4e58:	91 e0       	ldi	r25, 0x01	; 1
    4e5a:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>
    4e5e:	2c c0       	rjmp	.+88     	; 0x4eb8 <main+0x5ee>

			}else{
				LCD_DisplayInteger(freq/1000000);
    4e60:	8c a5       	ldd	r24, Y+44	; 0x2c
    4e62:	9d a5       	ldd	r25, Y+45	; 0x2d
    4e64:	ae a5       	ldd	r26, Y+46	; 0x2e
    4e66:	bf a5       	ldd	r27, Y+47	; 0x2f
    4e68:	20 e4       	ldi	r18, 0x40	; 64
    4e6a:	32 e4       	ldi	r19, 0x42	; 66
    4e6c:	4f e0       	ldi	r20, 0x0F	; 15
    4e6e:	50 e0       	ldi	r21, 0x00	; 0
    4e70:	bc 01       	movw	r22, r24
    4e72:	cd 01       	movw	r24, r26
    4e74:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <__udivmodsi4>
    4e78:	da 01       	movw	r26, r20
    4e7a:	c9 01       	movw	r24, r18
    4e7c:	bc 01       	movw	r22, r24
    4e7e:	cd 01       	movw	r24, r26
    4e80:	0e 94 63 20 	call	0x40c6	; 0x40c6 <LCD_DisplayInteger>
				LCD_displayString("MHz");
    4e84:	8c e1       	ldi	r24, 0x1C	; 28
    4e86:	91 e0       	ldi	r25, 0x01	; 1
    4e88:	0e 94 59 21 	call	0x42b2	; 0x42b2 <LCD_displayString>
				UART_DisplayNumber(freq/1000000);
    4e8c:	8c a5       	ldd	r24, Y+44	; 0x2c
    4e8e:	9d a5       	ldd	r25, Y+45	; 0x2d
    4e90:	ae a5       	ldd	r26, Y+46	; 0x2e
    4e92:	bf a5       	ldd	r27, Y+47	; 0x2f
    4e94:	20 e4       	ldi	r18, 0x40	; 64
    4e96:	32 e4       	ldi	r19, 0x42	; 66
    4e98:	4f e0       	ldi	r20, 0x0F	; 15
    4e9a:	50 e0       	ldi	r21, 0x00	; 0
    4e9c:	bc 01       	movw	r22, r24
    4e9e:	cd 01       	movw	r24, r26
    4ea0:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <__udivmodsi4>
    4ea4:	da 01       	movw	r26, r20
    4ea6:	c9 01       	movw	r24, r18
    4ea8:	bc 01       	movw	r22, r24
    4eaa:	cd 01       	movw	r24, r26
    4eac:	0e 94 49 08 	call	0x1092	; 0x1092 <UART_DisplayNumber>
				UART_SendString("MHz ");
    4eb0:	80 e2       	ldi	r24, 0x20	; 32
    4eb2:	91 e0       	ldi	r25, 0x01	; 1
    4eb4:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_SendString>
			}

			LCD_GoToXY(1, 0);
    4eb8:	81 e0       	ldi	r24, 0x01	; 1
    4eba:	60 e0       	ldi	r22, 0x00	; 0
    4ebc:	0e 94 2f 21 	call	0x425e	; 0x425e <LCD_GoToXY>
			LCD_displayString("Duty: ");
    4ec0:	85 e2       	ldi	r24, 0x25	; 37
    4ec2:	91 e0       	ldi	r25, 0x01	; 1
    4ec4:	0e 94 59 21 	call	0x42b2	; 0x42b2 <LCD_displayString>
			LCD_DisplayInteger(duty);
    4ec8:	88 a9       	ldd	r24, Y+48	; 0x30
    4eca:	88 2f       	mov	r24, r24
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	a0 e0       	ldi	r26, 0x00	; 0
    4ed0:	b0 e0       	ldi	r27, 0x00	; 0
    4ed2:	bc 01       	movw	r22, r24
    4ed4:	cd 01       	movw	r24, r26
    4ed6:	0e 94 63 20 	call	0x40c6	; 0x40c6 <LCD_DisplayInteger>
			LCD_displayCharacter('%');
    4eda:	85 e2       	ldi	r24, 0x25	; 37
    4edc:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <LCD_displayCharacter>
			UART_Send1ByteData(' ');
    4ee0:	80 e2       	ldi	r24, 0x20	; 32
    4ee2:	0e 94 06 08 	call	0x100c	; 0x100c <UART_Send1ByteData>
    4ee6:	60 cd       	rjmp	.-1344   	; 0x49a8 <main+0xde>

00004ee8 <__mulsi3>:
    4ee8:	62 9f       	mul	r22, r18
    4eea:	d0 01       	movw	r26, r0
    4eec:	73 9f       	mul	r23, r19
    4eee:	f0 01       	movw	r30, r0
    4ef0:	82 9f       	mul	r24, r18
    4ef2:	e0 0d       	add	r30, r0
    4ef4:	f1 1d       	adc	r31, r1
    4ef6:	64 9f       	mul	r22, r20
    4ef8:	e0 0d       	add	r30, r0
    4efa:	f1 1d       	adc	r31, r1
    4efc:	92 9f       	mul	r25, r18
    4efe:	f0 0d       	add	r31, r0
    4f00:	83 9f       	mul	r24, r19
    4f02:	f0 0d       	add	r31, r0
    4f04:	74 9f       	mul	r23, r20
    4f06:	f0 0d       	add	r31, r0
    4f08:	65 9f       	mul	r22, r21
    4f0a:	f0 0d       	add	r31, r0
    4f0c:	99 27       	eor	r25, r25
    4f0e:	72 9f       	mul	r23, r18
    4f10:	b0 0d       	add	r27, r0
    4f12:	e1 1d       	adc	r30, r1
    4f14:	f9 1f       	adc	r31, r25
    4f16:	63 9f       	mul	r22, r19
    4f18:	b0 0d       	add	r27, r0
    4f1a:	e1 1d       	adc	r30, r1
    4f1c:	f9 1f       	adc	r31, r25
    4f1e:	bd 01       	movw	r22, r26
    4f20:	cf 01       	movw	r24, r30
    4f22:	11 24       	eor	r1, r1
    4f24:	08 95       	ret

00004f26 <__divmodhi4>:
    4f26:	97 fb       	bst	r25, 7
    4f28:	09 2e       	mov	r0, r25
    4f2a:	07 26       	eor	r0, r23
    4f2c:	0a d0       	rcall	.+20     	; 0x4f42 <__divmodhi4_neg1>
    4f2e:	77 fd       	sbrc	r23, 7
    4f30:	04 d0       	rcall	.+8      	; 0x4f3a <__divmodhi4_neg2>
    4f32:	2e d0       	rcall	.+92     	; 0x4f90 <__udivmodhi4>
    4f34:	06 d0       	rcall	.+12     	; 0x4f42 <__divmodhi4_neg1>
    4f36:	00 20       	and	r0, r0
    4f38:	1a f4       	brpl	.+6      	; 0x4f40 <__divmodhi4_exit>

00004f3a <__divmodhi4_neg2>:
    4f3a:	70 95       	com	r23
    4f3c:	61 95       	neg	r22
    4f3e:	7f 4f       	sbci	r23, 0xFF	; 255

00004f40 <__divmodhi4_exit>:
    4f40:	08 95       	ret

00004f42 <__divmodhi4_neg1>:
    4f42:	f6 f7       	brtc	.-4      	; 0x4f40 <__divmodhi4_exit>
    4f44:	90 95       	com	r25
    4f46:	81 95       	neg	r24
    4f48:	9f 4f       	sbci	r25, 0xFF	; 255
    4f4a:	08 95       	ret

00004f4c <__udivmodsi4>:
    4f4c:	a1 e2       	ldi	r26, 0x21	; 33
    4f4e:	1a 2e       	mov	r1, r26
    4f50:	aa 1b       	sub	r26, r26
    4f52:	bb 1b       	sub	r27, r27
    4f54:	fd 01       	movw	r30, r26
    4f56:	0d c0       	rjmp	.+26     	; 0x4f72 <__udivmodsi4_ep>

00004f58 <__udivmodsi4_loop>:
    4f58:	aa 1f       	adc	r26, r26
    4f5a:	bb 1f       	adc	r27, r27
    4f5c:	ee 1f       	adc	r30, r30
    4f5e:	ff 1f       	adc	r31, r31
    4f60:	a2 17       	cp	r26, r18
    4f62:	b3 07       	cpc	r27, r19
    4f64:	e4 07       	cpc	r30, r20
    4f66:	f5 07       	cpc	r31, r21
    4f68:	20 f0       	brcs	.+8      	; 0x4f72 <__udivmodsi4_ep>
    4f6a:	a2 1b       	sub	r26, r18
    4f6c:	b3 0b       	sbc	r27, r19
    4f6e:	e4 0b       	sbc	r30, r20
    4f70:	f5 0b       	sbc	r31, r21

00004f72 <__udivmodsi4_ep>:
    4f72:	66 1f       	adc	r22, r22
    4f74:	77 1f       	adc	r23, r23
    4f76:	88 1f       	adc	r24, r24
    4f78:	99 1f       	adc	r25, r25
    4f7a:	1a 94       	dec	r1
    4f7c:	69 f7       	brne	.-38     	; 0x4f58 <__udivmodsi4_loop>
    4f7e:	60 95       	com	r22
    4f80:	70 95       	com	r23
    4f82:	80 95       	com	r24
    4f84:	90 95       	com	r25
    4f86:	9b 01       	movw	r18, r22
    4f88:	ac 01       	movw	r20, r24
    4f8a:	bd 01       	movw	r22, r26
    4f8c:	cf 01       	movw	r24, r30
    4f8e:	08 95       	ret

00004f90 <__udivmodhi4>:
    4f90:	aa 1b       	sub	r26, r26
    4f92:	bb 1b       	sub	r27, r27
    4f94:	51 e1       	ldi	r21, 0x11	; 17
    4f96:	07 c0       	rjmp	.+14     	; 0x4fa6 <__udivmodhi4_ep>

00004f98 <__udivmodhi4_loop>:
    4f98:	aa 1f       	adc	r26, r26
    4f9a:	bb 1f       	adc	r27, r27
    4f9c:	a6 17       	cp	r26, r22
    4f9e:	b7 07       	cpc	r27, r23
    4fa0:	10 f0       	brcs	.+4      	; 0x4fa6 <__udivmodhi4_ep>
    4fa2:	a6 1b       	sub	r26, r22
    4fa4:	b7 0b       	sbc	r27, r23

00004fa6 <__udivmodhi4_ep>:
    4fa6:	88 1f       	adc	r24, r24
    4fa8:	99 1f       	adc	r25, r25
    4faa:	5a 95       	dec	r21
    4fac:	a9 f7       	brne	.-22     	; 0x4f98 <__udivmodhi4_loop>
    4fae:	80 95       	com	r24
    4fb0:	90 95       	com	r25
    4fb2:	bc 01       	movw	r22, r24
    4fb4:	cd 01       	movw	r24, r26
    4fb6:	08 95       	ret

00004fb8 <__prologue_saves__>:
    4fb8:	2f 92       	push	r2
    4fba:	3f 92       	push	r3
    4fbc:	4f 92       	push	r4
    4fbe:	5f 92       	push	r5
    4fc0:	6f 92       	push	r6
    4fc2:	7f 92       	push	r7
    4fc4:	8f 92       	push	r8
    4fc6:	9f 92       	push	r9
    4fc8:	af 92       	push	r10
    4fca:	bf 92       	push	r11
    4fcc:	cf 92       	push	r12
    4fce:	df 92       	push	r13
    4fd0:	ef 92       	push	r14
    4fd2:	ff 92       	push	r15
    4fd4:	0f 93       	push	r16
    4fd6:	1f 93       	push	r17
    4fd8:	cf 93       	push	r28
    4fda:	df 93       	push	r29
    4fdc:	cd b7       	in	r28, 0x3d	; 61
    4fde:	de b7       	in	r29, 0x3e	; 62
    4fe0:	ca 1b       	sub	r28, r26
    4fe2:	db 0b       	sbc	r29, r27
    4fe4:	0f b6       	in	r0, 0x3f	; 63
    4fe6:	f8 94       	cli
    4fe8:	de bf       	out	0x3e, r29	; 62
    4fea:	0f be       	out	0x3f, r0	; 63
    4fec:	cd bf       	out	0x3d, r28	; 61
    4fee:	09 94       	ijmp

00004ff0 <__epilogue_restores__>:
    4ff0:	2a 88       	ldd	r2, Y+18	; 0x12
    4ff2:	39 88       	ldd	r3, Y+17	; 0x11
    4ff4:	48 88       	ldd	r4, Y+16	; 0x10
    4ff6:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ff8:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ffa:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ffc:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ffe:	9b 84       	ldd	r9, Y+11	; 0x0b
    5000:	aa 84       	ldd	r10, Y+10	; 0x0a
    5002:	b9 84       	ldd	r11, Y+9	; 0x09
    5004:	c8 84       	ldd	r12, Y+8	; 0x08
    5006:	df 80       	ldd	r13, Y+7	; 0x07
    5008:	ee 80       	ldd	r14, Y+6	; 0x06
    500a:	fd 80       	ldd	r15, Y+5	; 0x05
    500c:	0c 81       	ldd	r16, Y+4	; 0x04
    500e:	1b 81       	ldd	r17, Y+3	; 0x03
    5010:	aa 81       	ldd	r26, Y+2	; 0x02
    5012:	b9 81       	ldd	r27, Y+1	; 0x01
    5014:	ce 0f       	add	r28, r30
    5016:	d1 1d       	adc	r29, r1
    5018:	0f b6       	in	r0, 0x3f	; 63
    501a:	f8 94       	cli
    501c:	de bf       	out	0x3e, r29	; 62
    501e:	0f be       	out	0x3f, r0	; 63
    5020:	cd bf       	out	0x3d, r28	; 61
    5022:	ed 01       	movw	r28, r26
    5024:	08 95       	ret

00005026 <_exit>:
    5026:	f8 94       	cli

00005028 <__stop_program>:
    5028:	ff cf       	rjmp	.-2      	; 0x5028 <__stop_program>
